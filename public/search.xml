<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>K8s自动扩容和自愈</title>
      <link href="/2025/03/16/K8s%E8%87%AA%E5%8A%A8%E6%89%A9%E5%AE%B9%E5%92%8C%E8%87%AA%E6%84%88/"/>
      <url>/2025/03/16/K8s%E8%87%AA%E5%8A%A8%E6%89%A9%E5%AE%B9%E5%92%8C%E8%87%AA%E6%84%88/</url>
      
        <content type="html"><![CDATA[<p>‍‍‍</p><h2 id="自动自愈"><a href="#自动自愈" class="headerlink" title="自动自愈"></a>自动自愈</h2><p>什么是自动自愈？</p><ul><li>当业务进程意外中断，或者节点产生故障时，系统可以快速识别，自动重启并恢复服务。</li><li>自愈能够自动转移故障，也就是让业务不健康的节点不接收流量，保证用户体验。</li></ul><p>通过自动自愈摆脱 7*24 小时 Oncall😀</p><p>‍</p><p><strong>首先</strong>，通过 kubectl create deployment 创建另一种工作负载类型：Deployment。</p><p>例如</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yihui.li@yihuilideMBP k8sdemo % kubectl create deployment hello-docker-flask --image=kalosora/hello-docker-flask:latest --replicas=2</span><br><span class="line">deployment.apps/hello-docker-flask created</span><br></pre></td></tr></table></figure><ul><li>hello-docker-flask，代表工作负载的名称</li><li>– image，代表镜像名称</li><li>–replicas， 代表pod的副本数</li><li>还可以添加 –dry-run&#x3D;client 和 -o 参数，单纯输出 Manifest 内容</li></ul><p>本质上，这条命令会生成 Deployment Manifest，然后自动执行 kubectl apply 将 Manifest 应用到集群内，省略了我们手动编写 Manifest 的过程</p><p>‍</p><p><strong>然后</strong>，使用 kubectl create service 命令创建 Service：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yihui.li@yihuilideMBP k8sdemo % kubectl create service clusterip hello-docker-flask --tcp=5000:5000</span><br><span class="line">service/hello-docker-flask created</span><br><span class="line">yihui.li@yihuilideMBP k8sdemo %</span><br></pre></td></tr></table></figure><p>‍</p><p><strong>此外</strong>，使用 kubectl create ingress 命令创建 Ingress：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl create ingress hello-docker-flask --rule=&quot;/=hello-docker-flask:5000&quot;</span><br></pre></td></tr></table></figure><p>‍</p><p><strong>最后</strong>，部署Ingress-nginx</p><p><a href="https://github.com/KaloSora/K8s-Learn/blob/main/resource/ingress-nginx/ingress-nginx.yaml">ingress-nginx</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">yihui.li@yihuilideMBP k8sdemo % kubectl create -f https://ghfast.top/https://raw.githubusercontent.com/lyzhang1999/resource/main/ingress-nginx/ingress-nginx.yaml</span><br><span class="line">namespace/ingress-nginx created</span><br><span class="line">serviceaccount/ingress-nginx created</span><br><span class="line">serviceaccount/ingress-nginx-admission created</span><br><span class="line">role.rbac.authorization.k8s.io/ingress-nginx created</span><br><span class="line">role.rbac.authorization.k8s.io/ingress-nginx-admission created</span><br><span class="line">clusterrole.rbac.authorization.k8s.io/ingress-nginx created</span><br><span class="line">clusterrole.rbac.authorization.k8s.io/ingress-nginx-admission created</span><br><span class="line">rolebinding.rbac.authorization.k8s.io/ingress-nginx created</span><br><span class="line">rolebinding.rbac.authorization.k8s.io/ingress-nginx-admission created</span><br><span class="line">clusterrolebinding.rbac.authorization.k8s.io/ingress-nginx created</span><br><span class="line">clusterrolebinding.rbac.authorization.k8s.io/ingress-nginx-admission created</span><br><span class="line">configmap/ingress-nginx-controller created</span><br><span class="line">service/ingress-nginx-controller created</span><br><span class="line">service/ingress-nginx-controller-admission created</span><br><span class="line">deployment.apps/ingress-nginx-controller created</span><br><span class="line">job.batch/ingress-nginx-admission-create created</span><br><span class="line">job.batch/ingress-nginx-admission-patch created</span><br><span class="line">ingressclass.networking.k8s.io/nginx created</span><br><span class="line">validatingwebhookconfiguration.admissionregistration.k8s.io/ingress-nginx-admission created</span><br><span class="line">yihui.li@yihuilideMBP k8sdemo %</span><br></pre></td></tr></table></figure><p>‍</p><p>执行上述步骤以后：</p><ol><li>Pod 会被 Deployment 工作负载管理起来，例如创建和销毁等；</li><li>Service 相当于弹性伸缩组的负载均衡器，它能以加权轮训的方式将流量转发到多个 Pod 副本上；</li><li>Ingress 相当于集群的外网访问入口。</li></ol><p>‍</p><p><strong>开始K8s自愈实验。</strong></p><p>查看现有的pod</p><p>​<img src="/2025/03/16/K8s%E8%87%AA%E5%8A%A8%E6%89%A9%E5%AE%B9%E5%92%8C%E8%87%AA%E6%84%88/image-20250315224138-a9l4fdq.png" alt="image">​</p><p>有了 Ingress-nginx，我们访问 Pod 就不再需要进行端口转发了，我们可以直接访问 127.0.0.1。下面的命令会每隔 1 秒钟发送一次请求，并打印出时间和返回内容：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">yihui.li@yihuilideMBP k8sdemo % while true; do sleep 1; curl http://127.0.0.1; echo -e &#x27;\n&#x27;$(date);done</span><br><span class="line">Hello, my first docker images! hello-docker-flask-5dccc98654-txhbk</span><br><span class="line">2025年 3月15日 星期六 22时42分21秒 CST</span><br><span class="line">Hello, my first docker images! hello-docker-flask-5dccc98654-ccjnc</span><br><span class="line">2025年 3月15日 星期六 22时42分22秒 CST</span><br><span class="line">Hello, my first docker images! hello-docker-flask-5dccc98654-ccjnc</span><br><span class="line">2025年 3月15日 星期六 22时42分23秒 CST</span><br><span class="line">Hello, my first docker images! hello-docker-flask-5dccc98654-txhbk</span><br><span class="line">2025年 3月15日 星期六 22时42分24秒 CST</span><br><span class="line">Hello, my first docker images! hello-docker-flask-5dccc98654-txhbk</span><br><span class="line">2025年 3月15日 星期六 22时42分25秒 CST</span><br><span class="line">Hello, my first docker images! hello-docker-flask-5dccc98654-ccjnc</span><br><span class="line">2025年 3月15日 星期六 22时42分26秒 CST</span><br><span class="line">Hello, my first docker images! hello-docker-flask-5dccc98654-ccjnc</span><br><span class="line">2025年 3月15日 星期六 22时42分27秒 CST</span><br><span class="line">Hello, my first docker images! hello-docker-flask-5dccc98654-txhbk</span><br><span class="line">2025年 3月15日 星期六 22时42分28秒 CST</span><br><span class="line">Hello, my first docker images! hello-docker-flask-5dccc98654-ccjnc</span><br><span class="line">2025年 3月15日 星期六 22时42分29秒 CST</span><br><span class="line">Hello, my first docker images! hello-docker-flask-5dccc98654-ccjnc</span><br><span class="line">2025年 3月15日 星期六 22时42分30秒 CST</span><br></pre></td></tr></table></figure><p>这里可以发现，请求被分配到了两个 Pod 上，Pod 名称是交替出现的。</p><p>‍</p><p>模拟其中的一个 Pod 宕机，观察返回内容。</p><p>开启新的命令行窗口，终止其中一个pod的python进程</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kubectl exec -it hello-docker-flask-5dccc98654-ccjnc -- bash -c &quot;killall python3&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>‍</p><p>等待几秒钟后可以看见，所有的流量都被转发到了 <code>hello-docker-flask-5dccc98654-txhbk</code>​</p><p>​<img src="/2025/03/16/K8s%E8%87%AA%E5%8A%A8%E6%89%A9%E5%AE%B9%E5%92%8C%E8%87%AA%E6%84%88/image-20250315224808-cbfg1rf.png" alt="image">​</p><p>紧接着，<code>hello-docker-flask-5dccc98654-ccjnc</code>​也恢复了服务</p><p>‍</p><h2 id="自动扩容"><a href="#自动扩容" class="headerlink" title="自动扩容"></a>自动扩容</h2><p>自动扩容依赖于 K8s Metric Server 提供的监控指标，首先我们需要安装它：</p><p><a href="https://github.com/KaloSora/K8s-Learn/blob/main/resource/metrics/metrics.yaml">metrics.yaml</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">yihui.li@yihuilideMBP k8sdemo % kubectl apply -f https://ghfast.top/https://raw.githubusercontent.com/lyzhang1999/resource/main/metrics/metrics.yaml</span><br><span class="line">serviceaccount/metrics-server created</span><br><span class="line">clusterrole.rbac.authorization.k8s.io/system:aggregated-metrics-reader created</span><br><span class="line">clusterrole.rbac.authorization.k8s.io/system:metrics-server created</span><br><span class="line">rolebinding.rbac.authorization.k8s.io/metrics-server-auth-reader created</span><br><span class="line">clusterrolebinding.rbac.authorization.k8s.io/metrics-server:system:auth-delegator created</span><br><span class="line">clusterrolebinding.rbac.authorization.k8s.io/system:metrics-server created</span><br><span class="line">service/metrics-server created</span><br><span class="line">deployment.apps/metrics-server created</span><br><span class="line">apiservice.apiregistration.k8s.io/v1beta1.metrics.k8s.io created</span><br></pre></td></tr></table></figure><p>‍</p><p>安装完成后，等待 Metric 工作负载就绪：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yihui.li@yihuilideMBP k8sdemo % kubectl wait deployment -n kube-system metrics-server --for condition=Available=True --timeout=90s</span><br><span class="line">deployment.apps/metrics-server condition met</span><br><span class="line">yihui.li@yihuilideMBP k8sdemo %</span><br></pre></td></tr></table></figure><p>‍</p><p>Metric Server 就绪后，通过 kubectl autoscale 命令来为 Deployment 创建自动扩容策略：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yihui.li@yihuilideMBP k8sdemo % kubectl autoscale deployment hello-docker-flask --cpu-percent=50 --min=2 --max=10</span><br><span class="line">horizontalpodautoscaler.autoscaling/hello-docker-flask autoscaled</span><br><span class="line">yihui.li@yihuilideMBP k8sdemo %</span><br></pre></td></tr></table></figure><p>–cpu-percent 表示 CPU 使用率阈值，当 CPU 超过 50% 时将进行自动扩容；</p><p>–min 代表最小的 Pod 副本数；</p><p>–max 代表最大扩容的副本数。也就是说，自动扩容会根据 CPU 的使用率在 2 个副本和 10 个副本之间进行扩缩容</p><p>‍</p><p>最后，要使自动扩容生效，还需要为刚才部署的 hello-docker-flask Deployment 设置资源配额。可以通过下面的命令来配置：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yihui.li@yihuilideMBP k8sdemo % kubectl patch deployment hello-docker-flask --type=&#x27;json&#x27; -p=&#x27;[&#123;&quot;op&quot;: &quot;add&quot;, &quot;path&quot;: &quot;/spec/template/spec/containers/0/resources&quot;, &quot;value&quot;: &#123;&quot;requests&quot;: &#123;&quot;memory&quot;: &quot;100Mi&quot;, &quot;cpu&quot;: &quot;100m&quot;&#125;&#125;&#125;]&#x27;</span><br><span class="line">deployment.apps/hello-docker-flask patched</span><br><span class="line">yihui.li@yihuilideMBP k8sdemo %</span><br></pre></td></tr></table></figure><p>‍</p><p>现在，Deployment 将会重新创建两个新的 Pod，可以使用下面的命令筛选出新的 Pod：</p><p>​<img src="/2025/03/16/K8s%E8%87%AA%E5%8A%A8%E6%89%A9%E5%AE%B9%E5%92%8C%E8%87%AA%E6%84%88/image-20250316094914-emi0rys.png" alt="image">​</p><p>命令如下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">yihui.li@yihuilideMBP k8sdemo % kubectl get pod --field-selector=status.phase==Running</span><br><span class="line">NAME                                  READY   STATUS    RESTARTS   AGE</span><br><span class="line">hello-docker-flask-7b8f894675-bvnj6   1/1     Running   0          81s</span><br><span class="line">hello-docker-flask-7b8f894675-pn5br   1/1     Running   0          86s</span><br><span class="line">yihui.li@yihuilideMBP k8sdemo %</span><br></pre></td></tr></table></figure><p>‍</p><p>选择一个 Pod 并使用 kubectl exec 进入到容器内。模拟业务高峰期场景，使用 ab 命令来创建并发请求：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">root@hello-docker-flask-7b8f894675-bvnj6:/app#</span><br><span class="line">root@hello-docker-flask-7b8f894675-bvnj6:/app# ab -c 50 -n 10000 http://127.0.0.1:5000/</span><br><span class="line">This is ApacheBench, Version 2.3 &lt;$Revision: 1913912 $&gt;</span><br><span class="line">Copyright 1996 Adam Twiss, Zeus Technology Ltd, http://www.zeustech.net/</span><br><span class="line">Licensed to The Apache Software Foundation, http://www.apache.org/</span><br><span class="line"></span><br><span class="line">Benchmarking 127.0.0.1 (be patient)</span><br></pre></td></tr></table></figure><p>‍</p><p>开启新的命令行窗口，持续监控 Pod 的状态，–watch 参数会一直等待</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl get pods --watch</span><br></pre></td></tr></table></figure><p>‍</p><p>可以观察到K8s已经感知到了Pod的压力，并且正在自动横向扩容</p><p>​<img src="/2025/03/16/K8s%E8%87%AA%E5%8A%A8%E6%89%A9%E5%AE%B9%E5%92%8C%E8%87%AA%E6%84%88/image-20250316095640-f39x90m.png" alt="image">​</p><p>‍</p><p>实验的最后，执行 kind delete cluster 来删除集群：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Last login: Sun Mar 16 09:54:59 on ttys001</span><br><span class="line">(base) yihui.li@yihuilideMBP ~ % kind delete cluster</span><br><span class="line">Deleting cluster &quot;kind&quot; ...</span><br><span class="line">Deleted nodes: [&quot;kind-control-plane&quot;]</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Cloud Native </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kubernetes </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>部署容器镜像到K8s</title>
      <link href="/2025/03/15/%E9%83%A8%E7%BD%B2%E5%AE%B9%E5%99%A8%E9%95%9C%E5%83%8F%E5%88%B0K8s/"/>
      <url>/2025/03/15/%E9%83%A8%E7%BD%B2%E5%AE%B9%E5%99%A8%E9%95%9C%E5%83%8F%E5%88%B0K8s/</url>
      
        <content type="html"><![CDATA[<p>‍‍‍</p><h2 id="安装Kubernetes"><a href="#安装Kubernetes" class="headerlink" title="安装Kubernetes"></a>安装Kubernetes</h2><p>首先安装Kubernetes cli tool <code>Kubectl</code>​，它允许开发者通过命令后管理Kubernetes的资源。</p><p>*Mac可以使用<code>Homebrew</code>​安装</p><p><a href="https://kubernetes.io/docs/reference/kubectl/">什么是Kubectl</a></p><p><a href="https://kubernetes.io/docs/tasks/tools/install-kubectl-macos/">安装Kubectl</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">yihui.li@yihuilideMBP hello_docker %</span><br><span class="line">yihui.li@yihuilideMBP hello_docker % kubectl version --client</span><br><span class="line">Client Version: v1.28.2</span><br><span class="line">Kustomize Version: v5.0.4-0.20230601165947-6ce0bf390ce3</span><br><span class="line">yihui.li@yihuilideMBP hello_docker %</span><br></pre></td></tr></table></figure><p>‍</p><p>根据官方步骤安装<a href="https://kubernetes.io/docs/tasks/tools/install-kubectl-macos/">Kind</a>，它是一个命令行工具，使用非常简单。</p><p>‍</p><p>开始创建K8s</p><p>将以下内容保存为 config.yaml：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">kind: Cluster</span><br><span class="line">apiVersion: kind.x-k8s.io/v1alpha4</span><br><span class="line">nodes:</span><br><span class="line">- role: control-plane</span><br><span class="line">  kubeadmConfigPatches:</span><br><span class="line">  - |</span><br><span class="line">    kind: InitConfiguration</span><br><span class="line">    nodeRegistration:</span><br><span class="line">      kubeletExtraArgs:</span><br><span class="line">        node-labels: &quot;ingress-ready=true&quot;</span><br><span class="line">  extraPortMappings:</span><br><span class="line">  - containerPort: 80</span><br><span class="line">    hostPort: 80</span><br><span class="line">    protocol: TCP</span><br><span class="line">  - containerPort: 443</span><br><span class="line">    hostPort: 443</span><br><span class="line">    protocol: TCP</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>‍</p><p>执行 kind create 命令，创建 K8s 集群：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">yihui.li@yihuilideMBP k8sdemo % kind create cluster --config config.yaml</span><br><span class="line">Creating cluster &quot;kind&quot; ...</span><br><span class="line"> ✓ Ensuring node image (kindest/node:v1.32.2) 🖼</span><br><span class="line"> ✓ Preparing nodes 📦</span><br><span class="line"> ✓ Writing configuration 📜</span><br><span class="line"> ✓ Starting control-plane 🕹️</span><br><span class="line"> ✓ Installing CNI 🔌</span><br><span class="line"> ✓ Installing StorageClass 💾</span><br><span class="line">Set kubectl context to &quot;kind-kind&quot;</span><br><span class="line">You can now use your cluster with:</span><br><span class="line"></span><br><span class="line">kubectl cluster-info --context kind-kind</span><br><span class="line"></span><br><span class="line">Have a question, bug, or feature request? Let us know! https://kind.sigs.k8s.io/#community 🙂</span><br><span class="line">yihui.li@yihuilideMBP k8sdemo %</span><br></pre></td></tr></table></figure><p>‍</p><p>检查K8s集群状态</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">yihui.li@yihuilideMBP k8sdemo % kubectl cluster-info</span><br><span class="line">Kubernetes control plane is running at https://127.0.0.1:51848</span><br><span class="line">CoreDNS is running at https://127.0.0.1:51848/api/v1/namespaces/kube-system/services/kube-dns:dns/proxy</span><br><span class="line"></span><br><span class="line">To further debug and diagnose cluster problems, use &#x27;kubectl cluster-info dump&#x27;.</span><br><span class="line">yihui.li@yihuilideMBP k8sdemo %</span><br></pre></td></tr></table></figure><p>‍</p><p><strong>既然已经有了Dokcer，为什么需要K8s？</strong></p><p>试想一下，如果你需要同时启动 10 个不同的容器镜像，需要运行 10 次 docker run 命令。<br>此外，如果容器之间有依赖顺序，还需要额外记住这 10 条命令特定的启动顺序。</p><p>K8s 的独特之处在于，它为我们抽象了诸如“启动 10 个容器镜像”这样的过程式的命令，你只需要向 K8s 描述“我需要 10 个容器”。10 个容器是我期望的<strong>最终状态</strong>，我不管怎么执行命令，执行了多少次命令等过程，我想要的就是这个结果。</p><p>用来向 K8s 描述“期望最终状态”的文件，就叫做 <strong>K8s Manifest</strong>，也可以称之为清单文件。Manifest 就好比餐厅的菜单，你只管点菜，做菜的过程我不管。</p><p>‍</p><h2 id="部署容器镜像"><a href="#部署容器镜像" class="headerlink" title="部署容器镜像"></a>部署容器镜像</h2><p><strong>通过Kubectl与K8s集群交互</strong></p><p>Kubectl 是一个与 K8s 集群交互的工具，通过 Kubectl，我们可以非常方便地以 Manifest 为媒介操作 K8s 集群的对象。就像操作数据库一样，我们可以对 Manifest 所描述的对象进行创建、删除、修改、查找等操作</p><p>‍</p><p><strong>编写Manifest，将容器镜像部署到K8s集群</strong></p><p>将下面的内容保存为 flask-pod.yaml：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">apiVersion: v1</span><br><span class="line">kind: Pod</span><br><span class="line">metadata:</span><br><span class="line">  name: hello-world-flask</span><br><span class="line">spec:</span><br><span class="line">  containers:</span><br><span class="line">    - name: flask</span><br><span class="line">      image: kalosora/hello-docker-flask</span><br><span class="line">      ports:</span><br><span class="line">        - containerPort: 5000</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Manifest关键字解释:</p><ul><li>Kind，表示 K8s 的工作负载类型。在 K8s 中，我们不能像 Docker 一样直接运行一个容器镜像，镜像需要依赖于 K8s 更上层的封装方式运行，这种封装方式也就是工作负载，Pod 是工作负载的一种类型。<strong>在实际的项目中，我们一般不会直接创建 Pod 类型的工作负载。Pod是K8s调度的最小单位。</strong></li><li>Containers，表示 Pod 要运行的容器配置，例如名称、镜像和端口等。它是一个数组类型，这意味着我们可以在一个 Pod 里面配置多个容器</li><li>Image，表示要运行的容器镜像</li><li>Ports，表示容器要暴露的端口，相当于 docker run 的 p 参数</li></ul><p>‍</p><p>执行kubectl apply应用这段Manifest:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">yihui.li@yihuilideMBP k8sdemo %</span><br><span class="line">yihui.li@yihuilideMBP k8sdemo % kubectl apply -f flask-pod.yaml</span><br><span class="line">pod/hello-world-flask created</span><br><span class="line">yihui.li@yihuilideMBP k8sdemo %</span><br></pre></td></tr></table></figure><p>如果成功看到输出内容 pod&#x2F;hello-world-flask created，说明我们已经把这段 Manifest 提交到集群里了。参数 -f 表示“指定一个 Manifest 文件”。</p><p>也就是说，当我们想要向 K8s 提交 Manifest 的时候，只需要记住一条命令，那就是 kubectl apply。</p><p>‍</p><h2 id="查看和访问Pod"><a href="#查看和访问Pod" class="headerlink" title="查看和访问Pod"></a>查看和访问Pod</h2><p>要查看 K8s 集群正在运行中的 Pod，可以使用 kubectl get pods ：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">yihui.li@yihuilideMBP k8sdemo % kubectl get pods</span><br><span class="line">NAME                READY   STATUS    RESTARTS   AGE</span><br><span class="line">hello-world-flask   1/1     Running   0          15m</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>‍</p><p>要在本地访问集群内的 Pod，我们可以使用 kubectl port-forward 命令进行端口转发操作，打通容器和本地网络：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yihui.li@yihuilideMBP k8sdemo % kubectl port-forward pod/hello-world-flask 8000:5000</span><br><span class="line">Forwarding from 127.0.0.1:8000 -&gt; 5000</span><br><span class="line">Forwarding from [::1]:8000 -&gt; 5000</span><br></pre></td></tr></table></figure><p>Manifest 里定义了 Ports 参数在集群内部暴露了端口，5000的端口只能在集群内部访问。</p><p>本地和集群的网络是隔离的，如果需要从集群外部访问，则需要映射到本地网络的端口。</p><p>打开浏览器访问 127.0.0.1:8000</p><p>‍</p><p>使用 kubectl exec 进入到 Pod 容器内部：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yihui.li@yihuilideMBP k8sdemo % kubectl exec -it hello-world-flask -- bash</span><br><span class="line">root@hello-world-flask:/app#</span><br></pre></td></tr></table></figure><p>‍</p><p>使用 kubectl delete 命令来删除 Pod：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yihui.li@yihuilideMBP k8sdemo % kubectl delete pod hello-world-flask</span><br><span class="line">pod &quot;hello-world-flask&quot; deleted</span><br></pre></td></tr></table></figure><p>‍</p><p><strong>业务进程、容器镜像和工作负载之间的关系</strong></p><p>通过这张图可以看出，最内层是我们的业务应用进程，外层通过 Docker 镜像以容器化的形式运行，再往外是 K8s 的最小调度单位 Pod。</p><p>​<img src="/2025/03/15/%E9%83%A8%E7%BD%B2%E5%AE%B9%E5%99%A8%E9%95%9C%E5%83%8F%E5%88%B0K8s/image-20250315220015-tr78a9d.png" alt="image">​</p><p>‍</p>]]></content>
      
      
      <categories>
          
          <category> Cloud Native </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> Kubernetes </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker 基础</title>
      <link href="/2025/03/04/Docker%E5%9F%BA%E7%A1%80/"/>
      <url>/2025/03/04/Docker%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<p>‍‍</p><h2 id="初识容器"><a href="#初识容器" class="headerlink" title="初识容器"></a>初识容器</h2><p>首先在机器上安装好docker，并且通过命令行确认状态。</p><p>​<img src="/2025/03/04/Docker%E5%9F%BA%E7%A1%80/image-20250304084250-9itzqkc.png" alt="image">​</p><p>尝试从官方镜像仓库拉取镜像</p><p>Docker 会默认从 docker.io 官方镜像仓库中搜索。</p><p>​<code>:latest</code>​指的是获取最新的版本，也可以手动指定版本号</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker pull lyzhang1999/hello-world-flask:latest</span></span><br></pre></td></tr></table></figure><p>‍</p><p>使用命令列出所有可用的镜像(images)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker images</span></span><br></pre></td></tr></table></figure><p>​<img src="/2025/03/04/Docker%E5%9F%BA%E7%A1%80/image-20250304084713-xfggiuk.png" alt="image">​</p><p>运行镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker run -d -p 8000:5000 lyzhang1999/hello-world-flask:latest</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>-d 代表“在后台运行容器”，同时它会输出容器 ID，这是运行容器的唯一标识。</p><p>-p 代表“将容器内的 5000 端口暴露到宿主机（本地的 8000 端口）”，这可以方便我们在本地进行访问。</p><p>看到下面的输出说明我们成功启动了 hello-world-flask 镜像。</p><p>​<img src="/2025/03/04/Docker%E5%9F%BA%E7%A1%80/image-20250304085847-m0rvxfj.png" alt="image">​</p><p>打开浏览器访问 localhost:8000，可以看到：</p><p>​<img src="/2025/03/04/Docker%E5%9F%BA%E7%A1%80/image-20250304085933-o8zexy8.png" alt="image">​</p><p>‍</p><h2 id="连接容器"><a href="#连接容器" class="headerlink" title="连接容器"></a>连接容器</h2><p>首先查看运行中的容器列表，找到<code>CONTAINER ID</code>​</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker ps</span></span><br><span class="line">CONTAINER ID   IMAGE                                  COMMAND                   CREATED         STATUS         PORTS                    NAMES</span><br><span class="line">c3f7297de428   lyzhang1999/hello-world-flask:latest   &quot;python3 -m flask ru…&quot;   2 minutes ago   Up 2 minutes   0.0.0.0:8000-&gt;5000/tcp   cool_mendel</span><br></pre></td></tr></table></figure><p>‍</p><p>执行命令进入容器内部：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker <span class="built_in">exec</span> -it c3f7297de428 bash</span></span><br></pre></td></tr></table></figure><p>-it 的含义是“保持 STDIN 打开状态，并且分配一个虚拟的终端（Terminal）”。可以简单理解为，我们通过 SSH 登录到了容器内部，在当前终端下运行的所有命令都是基于容器内的</p><p>返回的结果如下</p><p>​<img src="/2025/03/04/Docker%E5%9F%BA%E7%A1%80/image-20250304090320-u1xget2.png" alt="image">​</p><p>尝试编辑容器内部的文件<code>app.py</code>​，保存并退出</p><p>​<img src="/2025/03/04/Docker%E5%9F%BA%E7%A1%80/image-20250304090438-v3utilc.png" alt="image">​</p><p>再次访问 <a href="http://localhost:8000/">http://localhost:8000</a> 可以看到页面已经发生了变化</p><p>输入<code>exit</code>​退出容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root@c3f7297de428:/app# exit</span><br></pre></td></tr></table></figure><p>‍</p><p>最后可以输入以下命令停止容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker stop [容器<span class="built_in">id</span>]</span></span><br></pre></td></tr></table></figure><p>例如</p><p>​<img src="/2025/03/04/Docker%E5%9F%BA%E7%A1%80/image-20250304090815-631tc5h.png" alt="image">​</p><p>‍</p><p><strong>关于容器和镜像</strong></p><p>通俗地说，镜像是一个同时包含业务应用和运行环境的“系统安装包”，它需要运行起来之后才能提供服务，运行后镜像的“实例化”称为容器（Container）。你可以对同一个镜像实例化多次，产生多个独立的容器，这些容器拥有不同的容器 ID，不同的容器之间是相互隔离的。</p><p>进一步理解，你可以把容器比喻为虚拟机，虚拟机也是，彼此之间的数据和状态都是隔离的。</p><p>‍</p><h2 id="构建镜像"><a href="#构建镜像" class="headerlink" title="构建镜像"></a>构建镜像</h2><p>使用 Python 编写的 Flask Web 应用作为例子</p><p>复制以下代码，并保存为<code>app.py</code>​</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.run(debug=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hello_world</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Hello, my first docker images! &#x27;</span> + os.getenv(<span class="string">&quot;HOSTNAME&quot;</span>) + <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这段代码的含义非常简单，启动一个 Web 服务器，当接收到 HTTP 请求时，返回 “Hello, my first docker images!” 以及 HOSTNAME 环境变量。</p><p>接下来，创建 Python 的依赖文件 requirements.txt ，用它来安装依赖的 Flask 框架。你可以执行下面的命令来创建 requirements.txt 文件并将 Flask&#x3D;&#x3D;2.2.2 内容写入该文件。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">echo</span> <span class="string">&quot;Flask==2.3.3&quot;</span> &gt;&gt; requirements.txt</span></span><br></pre></td></tr></table></figure><p>有了这两个文件，我们已经可以在本地启动这个 Python Web 应用了。</p><p>​<img src="/2025/03/04/Docker%E5%9F%BA%E7%A1%80/image-20250304091801-u43j8m8.png" alt="image">​</p><p><strong>接下来，将这段最简单的 Python 业务代码制作成镜像。</strong></p><p>我们需要一个文件来描述镜像是如何被构建的，这个文件叫做 <code>Dockerfile</code>​。</p><p>将以下内容保存为 Dockerfile 文件。</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># syntax=docker/dockerfile:1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">FROM</span> python:<span class="number">3.8</span>-slim-buster</span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> apt-get update &amp;&amp; apt-get install -y procps vim apache2-utils &amp;&amp; <span class="built_in">rm</span> -rf /var/lib/apt/lists/*</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> /app</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> requirements.txt requirements.txt</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> pip3 install -r requirements.txt</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> . .</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> [ <span class="string">&quot;python3&quot;</span>, <span class="string">&quot;-m&quot;</span> , <span class="string">&quot;flask&quot;</span>, <span class="string">&quot;run&quot;</span>, <span class="string">&quot;--host=0.0.0.0&quot;</span>]</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>解释一下 Dockerfile 文件里的这几个命令</p><p>第一行以 syntax 开头的是解析器注释，它与 Docker 构建镜像的工具 buildkit 相关，在一般情况，建议使用 docker&#x2F;dockerfile:1，它代表始终指向最新的语法版本。</p><p>FROM 命令，表示使用官方仓库的 python:3.8-slim-buster 镜像作为基础镜像。在我们熟悉的编程方法中，可以理解为从该镜像继承。这个镜像已经安装了 Python3 和 Pip3 等所有的 Python 相关的工具和包，我们可以直接使用。</p><p>RUN 的含义是在镜像内运行指定的命令，这里我们为镜像安装了一些必要的工具。 WORKDIR 的含义是镜像的工作目录，你可以理解为后续所有的命令都将以此为基准路径。这样，我们就可以在后续的命令中使用相对路径而不是完整路径了。</p><p>COPY 的含义是将本地的文件或目录复制到镜像内指定的位置。第一个参数代表本地文件或目录，第二个参数代表要复制到镜像内的位置。例如，第七行 COPY 表示，将本地当前目录下的 requirements.txt 文件复制到镜像工作目录 &#x2F;app 中，文件命名同样为 requirements.txt。 第十行 RUN 的含义是在镜像里运行 pip3 安装 Python 依赖。<strong>请注意，这些依赖将会被安装在镜像里而不是本地</strong>。 接下来，第十行又出现了一个 COPY 命令，它的含义是将当前目录所有的源代码复制到镜像的工作目录 &#x2F;app 下，复制目录的语法和我们之前提到的复制文件是类似的。 最后一行 CMD 的含义是镜像的启动命令。在一个 Dockerfile 中，只能有一个 CMD 命令，如果有多个，那么只有最后一个 CMD 命令会起作用。例如，我们希望在镜像被运行时启动 Python Flask Web 服务器，并监听在特定主机上。CMD 的第一个参数 python3 是我们希望运行的可执行命令，后面的参数表示运行 python3 命令所需要的参数。</p><p>‍</p><p><strong>准备构建第一个镜像</strong></p><p>确保当前目录下有所需的文件</p><p>​<img src="/2025/03/04/Docker%E5%9F%BA%E7%A1%80/image-20250304092657-capxx14.png" alt="image">​</p><p>在当前目录下执行命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker build -t hello-docker-flask .</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>-t 代表的是镜像名。这里隐含了镜像版本，Docker 会默认用 latest 作为版本号，也就是说，hello-docker-flask 与 hello-docker-flask:latest 的写法是等价的。</p><p>此外，还需要注意最后面有一个 “.” ，这代表了构建镜像的上下文。</p><p>执行这条命令时，Docker 会帮我们从官方镜像仓库拉取 python:3.8-slim-buster 镜像，并启动该镜像。接下来，该容器会依次执行我们在 Dockerfile 中书写的命令，例如 WORKDIR、COPY、RUN 等等。</p><p>‍</p><p>如果遇到<code>fail to authorize</code>​的异常，需要指定用户和密码，并重启docker</p><p>​<img src="/2025/03/04/Docker%E5%9F%BA%E7%A1%80/image-20250315113825-v1oo3f5.png" alt="image">​</p><p>‍</p><p>查看本地镜像，并运行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker images</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker run -d -p 8000:5000 hello-docker-flask:latest</span></span><br></pre></td></tr></table></figure><p>‍</p><p>使用命令查看容器启动情况</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker logs [容器ID]</span><br></pre></td></tr></table></figure><p>‍</p><p>可以看到容器启动正常</p><p>​<img src="/2025/03/04/Docker%E5%9F%BA%E7%A1%80/image-20250315121305-jpt6qcg.png" alt="image">​</p><p>‍</p><p>打开浏览器访问 localhost:8000，可以看到正常输出</p><p>‍</p><h2 id="共享镜像"><a href="#共享镜像" class="headerlink" title="共享镜像"></a>共享镜像</h2><p>为了能够在团队中共享镜像，需要先注册一个 <a href="https://hub.docker.com/" title="Docker HUB">Docker HUB</a> 的账号，并且使用 docker login 登录，这和我们使用的 Git 工具类似。</p><p>接下来，使用 docke tag 重命名我们之前在本地构建的镜像。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker tag hello-world-flask my_dockerhub_name/hello-world-flask</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这里需要把 <code>my_dockerhub_name</code>​ 替换为你实际的 Docker Hub 账户名，也称为镜像仓库的名字</p><p>‍</p><p>然后，我们就可以使用 docker push 把本地的镜像上传到 Docker Hub 了。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker push my_dockerhub_name/hello-world-flask</span></span><br></pre></td></tr></table></figure><p>‍</p><p>成功上传后，其他人可以通过 docker pull 命令来拉取我们上传的镜像。</p><p>‍</p><p>例如</p><p>​<img src="/2025/03/04/Docker%E5%9F%BA%E7%A1%80/image-20250315121923-kdut6zn.png" alt="image">​</p><p>​<img src="/2025/03/04/Docker%E5%9F%BA%E7%A1%80/image-20250315121934-5u3db8s.png" alt="image">​</p>]]></content>
      
      
      <categories>
          
          <category> Cloud Native </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用GPT提高研发效率</title>
      <link href="/2025/02/23/%E4%BD%BF%E7%94%A8GPT%E6%8F%90%E9%AB%98%E7%A0%94%E5%8F%91%E6%95%88%E7%8E%87/"/>
      <url>/2025/02/23/%E4%BD%BF%E7%94%A8GPT%E6%8F%90%E9%AB%98%E7%A0%94%E5%8F%91%E6%95%88%E7%8E%87/</url>
      
        <content type="html"><![CDATA[<p>‍‍</p><p>‍</p><p>相同系列的文章</p><p><a href="https://kalosora.github.io/2025/02/15/%E6%90%AD%E5%BB%BAHelloGPT/">搭建HelloGPT</a></p><p><a href="https://kalosora.github.io/2025/02/22/%E8%AE%A9GPT%E4%BD%BF%E7%94%A8%E5%B7%A5%E5%85%B7/">改进为多态模GPT</a></p><p>‍</p><h2 id="使用LLM辅助设计"><a href="#使用LLM辅助设计" class="headerlink" title="使用LLM辅助设计"></a>使用LLM辅助设计</h2><p>可以让GPT生成多次不同的设计，最后结合自己的思考。</p><p>可以大大提高研发人员在面对陌生领域时的研发效率。</p><p>也可以让GPT帮助代码生成</p><ul><li>根据注释、要求直接生成代码</li><li>根据代码生成测试（目前最准确，因为上下文只有代码，没有业务需求）</li><li>根据代码生成注释</li><li>在不同编程语言之间翻译</li><li>解释代码的运作方式</li><li>修改代码中的bug</li><li>其他</li></ul><p>‍</p><p>可以使用ReAct模式：GPT代码生成 -&gt; GPT自测 -&gt; GPTbug自动修改 （迭代 * N）-&gt; 最终代码</p><p>需要满足以下条件</p><ul><li>ReAct过程中可以使用的方法</li><li>方法的输入简单（简单字符&#x2F;JSON）</li><li>方法的输出是大模型可理解（不能只返回Error code，给出一个详细的自然语言描述）</li></ul><p>‍</p><blockquote><p>源码</p><p><a href="https://github.com/KaloSora/HelloGPT/blob/dev/code/gpt_llm_assist_design.ipynb">https://github.com/KaloSora/HelloGPT/blob/dev/code/gpt_llm_assist_design.ipynb</a></p></blockquote><p>‍</p><h2 id="提高代码生成的可用性"><a href="#提高代码生成的可用性" class="headerlink" title="提高代码生成的可用性"></a>提高代码生成的可用性</h2><p>使用ReAct pattern</p><p>​<img src="/2025/02/23/%E4%BD%BF%E7%94%A8GPT%E6%8F%90%E9%AB%98%E7%A0%94%E5%8F%91%E6%95%88%E7%8E%87/image-20250222165312-868qflu.png" alt="image">​</p><p>‍</p><p>解决遗留代码依赖</p><p>外部推理：编写AST树遍历所有的依赖，整合到Prompt里传给大模型</p><p>大模型推理：大模型基于ReAct模式自己寻找测试依赖</p><p>​<img src="/2025/02/23/%E4%BD%BF%E7%94%A8GPT%E6%8F%90%E9%AB%98%E7%A0%94%E5%8F%91%E6%95%88%E7%8E%87/image-20250222170014-8tbzyj0.png" alt="image">​</p><p>‍</p><p>方案比较</p><p>​<img src="/2025/02/23/%E4%BD%BF%E7%94%A8GPT%E6%8F%90%E9%AB%98%E7%A0%94%E5%8F%91%E6%95%88%E7%8E%87/image-20250222170655-s3vbpcu.png" alt="image">​</p><p>‍</p><blockquote><p>源码</p><p><a href="https://github.com/KaloSora/HelloGPT/blob/dev/code/gpt_code_generation_example.ipynb">https://github.com/KaloSora/HelloGPT/blob/dev/code/gpt_code_generation_example.ipynb</a></p></blockquote><p>‍</p><h2 id="编写大模型友好代码"><a href="#编写大模型友好代码" class="headerlink" title="编写大模型友好代码"></a>编写大模型友好代码</h2><p>适合大模型生成代码的场景：</p><ul><li><p>功能明确，定义清楚</p><ul><li>通过规模较小的接口&#x2F;方法签名来清晰定义</li><li>清晰的注释&#x2F;Prompt的定义实现逻辑</li></ul></li><li><p>通用功能</p></li><li><p>依赖简单</p><ul><li>尤其是对自身遗留代码的依赖</li></ul></li></ul><p>‍</p><h2 id="大模型辅助运维和部署"><a href="#大模型辅助运维和部署" class="headerlink" title="大模型辅助运维和部署"></a>大模型辅助运维和部署</h2><p>利用大模型帮助Devops提高效率，赋能云原生实践</p><p>‍</p><p>什么是云原生？</p><p>计算资源弹性伸缩：需要的时候快速的获得计算资源（几十秒至几分钟），不需要的时候把计算资源释放掉。计算资源允许横向拓展（增加集群）和纵向拓展（加强机器配置）</p><p>单物理机（大型机） vs 云原生</p><p>​<img src="/2025/02/23/%E4%BD%BF%E7%94%A8GPT%E6%8F%90%E9%AB%98%E7%A0%94%E5%8F%91%E6%95%88%E7%8E%87/image-20250222203049-jioftgx.png" alt="image">​</p><p>‍</p><p>云原生实践中的CICD pipeline</p><p>​<img src="/2025/02/23/%E4%BD%BF%E7%94%A8GPT%E6%8F%90%E9%AB%98%E7%A0%94%E5%8F%91%E6%95%88%E7%8E%87/image-20250222203353-ht8yzo4.png" alt="image">​</p><p>‍</p><p>Terraform作为IaC工具，在云原生中发挥至关重要的作用</p><p>​<img src="/2025/02/23/%E4%BD%BF%E7%94%A8GPT%E6%8F%90%E9%AB%98%E7%A0%94%E5%8F%91%E6%95%88%E7%8E%87/image-20250222203619-xj2r1ye.png" alt="image">​</p><p>‍</p><p>可以利用大模型帮助开发者生成terraform template，开发人员只需要修改部分内容即可完成开发。</p><p>​<img src="/2025/02/23/%E4%BD%BF%E7%94%A8GPT%E6%8F%90%E9%AB%98%E7%A0%94%E5%8F%91%E6%95%88%E7%8E%87/image-20250222212927-ug7e6ny.png" alt="image">​</p><p>启用上下文记忆功能，让GPT把AWS云转换成阿里云的terraform格式</p><p>​<img src="/2025/02/23/%E4%BD%BF%E7%94%A8GPT%E6%8F%90%E9%AB%98%E7%A0%94%E5%8F%91%E6%95%88%E7%8E%87/image-20250222213417-vtmq4wm.png" alt="image">​</p><p>‍</p><p>还可以利用大模型生符合Kubernetes最佳实践的部署配置文件</p><p>最佳实践的要求</p><ul><li>部署的namespace为”service”</li><li>包含readiness及liveness probe</li><li>采用一个独立的 service account 运行</li><li>包含完美终止（graceful termination）配置</li></ul><p><a href="https://learnk8s.io/production-best-practices">K8s best practice</a></p><p>‍</p><blockquote><p>源码</p><p><a href="https://github.com/KaloSora/HelloGPT/blob/dev/code/gpt_cloud_devops_example.ipynb">https://github.com/KaloSora/HelloGPT/blob/dev/code/gpt_cloud_devops_example.ipynb</a></p></blockquote><p>‍</p><h2 id="探索开源AI社区"><a href="#探索开源AI社区" class="headerlink" title="探索开源AI社区"></a>探索开源AI社区</h2><p>利用Hugging Face开源社区中大量的开源模型，提升研发效率</p><p><a href="https://huggingface.co/">huggingface</a></p><p>​<img src="/2025/02/23/%E4%BD%BF%E7%94%A8GPT%E6%8F%90%E9%AB%98%E7%A0%94%E5%8F%91%E6%95%88%E7%8E%87/image-20250222214912-demx9p0.png" alt="image">​</p><p>‍</p><p>Open source的模型统称为 <code>pre-trained</code>​模型，可以直接使用它</p><p>Transformer Pipeline</p><p>​<img src="/2025/02/23/%E4%BD%BF%E7%94%A8GPT%E6%8F%90%E9%AB%98%E7%A0%94%E5%8F%91%E6%95%88%E7%8E%87/image-20250222215626-k9qx1ue.png" alt="image">​</p><p>‍</p><p>Hugging Face的模型可以统一使用Transformer Pipeline调用。</p><p>如果要使用远程调用模型的方式，需要注册账号并创建API token</p><p>​<img src="/2025/02/23/%E4%BD%BF%E7%94%A8GPT%E6%8F%90%E9%AB%98%E7%A0%94%E5%8F%91%E6%95%88%E7%8E%87/image-20250222221046-uj658fe.png" alt="image">​</p><p>‍</p><p><strong>注意：Hugging Face需要安装tensorflow</strong></p><p>Mac intel arm64会出现找不到安装包的情况</p><p>​<img src="/2025/02/23/%E4%BD%BF%E7%94%A8GPT%E6%8F%90%E9%AB%98%E7%A0%94%E5%8F%91%E6%95%88%E7%8E%87/image-20250223100358-l19mdgb.png" alt="image">​</p><p>‍</p><p>解决方法：安装Anaconda，并创建新的python运行环境</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">conda --version</span><br><span class="line"></span><br><span class="line">conda create -n TFmacOS python=3.9 pip</span><br><span class="line">conda activate TFmacOS </span><br><span class="line">python -m pip install tensorflow-macos==2.9.0</span><br><span class="line">python -m pip install tensorflow-metal</span><br><span class="line"></span><br><span class="line">conda install jupyter</span><br></pre></td></tr></table></figure><p>从<code>TFmacOS</code>​环境中启动jupyter notebook</p><p>‍</p><blockquote><p>源码</p><p>通过Hugging Face + Deepseek API 实现看图讲故事</p><p>或</p><p>LangChain + Hugging Face model</p><p><a href="https://github.com/KaloSora/HelloGPT/blob/dev/code/gpt_hugging_face_example.ipynb">https://github.com/KaloSora/HelloGPT/blob/dev/code/gpt_hugging_face_example.ipynb</a></p></blockquote><p>‍</p><h2 id="AI企业架构中的思考"><a href="#AI企业架构中的思考" class="headerlink" title="AI企业架构中的思考"></a>AI企业架构中的思考</h2><p>企业内部文档处理</p><p>​<img src="/2025/02/23/%E4%BD%BF%E7%94%A8GPT%E6%8F%90%E9%AB%98%E7%A0%94%E5%8F%91%E6%95%88%E7%8E%87/image-20250223091728-jlaozxf.png" alt="image">​</p><p>‍</p><p>其他参考架构</p><ul><li>使用<code>prompt validation</code>​防御提示词注入进攻</li></ul><p>​<img src="/2025/02/23/%E4%BD%BF%E7%94%A8GPT%E6%8F%90%E9%AB%98%E7%A0%94%E5%8F%91%E6%95%88%E7%8E%87/image-20250223092857-9zxbsip.png" alt="image">​</p><p>‍</p><p>最后总结一下使用到的模型社区</p><p>Hugging Face</p><p>Ollama</p>]]></content>
      
      
      <categories>
          
          <category> AI/ML </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LLM </tag>
            
            <tag> DeepSeek </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>让GPT使用工具</title>
      <link href="/2025/02/22/%E8%AE%A9GPT%E4%BD%BF%E7%94%A8%E5%B7%A5%E5%85%B7/"/>
      <url>/2025/02/22/%E8%AE%A9GPT%E4%BD%BF%E7%94%A8%E5%B7%A5%E5%85%B7/</url>
      
        <content type="html"><![CDATA[<p>‍‍</p><p>*使用DeepSeek API测试</p><h2 id="Function-Calling"><a href="#Function-Calling" class="headerlink" title="Function Calling"></a>Function Calling</h2><p>让AI调用已经定义好的python 方法</p><p>Function Calling 让模型能够调用外部工具，来增强自身能力。</p><ul><li>将可以使用方法（工具）说明，随用户请求一起放在Prompt中传给GPT</li><li>GPT返回要调用的方法及参数值，然后在外部运行该方法获得结果</li><li>将调用结果及前面的对话历史一起放入Prompt，再次调用GPT</li></ul><p>‍</p><p>例如：</p><ul><li>构建一个dict对象存储：{“Method1”, “Method2”, …}</li><li>在Prompt中加入方法定义</li><li>根据LLM的返回，决定是否调用函数（返回信息中含有”Function_call”），还是直接返回信息给用户</li><li>如需调用函数，则调用LLM指定函数，并将结果及调用的函数一起放在Prompt中再次调用LLM</li></ul><p>‍</p><p>OpenAI GPT4o的例子</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> openai</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> openai <span class="keyword">import</span> AzureOpenAI</span><br><span class="line">  </span><br><span class="line">client = AzureOpenAI(</span><br><span class="line">    api_key=os.getenv(<span class="string">&quot;OPENAI_API_KEY&quot;</span>),  </span><br><span class="line">    api_version=os.getenv(<span class="string">&quot;OPENAI_API_VERSION&quot;</span>),</span><br><span class="line">    azure_endpoint = os.getenv(<span class="string">&quot;OPENAI_API_BASE&quot;</span>)</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">funcs = &#123;<span class="string">&quot;get_current_cluster_state&quot;</span>: get_current_cluster_state&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_current_cluster_state</span>(<span class="params">cluster_name</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;cluster:<span class="subst">&#123;cluster_name&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span>  <span class="string">&quot;&quot;&quot;ERROR: Failed to pull image &quot;/docker/dsp:latest&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">run</span>(<span class="params"><span class="built_in">input</span></span>):</span><br><span class="line">    msg=[&#123;<span class="string">&quot;role&quot;</span>:<span class="string">&quot;user&quot;</span>,<span class="string">&quot;content&quot;</span>:<span class="built_in">input</span>&#125;]</span><br><span class="line">    ret = run_conversation(msg)</span><br><span class="line">    <span class="keyword">return</span> ret.content</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">run_conversation</span>(<span class="params">msg</span>):</span><br><span class="line">    response = client.chat.completions.create(</span><br><span class="line">        model=deployment,</span><br><span class="line">        messages=msg,</span><br><span class="line">        functions=[</span><br><span class="line">            &#123;</span><br><span class="line">                    <span class="string">&quot;name&quot;</span>: <span class="string">&quot;get_current_cluster_state&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;description&quot;</span>: <span class="string">&quot;Get the current state in a given cluster&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;parameters&quot;</span>: &#123;</span><br><span class="line">                        <span class="string">&quot;type&quot;</span>: <span class="string">&quot;object&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;properties&quot;</span>: &#123;</span><br><span class="line">                            <span class="string">&quot;cluster_name&quot;</span>: &#123;</span><br><span class="line">                                <span class="string">&quot;type&quot;</span>: <span class="string">&quot;string&quot;</span>,</span><br><span class="line">                                <span class="string">&quot;description&quot;</span>: <span class="string">&quot;the name of the cluster&quot;</span>,</span><br><span class="line">                            &#125;,</span><br><span class="line"></span><br><span class="line">                        &#125;,</span><br><span class="line">                        <span class="string">&quot;required&quot;</span>: [<span class="string">&quot;cluster_name&quot;</span>],</span><br><span class="line">                    &#125;</span><br><span class="line">          </span><br><span class="line">            &#125;</span><br><span class="line">        ],</span><br><span class="line">        function_call=<span class="string">&quot;auto&quot;</span>,</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    response_message = response.choices[<span class="number">0</span>].message</span><br><span class="line">  </span><br><span class="line">    function_call = response_message.function_call</span><br><span class="line">  </span><br><span class="line">    <span class="comment"># 如果不需要调用function，则直接返回结果</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> function_call:</span><br><span class="line">        <span class="keyword">return</span> response_message</span><br><span class="line">    function_name = function_call.name</span><br><span class="line">    function_to_call = funcs[function_name] </span><br><span class="line">    function_args = json.loads(response_message.function_call.arguments)</span><br><span class="line">    function_response = function_to_call(**function_args)            </span><br><span class="line">    msg.append( <span class="comment"># adding assistant response to messages</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;role&quot;</span>: response_message.role,</span><br><span class="line">            <span class="string">&quot;function_call&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;name&quot;</span>: function_name,</span><br><span class="line">                <span class="string">&quot;arguments&quot;</span>: response_message.function_call.arguments,</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">&quot;content&quot;</span>: <span class="literal">None</span></span><br><span class="line">        &#125;</span><br><span class="line">    )</span><br><span class="line">    msg.append( <span class="comment"># adding function response to messages</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;role&quot;</span>: <span class="string">&quot;function&quot;</span>,</span><br><span class="line">            <span class="string">&quot;name&quot;</span>: function_name,</span><br><span class="line">            <span class="string">&quot;content&quot;</span>: function_response,</span><br><span class="line">        &#125;</span><br><span class="line">    ) </span><br><span class="line">   </span><br><span class="line">    <span class="keyword">return</span> run_conversation(msg)</span><br><span class="line">   </span><br></pre></td></tr></table></figure><p>‍</p><p>在Prompt中加入方法描述</p><p>​<img src="/2025/02/22/%E8%AE%A9GPT%E4%BD%BF%E7%94%A8%E5%B7%A5%E5%85%B7/image-20250215180507-3yfoplo.png" alt="image">​</p><blockquote><p>DeepSeek示例源代码</p><p>目前会出现空回复的bug</p><p><a href="https://github.com/KaloSora/HelloGPT/blob/dev/code/gpt_function_calling.ipynb">https://github.com/KaloSora/HelloGPT/blob/dev/code/gpt_function_calling.ipynb</a></p></blockquote><p>‍</p><h2 id="使用LangChain-Agent"><a href="#使用LangChain-Agent" class="headerlink" title="使用LangChain Agent"></a>使用LangChain Agent</h2><p>让GPT以更简单的方式，学会使用工具。</p><p>Agent的核心思想是使用语言模型来选择要采取的一系列操作。</p><p>‍</p><blockquote><p>LangChain 工具集</p><p><a href="https://python.langchain.com/api_reference/">https://python.langchain.com/api_reference/</a></p></blockquote><p>‍</p><p>测试以后可以发现，LangChain使用工具的方法更加智能、灵活</p><p>​<img src="/2025/02/22/%E8%AE%A9GPT%E4%BD%BF%E7%94%A8%E5%B7%A5%E5%85%B7/image-20250216110005-bxe9e3f.png" alt="image">​</p><h3 id="Wolfram-Alpha-API-Wrapper"><a href="#Wolfram-Alpha-API-Wrapper" class="headerlink" title="Wolfram Alpha API Wrapper"></a>Wolfram Alpha API Wrapper</h3><p>​<code>Wolfram Alpha</code>​是专注于解决科学计算的工具，帮助AI更好得思考数学问题</p><blockquote><p>官网</p><p><a href="https://zh.wolframalpha.com/">https://zh.wolframalpha.com</a></p><p>‍</p><p>API ID Ceation</p><p><a href="https://developer.wolframalpha.com/">https://developer.wolframalpha.com</a></p><p>‍</p><p>WolframAlphaAPIWrapper document</p><p><a href="https://python.langchain.com/api_reference/community/utilities/langchain_community.utilities.wolfram_alpha.WolframAlphaAPIWrapper.html">https://python.langchain.com/api_reference/community/utilities/langchain_community.utilities.wolfram_alpha.WolframAlphaAPIWrapper.html</a></p></blockquote><p>‍</p><p>创建账号</p><p>​<img src="/2025/02/22/%E8%AE%A9GPT%E4%BD%BF%E7%94%A8%E5%B7%A5%E5%85%B7/image-20250216111208-2qgm45s.png" alt="image">​</p><p>创建你的APP ID</p><p>​<img src="/2025/02/22/%E8%AE%A9GPT%E4%BD%BF%E7%94%A8%E5%B7%A5%E5%85%B7/image-20250216111431-fmyfj9j.png" alt="image">​</p><p>复制<code>App ID</code>​<br><img src="/2025/02/22/%E8%AE%A9GPT%E4%BD%BF%E7%94%A8%E5%B7%A5%E5%85%B7/image-20250216111655-uxjwrxm.png" alt="image">​</p><blockquote><p>参考源代码</p><p><a href="https://github.com/KaloSora/HelloGPT/blob/dev/code/gpt_langchain_agent.ipynb">https://github.com/KaloSora/HelloGPT/blob/dev/code/gpt_langchain_agent.ipynb</a></p></blockquote><h2 id="In-context-learning"><a href="#In-context-learning" class="headerlink" title="In-context learning"></a>In-context learning</h2><p><strong>Zero-shot Learning</strong></p><p>一种机器学习方法，它允许模型在没有见过任何训练样本的情况下，对新类别的数据进行分类或识别。</p><p>这种方法通常依赖于模型在训练过程中学到的知识，以及对新类别的一些描述性信息，如属性或原数据。</p><p>例如，给出一些猫的特征，然后给出一堆图片，让机器识别出其中哪些图片是与猫相关的。</p><p>‍</p><p><strong>Few-shot Learning</strong></p><p>教导模型使用非常有限的训练数据来识别新的对象、类或任务。在这里是通过Prompt里加入少量示例，来实现模型学习。</p><p>‍</p><p>应用大语言模型要从传统机器学习思维切换为上下文学习思路</p><p>上下文学习包括Zero-shot Learning 和 Few-shot Learning，两者并无明显界限，可以根据实际需要灵活运用。</p><p>‍</p><blockquote><p>源代码</p><p><a href="https://github.com/KaloSora/HelloGPT/blob/dev/code/gpt_in-ontext_learning.ipynb">https://github.com/KaloSora/HelloGPT/blob/dev/code/gpt_in-ontext_learning.ipynb</a></p></blockquote><p>‍</p><h2 id="ReAct模式"><a href="#ReAct模式" class="headerlink" title="ReAct模式"></a>ReAct模式</h2><p>大语言模型具有推理能力，因为它们通过学习大量的文本数据，捕捉语言中的模式和结构。这些模型在训练过程中，会学习到各种知识、逻辑关系和推理方法。当它们遇到新的问题时，可以根据已经学到的知识和推理方法，生成有意义的回答。</p><p>​<img src="/2025/02/22/%E8%AE%A9GPT%E4%BD%BF%E7%94%A8%E5%B7%A5%E5%85%B7/image-20250220092417-an4b6d6.png" alt="image">​</p><p>‍</p><p>通过获取当前环境信息（观察），进一步思考，采取行动</p><p>​<img src="/2025/02/22/%E8%AE%A9GPT%E4%BD%BF%E7%94%A8%E5%B7%A5%E5%85%B7/image-20250220092516-ffjujn5.png" alt="image">​</p><p>‍</p><h3 id="LangChain-ReAct-Agent"><a href="#LangChain-ReAct-Agent" class="headerlink" title="LangChain ReAct Agent"></a>LangChain ReAct Agent</h3><p>​<img src="/2025/02/22/%E8%AE%A9GPT%E4%BD%BF%E7%94%A8%E5%B7%A5%E5%85%B7/image-20250220092544-lca8ao4.png" alt="image">​</p><p>‍</p><p>构建GPT，可以使用如下范式</p><p><span data-type="text" style="color: var(--b3-font-color6);">Question</span>: the input question you must answer</p><p><span data-type="text" style="color: var(--b3-font-color6);">Thought</span>: you should always think about what to do</p><p><span data-type="text" style="color: var(--b3-font-color6);">Action</span>: the action to take, should be one of [{tool_names}]</p><p><span data-type="text" style="color: var(--b3-font-color6);">Action Input:</span> the input to the action</p><p><span data-type="text" style="color: var(--b3-font-color6);">Observation</span>: the result of thr action… (Though&#x2F;Action&#x2F;Action Input&#x2F;Observation repeat N times)</p><p><span data-type="text" style="color: var(--b3-font-color6);">Thought</span>: Now I know the answer</p><p><span data-type="text" style="color: var(--b3-font-color6);">Final Answer</span>: the answer to the input question</p><p>‍</p><p>AutoGPT - 针对某个解决方案的循环自执行GPT</p><p>如果可以，配合短期和长期记忆保证上下文效果。</p><p>​<img src="/2025/02/22/%E8%AE%A9GPT%E4%BD%BF%E7%94%A8%E5%B7%A5%E5%85%B7/image-20250220093712-epgkrva.png" alt="image">​</p><p>Plan: 设计实现预期结果的计划，将复杂的任务分解为较小的步骤。</p><p>Criticize: 评估计划的可行性和效率，识别潜在问题和改进领域</p><p>Act: 使用其多功能的能力执行计划的操作，例如网络搜索和数据检索</p><p>Observe：分析从Act中生成的反馈，从以前的性能中学习以改善未来的结果</p><p>Plan（修改）：根据反馈，修改初始计划，允许持续改进问题解决策略</p><p>‍</p><blockquote><p>源代码</p><p><a href="https://github.com/KaloSora/HelloGPT/blob/dev/code/gpt_autogpt_example.ipynb">https://github.com/KaloSora/HelloGPT/blob/dev/code/gpt_autogpt_example.ipynb</a></p></blockquote><p>‍</p><h2 id="文本分片与向量化"><a href="#文本分片与向量化" class="headerlink" title="文本分片与向量化"></a>文本分片与向量化</h2><p>让大模型应用企业内部数据</p><p>大量文档和数据的挑战：如果使用prompt的方式来传递数据或上下文，会面临以下挑战：</p><ul><li>Prompt的内容大小限制</li><li>使用大量数据的成本</li><li>并非所有数据都会用于解决当前问题</li></ul><p>‍</p><p>​<img src="/2025/02/22/%E8%AE%A9GPT%E4%BD%BF%E7%94%A8%E5%B7%A5%E5%85%B7/image-20250220210925-xq0i4n2.png" alt="image">​</p><p>一种可能的处理方式<strong>关键词检索</strong>：通过Elaticsearch、Lucene等类似搜索引擎的方式，根据文本建立索引，通过关键词<u>严格匹配</u>到对应的文本内容。但是这种方式会丢失很多上下文的信息，会让相同语意的文本丢失。</p><p>‍</p><p>更好的方法是让关键词检索变为<strong>语义检索</strong></p><p>语义检索是一种基于文本内容和意义的信息检索方法，它试图理解查询和文档的语义，以便更准确地找到与查询相关的文档。</p><p>向量化(embedding)是将文本数据转为数值向量的过程。向量化后的文本可以用于计算文本之间的相似性，如余弦相似度、欧几里德距离等度量。<strong>这使得语义检索能够根据查询和文档之间的语义相似性来对文档进行排序和检索，从而提高检索的准确性和效率</strong>。</p><p>我们可以把字符块进行向量化，通过向量间的距离来求解这些向量之间的相似性。也就是说，语义越相近的向量，它的距离就越短。</p><blockquote><p>参考阅读</p><p>Word2Vec相关的一些机器学习的理论</p></blockquote><p>‍</p><p>实现流程</p><p>​<img src="/2025/02/22/%E8%AE%A9GPT%E4%BD%BF%E7%94%A8%E5%B7%A5%E5%85%B7/image-20250222100753-1kzxpe0.png" alt="image">​</p><p>代码示例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 向量化简单示例</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> langchain.embeddings.openai <span class="keyword">import</span> OpenAIEmbeddings</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment"># embedding = OpenAIEmbeddings() #如果直接使用OpenAI的GPT服务</span></span><br><span class="line">embedding = OpenAIEmbeddings(deployment=embedding_deployment) <span class="comment">#deployment是你在Azure中的 embedding 模型的部署名字</span></span><br><span class="line">sentence1 = <span class="string">&quot;我是一名软件工程师&quot;</span></span><br><span class="line">sentence2 = <span class="string">&quot;小张从事法律工作&quot;</span></span><br><span class="line">sentence3 = <span class="string">&quot;我是一名程序员&quot;</span></span><br><span class="line"></span><br><span class="line">embedding1 = embedding.embed_query(sentence1)</span><br><span class="line">embedding2 = embedding.embed_query(sentence2)</span><br><span class="line">embedding3 = embedding.embed_query(sentence3)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 点集计算向量间的距离</span></span><br><span class="line"><span class="built_in">print</span>(np.dot(embedding1,embedding2))</span><br><span class="line"><span class="built_in">print</span>(np.dot(embedding2,embedding3))</span><br><span class="line"><span class="built_in">print</span>(np.dot(embedding1,embedding3))</span><br></pre></td></tr></table></figure><p>‍</p><p>文本向量化</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> langchain.embeddings.openai <span class="keyword">import</span> OpenAIEmbeddings</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">embed</span>(<span class="params">chunks</span>): </span><br><span class="line">    <span class="comment"># embedding = OpenAIEmbeddings()#如果直接使用OpenAI的GPT服务</span></span><br><span class="line">    embedding = OpenAIEmbeddings(deployment=embedding_deployment)</span><br><span class="line">    <span class="keyword">return</span> [embedding.embed_query(chunk) <span class="keyword">for</span> chunk <span class="keyword">in</span> chunks]</span><br><span class="line"></span><br><span class="line">chunks = split_file_into_chunks(<span class="string">&quot;spotmax_intro.txt&quot;</span>,<span class="number">100</span>)</span><br><span class="line">embeddeds = embed(chunks)</span><br></pre></td></tr></table></figure><p>‍</p><p>向量检索</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">find_k_largest_indices</span>(<span class="params">input_list, k</span>):</span><br><span class="line">    sorted_indices = <span class="built_in">sorted</span>(<span class="built_in">range</span>(<span class="built_in">len</span>(input_list)), key=<span class="keyword">lambda</span> i: input_list[i], reverse=<span class="literal">True</span>)</span><br><span class="line">    <span class="built_in">print</span>(input_list)</span><br><span class="line">    <span class="built_in">print</span>(sorted_indices)</span><br><span class="line">    <span class="keyword">return</span> sorted_indices[:k]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">search</span>(<span class="params">chunks,embeddeds,top_k, txt</span>):</span><br><span class="line">    embedding = OpenAIEmbeddings(deployment=<span class="string">&quot;embedding&quot;</span>,chunk_size=<span class="number">1</span>)</span><br><span class="line">    embedded_txt = embedding.embed_query(txt)</span><br><span class="line">    distances = [np.dot(embedded_txt,embedded) <span class="keyword">for</span> embedded <span class="keyword">in</span> embeddeds]</span><br><span class="line">    ret_idx = find_k_largest_indices(distances, top_k)</span><br><span class="line">    <span class="keyword">return</span> [chunks[i] <span class="keyword">for</span> i <span class="keyword">in</span> ret_idx]</span><br><span class="line"></span><br><span class="line">search(chunks,embeddeds,<span class="number">2</span>, <span class="string">&quot;提高系统可用性&quot;</span>)</span><br></pre></td></tr></table></figure><p>‍</p><p>向量检索 + GPT</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> openai</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">anwser_question_with_doc</span>(<span class="params">question, chunks, embeddeds</span>):</span><br><span class="line">    relevent_chunks = search(chunks,embeddeds,<span class="number">2</span>, question)</span><br><span class="line">    prompt = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    仅通过总结以下的文字片段回答用户问题, 注意保持回答的语言通顺（字数在30字以内）</span></span><br><span class="line"><span class="string">    --- </span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> rchunks <span class="keyword">in</span> relevent_chunks:</span><br><span class="line">        prompt = prompt + <span class="string">&quot;\n&#x27;&quot;</span> + rchunks + <span class="string">&quot;&#x27;&quot;</span></span><br><span class="line">  </span><br><span class="line">    response = openai.ChatCompletion.create(</span><br><span class="line">    engine=deployment, <span class="comment"># engine = &quot;deployment_name&quot;.</span></span><br><span class="line">    messages=[</span><br><span class="line">            &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;system&quot;</span>, <span class="string">&quot;content&quot;</span>: prompt&#125;,   </span><br><span class="line">            &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;user&quot;</span>, <span class="string">&quot;content&quot;</span>: question&#125;</span><br><span class="line">        ],</span><br><span class="line">        temperature = <span class="number">0.9</span>, </span><br><span class="line">        max_tokens = <span class="number">200</span></span><br><span class="line">   )</span><br><span class="line">   <span class="keyword">return</span> response.choices[<span class="number">0</span>].message.content</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(anwser_question_with_doc(<span class="string">&quot;如何提高可用性&quot;</span>, chunks,embeddeds))</span><br></pre></td></tr></table></figure><p>‍</p><p>*也可以使用embedding模型辅助实现，embedding model使用<code>nomic-embed-text</code>​</p><blockquote><p>Ollama embedding model</p><p><a href="https://ollama.com/blog/embedding-models">https://ollama.com/blog/embedding-models</a></p><p>‍</p><p>nomic-embed-text model</p><p><a href="https://ollama.com/library/nomic-embed-text">https://ollama.com/library/nomic-embed-text</a></p></blockquote><p>‍</p><p>通过ollama安装模型</p><p>复制命令</p><p>​<img src="/2025/02/22/%E8%AE%A9GPT%E4%BD%BF%E7%94%A8%E5%B7%A5%E5%85%B7/image-20250220213540-anf19y3.png" alt="image">​</p><p>‍</p><p>在命令行安装</p><p>​<img src="/2025/02/22/%E8%AE%A9GPT%E4%BD%BF%E7%94%A8%E5%B7%A5%E5%85%B7/image-20250220214052-vh76gw4.png" alt="image">​</p><p>​<img src="/2025/02/22/%E8%AE%A9GPT%E4%BD%BF%E7%94%A8%E5%B7%A5%E5%85%B7/image-20250220214331-7pqihxh.png" alt="image">​</p><h3 id="LangChain-Retrieval"><a href="#LangChain-Retrieval" class="headerlink" title="LangChain Retrieval"></a>LangChain Retrieval</h3><p>通过LangChain连接大模型和内部文本</p><p>上面使用了chroma向量数据库，在这一节配合LangChain使用实现分片向量化的整个工作流</p><p>​<img src="/2025/02/22/%E8%AE%A9GPT%E4%BD%BF%E7%94%A8%E5%B7%A5%E5%85%B7/image-20250222100908-g99sack.png" alt="image">​</p><p>LangChain Document Loader加载数据</p><p>支持CSV，文件目录，HTML，JSON，PDF，Markdown等多种格式</p><p><a href="https://python.langchain.com/docs/integrations/document_loaders/">https://python.langchain.com/docs/integrations/document_loaders/</a></p><p>‍</p><p>LangChain Retrievers</p><p>更好的文档分片工具</p><p><a href="https://python.langchain.com/docs/integrations/document_transformers/">https://python.langchain.com/docs/integrations/retrievers/</a></p><p>‍</p><p>最后把分片好的数据embed到向量数据库</p><p>​<img src="/2025/02/22/%E8%AE%A9GPT%E4%BD%BF%E7%94%A8%E5%B7%A5%E5%85%B7/image-20250222101728-6nouej4.png" alt="image">​</p><p>LangChain提供了<code>RetrievalQA</code>​的方法直接查询向量数据库（Vectordb）</p><p>用户提问 -&gt; 向量数据库检索 -&gt; 构成新的prompt -&gt; 大模型回答</p><p>‍</p><p>这里使用md文档为例</p><p>​<img src="/2025/02/22/%E8%AE%A9GPT%E4%BD%BF%E7%94%A8%E5%B7%A5%E5%85%B7/image-20250222114740-ivn5gg8.png" alt="image">​</p><p>‍</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">retriever=vectordb.as_retriever(</span><br><span class="line">    search_type=<span class="string">&quot;mmr&quot;</span>, search_kwargs=&#123;<span class="string">&quot;k&quot;</span>: <span class="number">3</span>&#125;</span><br><span class="line">    <span class="comment">#search_type=&quot;similarity&quot;, search_kwargs=&#123;&quot;k&quot;: 3&#125;</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>search_type：根据场景选择适合的参数</p><ul><li>similarity：根据相似性查找，最多查找3个</li><li>mmr（max marginal）：找到三个最相似的，然后根据这三个数据库之间差别最大的，但是跟用户问题又有关联性的问题</li></ul><p>‍</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">qa = RetrievalQA.from_chain_type(llm=llm, chain_type=<span class="string">&quot;refine&quot;</span>, retriever=retriever,</span><br><span class="line">                                 return_source_documents=<span class="literal">False</span>, verbose=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p>chain_type: 可选值 stuff &#x2F; refine &#x2F; map reduce &#x2F; map re-rank</p><ul><li>要根据企业内部的实际情况和数据特性，尽可能多地测试</li><li>适当做一些定制化的改动以满足需求</li></ul><p>​<img src="/2025/02/22/%E8%AE%A9GPT%E4%BD%BF%E7%94%A8%E5%B7%A5%E5%85%B7/image-20250222103300-hr9bz2x.png" alt="image">​</p><p>​<img src="/2025/02/22/%E8%AE%A9GPT%E4%BD%BF%E7%94%A8%E5%B7%A5%E5%85%B7/image-20250222103405-zo9pqum.png" alt="image">​</p><p>‍</p><blockquote><p>源代码</p><p><a href="https://github.com/KaloSora/HelloGPT/blob/dev/code/gpt_langchain_retrieval.ipynb">https://github.com/KaloSora/HelloGPT/blob/dev/code/gpt_langchain_retrieval.ipynb</a></p><p>参考阅读</p><p><a href="https://medium.com/@rahul.dusad/run-rag-pipeline-locally-with-ollama-embedding-model-nomic-embed-text-generate-model-llama3-e7a554a541b3">https://medium.com/@rahul.dusad/run-rag-pipeline-locally-with-ollama-embedding-model-nomic-embed-text-generate-model-llama3-e7a554a541b3</a></p></blockquote><p>‍</p><h2 id="构建多模态Chatbot"><a href="#构建多模态Chatbot" class="headerlink" title="构建多模态Chatbot"></a>构建多模态Chatbot</h2><p>​<img src="/2025/02/22/%E8%AE%A9GPT%E4%BD%BF%E7%94%A8%E5%B7%A5%E5%85%B7/image-20250222150709-zlbhx60.png" alt="image">​</p><p>图形生成能力：openai可以使用DALL E2，或者是Stable Diffusion</p><p>Openai api示例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> http.client</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">create_image</span>(<span class="params">prompt</span>):</span><br><span class="line">  api_base = os.getenv(<span class="string">&quot;OPENAI_API_BASE&quot;</span>)</span><br><span class="line">  api_key = os.getenv(<span class="string">&quot;OPENAI_API_KEY&quot;</span>)</span><br><span class="line">  api_version = api_version = <span class="string">&#x27;2022-08-03-preview&#x27;</span></span><br><span class="line"></span><br><span class="line">  url = <span class="string">&quot;&#123;&#125;dalle/text-to-image?api-version=&#123;&#125;&quot;</span>.<span class="built_in">format</span>(api_base, api_version)</span><br><span class="line">  headers= &#123; <span class="string">&quot;api-key&quot;</span>: api_key, <span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;application/json&quot;</span> &#125;</span><br><span class="line">  body = &#123;</span><br><span class="line">      <span class="string">&quot;caption&quot;</span>: prompt,</span><br><span class="line">      <span class="string">&quot;resolution&quot;</span>: <span class="string">&quot;512x512&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">  submission = requests.post(url, headers=headers, json=body)</span><br><span class="line">  operation_location = submission.headers[<span class="string">&#x27;Operation-Location&#x27;</span>]</span><br><span class="line">  retry_after = submission.headers[<span class="string">&#x27;Retry-after&#x27;</span>]</span><br><span class="line">  status = <span class="string">&quot;&quot;</span></span><br><span class="line">  <span class="keyword">while</span> (status != <span class="string">&quot;Succeeded&quot;</span>):</span><br><span class="line">      time.sleep(<span class="built_in">int</span>(retry_after))</span><br><span class="line">      response = requests.get(operation_location, headers=headers)</span><br><span class="line">      status = response.json()[<span class="string">&#x27;status&#x27;</span>]</span><br><span class="line">  image_url = response.json()[<span class="string">&#x27;result&#x27;</span>][<span class="string">&#x27;contentUrl&#x27;</span>]</span><br><span class="line">  <span class="comment">#display(Image(url=image_url))</span></span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;\n![image](&quot;</span>+image_url+<span class="string">&quot;)&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> (create_image(<span class="string">&quot;A dog on the street.&quot;</span>))</span><br></pre></td></tr></table></figure><p>‍</p><blockquote><p>Openai 代码示例</p><p><a href="https://github.com/KaloSora/HelloGPT/blob/dev/code/gpt_all_in_one_example.ipynb">https://github.com/KaloSora/HelloGPT/blob/dev/code/gpt_all_in_one_example.ipynb</a></p></blockquote><p>‍</p><p>‍</p><p>‍</p><p>‍</p><p>‍</p><p>‍</p>]]></content>
      
      
      <categories>
          
          <category> AI/ML </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LLM </tag>
            
            <tag> DeepSeek </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搭建HelloGPT</title>
      <link href="/2025/02/15/%E6%90%AD%E5%BB%BAHelloGPT/"/>
      <url>/2025/02/15/%E6%90%AD%E5%BB%BAHelloGPT/</url>
      
        <content type="html"><![CDATA[<p>‍</p><h2 id="通过Azure访问GPT"><a href="#通过Azure访问GPT" class="headerlink" title="通过Azure访问GPT"></a>通过Azure访问GPT</h2><p>中国大陆地区不允许访问GPT服务，可以通过微软云搭建GPT服务。</p><p>*微软云首次注册有30天免费体验</p><p><a href="https://azure.microsoft.com/zh-cn/pricing/purchase-options/azure-account/">https://azure.microsoft.com/zh-cn/pricing/purchase-options/azure-account/</a></p><p>‍</p><p>创建OpenAI服务</p><p>​<img src="/2025/02/15/%E6%90%AD%E5%BB%BAHelloGPT/image-20250125200329-jo21jm7.png" alt="image">​</p><p>‍</p><p>选择部署模型</p><p>​<img src="/2025/02/15/%E6%90%AD%E5%BB%BAHelloGPT/image-20250125200414-0bcfzdx.png" alt="image">​</p><p>‍</p><p>获取环境变量</p><p>​<img src="/2025/02/15/%E6%90%AD%E5%BB%BAHelloGPT/image-20250125200526-o69r4x2.png" alt="image">​</p><p>设置到系统配置文件中，也可以在代码中import</p><p>​<img src="/2025/02/15/%E6%90%AD%E5%BB%BAHelloGPT/image-20250125200541-inoh9dd.png" alt="image">​</p><p>‍</p><p>代码详解</p><p>​<img src="/2025/02/15/%E6%90%AD%E5%BB%BAHelloGPT/image-20250125200913-vsz9usw.png" alt="image">​</p><ul><li>temperature：针对回答的稳定性设置，0为最稳定</li><li>max_token：设置回答的长度</li></ul><p>‍</p><p>Token计费规则</p><p>​<img src="/2025/02/15/%E6%90%AD%E5%BB%BAHelloGPT/image-20250125105549-o7q171o.png" alt="image">​</p><p>‍</p><p>模型请求配额</p><p>​<img src="/2025/02/15/%E6%90%AD%E5%BB%BAHelloGPT/image-20250125105618-6jmorto.png" alt="image">​</p><h2 id="使用DeepSeekAPI"><a href="#使用DeepSeekAPI" class="headerlink" title="使用DeepSeekAPI"></a><strong>使用DeepSeekAPI</strong></h2><p>可以使用DeepSeek的API作为代替</p><p><a href="https://platform.deepseek.com/sign_in">deepseek open platform</a></p><p><a href="https://chat.deepseek.com/">deepseek free chat</a></p><p>首次注册可以获得免费额度</p><p>​<img src="/2025/02/15/%E6%90%AD%E5%BB%BAHelloGPT/image-20250128103053-btd7xa1.png" alt="image">​</p><p>‍</p><p><a href="https://api-docs.deepseek.com/zh-cn/">API document</a></p><blockquote><p>示例源代码</p><p><a href="https://github.com/KaloSora/HelloGPT/blob/dev/code/gpt_api_example.ipynb">https://github.com/KaloSora/HelloGPT/blob/main/code/gpt_api_example.ipynb</a></p></blockquote><p>‍</p><h2 id="提示词工程"><a href="#提示词工程" class="headerlink" title="提示词工程"></a>提示词工程</h2><p>大模型返回的自然语言无法被程序使用。</p><p>让大模型结合到程序中，让程序能理解大模型返回的结果。</p><h3 id="提示词技巧"><a href="#提示词技巧" class="headerlink" title="提示词技巧"></a>提示词技巧</h3><ul><li>利用反向提示词（如：不使用……）</li><li>规范输出的格式（如指定Json格式，便于程序处理）</li><li>文本规范异常输出的格式（如遇到异常时，返回简单的ERROR，便于程序处理）</li><li>不断迭代提示词</li><li>提示词尽量使用英语</li></ul><p>‍</p><p>DeepSeek官方提示库</p><p><a href="https://api-docs.deepseek.com/zh-cn/prompt-library/">DeepSeek提示库</a></p><p>‍</p><blockquote><p>示例源代码</p><p><a href="https://github.com/KaloSora/HelloGPT/blob/dev/code/gpt_prompt_demo.ipynb">https://github.com/KaloSora/HelloGPT/blob/dev/code/gpt_prompt_demo.ipynb</a></p></blockquote><p>‍</p><h2 id="LangChain"><a href="#LangChain" class="headerlink" title="LangChain"></a>LangChain</h2><p>大语言模型中的拓展工具类库，作为大语言模型和应用程序之间的桥梁。</p><blockquote><p>LangChain is a flexible abstractions and extensive toolkit enables developers to harness the power of LLMs.</p></blockquote><p>‍</p><p>安装方式</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pip install langchain</span><br><span class="line"></span><br><span class="line">pip install langchain-community</span><br></pre></td></tr></table></figure><p>‍</p><h3 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h3><ul><li><p>提示词模板</p></li><li><p>不同程度的上下文记忆</p></li><li><p>大模型调用API</p><ul><li>这种查询方式类似于爬虫，可能会被外部网站阻止，建议使用网站提供的API</li></ul></li><li><p>链式请求</p><ul><li>将复杂的任务分解为更简单的子任务</li><li>​<img src="/2025/02/15/%E6%90%AD%E5%BB%BAHelloGPT/image-20250128163023-kgl4499.png" alt="image">​</li></ul></li></ul><p>‍</p><blockquote><p>示例源代码</p><p><a href="https://github.com/KaloSora/HelloGPT/blob/dev/code/langchain_demo.ipynb">https://github.com/KaloSora/HelloGPT/blob/dev/code/langchain_demo.ipynb</a></p></blockquote><p>‍</p><h2 id="保持会话状态"><a href="#保持会话状态" class="headerlink" title="保持会话状态"></a>保持会话状态</h2><p>LLM模型本身的对话是无状态的。</p><p>使用<code>Gradio</code>​类库让Chatbot获得记忆，能够根据上下文回答问题。</p><ul><li>能够快速构建原型</li><li>能够保存上下文对话信息</li></ul><p>‍</p><p>安装</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install gradio</span><br></pre></td></tr></table></figure><p>‍</p><p>可以使用LangChain的记忆功能，让开发更加简单</p><p>可以尝试不同程度的记忆功能</p><p>例如：ConversationSummaryBufferMemory</p><p>当缓存内容Token超过参数 “max_token_limit” 的值后，就会将超出的会话内容进行总结，这个总结过程也是通过大模型完成的。</p><p>‍</p><p>使用记忆功能的模型：</p><p><strong>优点</strong></p><ul><li>控制了缓存内容的大小</li><li>尽量记忆对话的上下文</li></ul><p>缺点</p><ul><li>在缓存内容超出限制后，为了控制缓存的大小，会持续通过大模型来总结较早的内容，使程序相应的延迟增加</li><li>成本增加</li></ul><p>‍</p><blockquote><p> 示例源代码</p><p><a href="https://github.com/KaloSora/HelloGPT/blob/dev/code/gpt_langchain_history.ipynb">https://github.com/KaloSora/HelloGPT/blob/dev/code/gpt_langchain_history.ipynb</a></p></blockquote><p>‍</p><h2 id="大模型在企业中的应用畅想"><a href="#大模型在企业中的应用畅想" class="headerlink" title="大模型在企业中的应用畅想"></a>大模型在企业中的应用畅想</h2><p>启发式交互应用：如低代码平台，或自然语言生成代码</p><p>Copilot：AI助手，如微软、Apple的AI助手，或者是企业中的IT系统诊断助手</p><p>大语言模型的推理&#x2F;生成：生成式AI应用</p><p>‍</p>]]></content>
      
      
      <categories>
          
          <category> AI/ML </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LLM </tag>
            
            <tag> DeepSeek </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mac DeepSeek本地部署</title>
      <link href="/2025/02/09/Mac-DeepSeek%E6%9C%AC%E5%9C%B0%E9%83%A8%E7%BD%B2/"/>
      <url>/2025/02/09/Mac-DeepSeek%E6%9C%AC%E5%9C%B0%E9%83%A8%E7%BD%B2/</url>
      
        <content type="html"><![CDATA[<p>‍</p><blockquote><p>DeepSeek Github开源仓库</p><p><a href="https://github.com/deepseek-ai">https://github.com/deepseek-ai</a></p><p>‍</p><p>R1仓库</p><p><a href="https://github.com/deepseek-ai/DeepSeek-R1">https://github.com/deepseek-ai/DeepSeek-R1</a></p></blockquote><p>‍</p><h2 id="安装Ollama"><a href="#安装Ollama" class="headerlink" title="安装Ollama"></a>安装Ollama</h2><p>Ollama是一个开源框架，专为在本地机器（支持跨平台，如Mac&#x2F;Windows）上便捷部署和运行大语言模型（LLM）而设计。</p><p>*使用的机器为Mac 2018 Pro, Intel CPU，LM Studio不支持。</p><blockquote><p>Ollama下载链接</p><p><a href="https://ollama.com/download/mac">https://ollama.com/download/mac</a></p></blockquote><p>‍</p><p>验证安装结果</p><p>​<img src="/2025/02/09/Mac-DeepSeek%E6%9C%AC%E5%9C%B0%E9%83%A8%E7%BD%B2/image-20250208155744-ss6d35f.png" alt="image">​</p><p>‍</p><h2 id="Ollama载入Deepseek-r1"><a href="#Ollama载入Deepseek-r1" class="headerlink" title="Ollama载入Deepseek-r1"></a>Ollama载入Deepseek-r1</h2><p>在Ollama官网找到R1模型</p><p>​<img src="/2025/02/09/Mac-DeepSeek%E6%9C%AC%E5%9C%B0%E9%83%A8%E7%BD%B2/image-20250208160225-5ukfsvg.png" alt="image">​</p><p>‍</p><p>选择需要的模型，复制命令</p><p>​<img src="/2025/02/09/Mac-DeepSeek%E6%9C%AC%E5%9C%B0%E9%83%A8%E7%BD%B2/image-20250208160323-kngn783.png" alt="image">​</p><p>在命令行里运行对应的命令，会自动下载模型</p><p>​<img src="/2025/02/09/Mac-DeepSeek%E6%9C%AC%E5%9C%B0%E9%83%A8%E7%BD%B2/image-20250208160414-bywa9rp.png" alt="image">​</p><p>‍</p><p>运行结果</p><p>​<img src="/2025/02/09/Mac-DeepSeek%E6%9C%AC%E5%9C%B0%E9%83%A8%E7%BD%B2/image-20250208193550-jd15aq2.png" alt="image">​</p><p>‍</p><h2 id="Chatbox为AI添加UI"><a href="#Chatbox为AI添加UI" class="headerlink" title="Chatbox为AI添加UI"></a>Chatbox为AI添加UI</h2><blockquote><p>Chatbox官网</p><p><a href="https://chatboxai.app/zh">https://chatboxai.app/zh</a></p></blockquote><p>*UI也可以选择Cherry Studio</p><p>选择Ollama API</p><p>​<img src="/2025/02/09/Mac-DeepSeek%E6%9C%AC%E5%9C%B0%E9%83%A8%E7%BD%B2/image-20250208193833-c6ffl5u.png" alt="image">​</p><p>‍</p><p>选择已下载的模型</p><p>​<img src="/2025/02/09/Mac-DeepSeek%E6%9C%AC%E5%9C%B0%E9%83%A8%E7%BD%B2/image-20250208193914-rpsuerz.png" alt="image">​</p><p>‍</p><p>选择你配置好的模型，然后提出你的问题</p><p>​<img src="/2025/02/09/Mac-DeepSeek%E6%9C%AC%E5%9C%B0%E9%83%A8%E7%BD%B2/image-20250208194057-96fy3y7.png" alt="image">​</p><p>‍</p><h2 id="开启本地联网服务"><a href="#开启本地联网服务" class="headerlink" title="开启本地联网服务"></a>开启本地联网服务</h2><p>安装AnythingLLM</p><p><a href="https://docs.anythingllm.com/installation-desktop/macos">https://docs.anythingllm.com/installation-desktop/macos</a></p><p>‍</p><p>API提供商选择Ollama</p><p>​<img src="/2025/02/09/Mac-DeepSeek%E6%9C%AC%E5%9C%B0%E9%83%A8%E7%BD%B2/image-20250209094623-o1t509s.png" alt="image">​</p><p>‍</p><p>在设置中找到“代理技能”，开启连网搜索</p><p>​<img src="/2025/02/09/Mac-DeepSeek%E6%9C%AC%E5%9C%B0%E9%83%A8%E7%BD%B2/image-20250209094943-2vud5jw.png" alt="image">​</p><p>‍</p><p>尝试提出一个2025年2月的事件，并要求deepseek分析其影响</p><p>*这里联网速度和思考速度都比较慢</p><p>​<img src="/2025/02/09/Mac-DeepSeek%E6%9C%AC%E5%9C%B0%E9%83%A8%E7%BD%B2/image-20250209100454-72pvg99.png" alt="image">​</p>]]></content>
      
      
      <categories>
          
          <category> AI/ML </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LLM </tag>
            
            <tag> DeepSeek </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows DeepSeek本地部署</title>
      <link href="/2025/02/02/Windows-DeepSeek%E6%9C%AC%E5%9C%B0%E6%90%AD%E5%BB%BA/"/>
      <url>/2025/02/02/Windows-DeepSeek%E6%9C%AC%E5%9C%B0%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<p>‍</p><p>DeepSeek R1 Distill 本地部署相关资料</p><blockquote><p>资料来源 <a href="https://henjihenji.feishu.cn/wiki/MN3Vwl2STigk2qk1r6lcGoY5nYg">https://henjihenji.feishu.cn/wiki/MN3Vwl2STigk2qk1r6lcGoY5nYg</a></p></blockquote><h1 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h1><p>建议使用 NVIDIA 卡，体验会好不少，AMD 显卡未做测试，但应该也是能跑的</p><p>欢迎各位在本文档评论区反馈各自运行情况，这样可以帮到更多人</p><h1 id="LM-Studio"><a href="#LM-Studio" class="headerlink" title="LM Studio"></a>LM Studio</h1><p>官网下载：<a href="https://lmstudio.ai/">https://lmstudio.ai/</a></p><p>夸克网盘：<a href="https://pan.quark.cn/s/f7f610d2ac7a">https://pan.quark.cn/s/f7f610d2ac7a</a></p><h1 id="模型列表"><a href="#模型列表" class="headerlink" title="模型列表"></a>模型列表</h1><p>请选择文件体积小于自己显存大小的模型，略大一些的虽然也能跑，但是速度会慢很多。因个人能力有限，以下模型推荐不一定是最好的</p><p>更多模型下载</p><p>  链接1：<a href="https://www.modelscope.cn/organization/lmstudio-community">https://www.modelscope.cn/organization/lmstudio-community</a></p><p>  记得用搜索功能搜索 DeepSeek 相关模型</p><p>  链接2：<a href="https://www.modelscope.cn/collections/DeepSeek-R1-Distill-GGUF-eec5fee2f2ee42">https://www.modelscope.cn/collections/DeepSeek-R1-Distill-GGUF-eec5fee2f2ee42</a></p><p>  相比链接1会多一点不同量化精度的模型</p><p><strong>点击模型名称可以直接下载</strong></p><table><thead><tr><th>显存大小</th><th>推荐模型</th><th>备注</th></tr></thead><tbody><tr><td>32GB</td><td><a href="https://www.modelscope.cn/models/lmstudio-community/DeepSeek-R1-Distill-Qwen-32B-GGUF/resolve/master/DeepSeek-R1-Distill-Qwen-32B-Q6_K.gguf">DeepSeek-R1-Distill-Qwen-32B-Q6_K.gguf</a></td><td></td></tr><tr><td>24GB</td><td><a href="https://www.modelscope.cn/models/lmstudio-community/DeepSeek-R1-Distill-Qwen-32B-GGUF/resolve/master/DeepSeek-R1-Distill-Qwen-32B-Q4_K_M.gguf">DeepSeek-R1-Distill-Qwen-32B-Q4_K_M.gguf</a><br><a href="https://www.modelscope.cn/models/unsloth/DeepSeek-R1-Distill-Qwen-32B-GGUF/resolve/master/DeepSeek-R1-Distill-Qwen-32B-Q5_K_M.gguf">DeepSeek-R1-Distill-Qwen-32B-Q5_K_M.gguf</a></td><td>二选一即可，比较推荐第一个<br><a href="https://www.modelscope.cn/models/unsloth/DeepSeek-R1-Distill-Qwen-32B-GGUF/resolve/master/DeepSeek-R1-Distill-Qwen-32B-Q5_K_M.gguf">Q5</a> 质量上可能会好一点，但是因为太接近 24G 显存，所以上下文多了之后，速度可能会慢。<br>上面的 <a href="https://www.modelscope.cn/models/lmstudio-community/DeepSeek-R1-Distill-Qwen-32B-GGUF/resolve/master/DeepSeek-R1-Distill-Qwen-32B-Q6_K.gguf">Q6</a> 勉强也能跑，但速度会比较慢。</td></tr><tr><td>16GB</td><td><a href="https://www.modelscope.cn/models/lmstudio-community/DeepSeek-R1-Distill-Qwen-14B-GGUF/resolve/master/DeepSeek-R1-Distill-Qwen-14B-Q6_K.gguf">DeepSeek-R1-Distill-Qwen-14B-Q6_K.gguf</a></td><td></td></tr><tr><td>12GB</td><td><a href="https://www.modelscope.cn/models/lmstudio-community/DeepSeek-R1-Distill-Qwen-14B-GGUF/resolve/master/DeepSeek-R1-Distill-Qwen-14B-Q4_K_M.gguf">DeepSeek-R1-Distill-Qwen-14B-Q4_K_M.gguf</a></td><td></td></tr><tr><td>11GB</td><td><a href="https://www.modelscope.cn/models/lmstudio-community/DeepSeek-R1-Distill-Qwen-14B-GGUF/resolve/master/DeepSeek-R1-Distill-Qwen-14B-Q4_K_M.gguf">DeepSeek-R1-Distill-Qwen-14B-Q4_K_M.gguf</a></td><td></td></tr><tr><td>8GB</td><td><a href="https://www.modelscope.cn/models/lmstudio-community/DeepSeek-R1-Distill-Qwen-7B-GGUF/resolve/master/DeepSeek-R1-Distill-Qwen-7B-Q6_K.gguf">DeepSeek-R1-Distill-Qwen-7B-Q6_K.gguf</a><br><a href="https://www.modelscope.cn/models/lmstudio-community/DeepSeek-R1-Distill-Llama-8B-GGUF/resolve/master/DeepSeek-R1-Distill-Llama-8B-Q6_K.gguf">DeepSeek-R1-Distill-Llama-8B-Q6_K.gguf</a></td><td>二选一即可</td></tr><tr><td>6GB</td><td><a href="https://www.modelscope.cn/models/lmstudio-community/DeepSeek-R1-Distill-Qwen-7B-GGUF/resolve/master/DeepSeek-R1-Distill-Qwen-7B-Q4_K_M.gguf">DeepSeek-R1-Distill-Qwen-7B-Q4_K_M.gguf</a><br><a href="https://www.modelscope.cn/models/lmstudio-community/DeepSeek-R1-Distill-Llama-8B-GGUF/resolve/master/DeepSeek-R1-Distill-Llama-8B-Q4_K_M.gguf">DeepSeek-R1-Distill-Llama-8B-Q4_K_M.gguf</a></td><td>二选一即可</td></tr><tr><td>4GB</td><td><a href="https://www.modelscope.cn/models/lmstudio-community/DeepSeek-R1-Distill-Qwen-7B-GGUF/resolve/master/DeepSeek-R1-Distill-Qwen-7B-Q3_K_L.gguf">DeepSeek-R1-Distill-Qwen-7B-Q3_K_L.gguf</a><br><a href="https://www.modelscope.cn/models/lmstudio-community/DeepSeek-R1-Distill-Qwen-1.5B-GGUF/resolve/master/DeepSeek-R1-Distill-Qwen-1.5B-Q8_0.gguf">DeepSeek-R1-Distill-Qwen-1.5B-Q8_0.gguf</a></td><td>二选一即可，比较推荐第一个<br>第二个 4G 显存能跑，但可能会比较慢</td></tr><tr><td>3GB、2GB</td><td><a href="https://www.modelscope.cn/models/lmstudio-community/DeepSeek-R1-Distill-Qwen-1.5B-GGUF/resolve/master/DeepSeek-R1-Distill-Qwen-1.5B-Q8_0.gguf">DeepSeek-R1-Distill-Qwen-1.5B-Q8_0.gguf</a></td><td></td></tr></tbody></table><h1 id="如何查看自己的显存"><a href="#如何查看自己的显存" class="headerlink" title="如何查看自己的显存"></a>如何查看自己的显存</h1><p>​<img src="/2025/02/02/Windows-DeepSeek%E6%9C%AC%E5%9C%B0%E6%90%AD%E5%BB%BA/image-20250209100647-xmyvf48.png" alt="image">​</p><table><thead><tr><th>显存大小</th><th>对应N卡型号</th></tr></thead><tbody><tr><td>2GB</td><td>GTX 1050、GT 1030</td></tr><tr><td>3GB</td><td>GTX 1060 3GB</td></tr><tr><td>4GB</td><td>GTX 1050 Ti</td></tr><tr><td>6GB</td><td>GTX 1060 6GB、RTX 2060 6GB、RTX 3050 (6GB)</td></tr><tr><td>8GB</td><td>GTX 1080、GTX 1070 Ti、GTX 1070、RTX 2080 SUPER、RTX 2080、RTX 2070 SUPER、RTX 2070、RTX 2060 SUPER、RTX 3070 Ti、RTX 3070、RTX 3060 Ti、RTX 3060 (8GB)、RTX 3050 (8GB)、RTX 4080、RTX 4060 Ti 8GB、RTX 4060、RTX 5070</td></tr><tr><td>11GB</td><td>GTX 1080 Ti、RTX 2080 Ti</td></tr><tr><td>12GB</td><td>RTX 2060 12GB、RTX 3060 (12GB)、RTX 4070 Ti SUPER、RTX 4070、RTX 5070 Ti</td></tr><tr><td>16GB</td><td>RTX 4060 Ti 16GB、RTX 5080</td></tr><tr><td>24GB</td><td>RTX 3090 Ti、RTX 3090、RTX 4090</td></tr><tr><td>32GB</td><td>RTX 5090</td></tr></tbody></table><p>‍</p><h1 id="本地部署测试"><a href="#本地部署测试" class="headerlink" title="本地部署测试"></a>本地部署测试</h1><p>GPU：AMD Radeon RX580 8G</p><p>CPU：AMD Ryzen 5600X</p><p>内存：16G</p><p>‍</p><p>运行LM Studio</p><p>​<img src="/2025/02/02/Windows-DeepSeek%E6%9C%AC%E5%9C%B0%E6%90%AD%E5%BB%BA/image-20250209110548-fxxeq1n.png" alt="image">​</p><p>‍</p><p>加载本地模型</p><p>注意模型这里直接选根目录，LM Studio会自动搜索</p><p>​<img src="/2025/02/02/Windows-DeepSeek%E6%9C%AC%E5%9C%B0%E6%90%AD%E5%BB%BA/image-20250209110613-zipexwj.png" alt="image">​</p><p>‍</p><p>点击顶部加载模型，开始新的对话</p><p>​<img src="/2025/02/02/Windows-DeepSeek%E6%9C%AC%E5%9C%B0%E6%90%AD%E5%BB%BA/image-20250209110630-hf4qhqg.png" alt="image">​</p>]]></content>
      
      
      <categories>
          
          <category> AI/ML </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LLM </tag>
            
            <tag> DeepSeek </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Jupyter Notebook</title>
      <link href="/2025/01/29/Jupyter-Notebook/"/>
      <url>/2025/01/29/Jupyter-Notebook/</url>
      
        <content type="html"><![CDATA[<p>‍</p><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p><a href="https://jupyter.org/">Jupyter官网</a></p><blockquote><p>JupyterLab是最新的基于web的笔记本、代码和数据交互式开发环境。其灵活的界面允许用户配置和安排数据科学、科学计算、计算新闻和机器学习中的工作流程。模块化设计邀请扩展来扩展和丰富功能。</p></blockquote><p>该工具具有以下特征：</p><ul><li>允许使用markdown语法</li><li>支持快速导出多种文件格式</li><li>支持部署在远程环境</li><li>不仅仅支持Python，也支持Javascript，Ruby等语言</li></ul><p>因此，许多公开课网站和大学课程普遍使用Jupyter分发作业。它也适合机器学习和数据分析，是集编程和写作与一身的工具。</p><p>这种编程方式也可以称为文学编程。</p><h2 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h2><p>安装命令</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install jupyter</span><br></pre></td></tr></table></figure><p>‍</p><p>运行结果</p><p>​<img src="/2025/01/29/Jupyter-Notebook/image-20250125194112-m528stx.png" alt="image">​</p><p>‍</p><p>运行命令</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd <span class="punctuation">[</span>target_folder<span class="punctuation">]</span></span><br><span class="line">jupyter notebook</span><br></pre></td></tr></table></figure><p>‍</p><p>运行结果</p><p>​<img src="/2025/01/29/Jupyter-Notebook/image-20250125194224-8owk4qo.png" alt="image">​</p><p>浏览器输入<code>http://localhost:8888/</code>​访问Jupyter</p><p>‍</p><p>创建新Python文件，并运行第一行测试代码</p><p>​<img src="/2025/01/29/Jupyter-Notebook/image-20250125194421-wre78l2.png" alt="image">​</p><p>​<img src="/2025/01/29/Jupyter-Notebook/image-20250125194624-s0xokbq.png" alt="image">​</p><p>‍</p><p>在本地目录检查新文件</p><p>​<img src="/2025/01/29/Jupyter-Notebook/image-20250125194833-rsd6qx2.png" alt="image">​</p><p>‍</p><p>Jupyter文件支持导出多种格式</p><p>​<img src="/2025/01/29/Jupyter-Notebook/image-20250125194946-9pknd69.png" alt="image">​</p><p>‍</p><p>输入<code>h</code>​查看所有快捷键</p><p>​<img src="/2025/01/29/Jupyter-Notebook/image-20250125194351-1zd7ao9.png" alt="image">​</p>]]></content>
      
      
      <categories>
          
          <category> AI/ML </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> LLM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AWS Terraform Section4 - Project</title>
      <link href="/2024/06/30/AWS-Terraform-Section4-Project/"/>
      <url>/2024/06/30/AWS-Terraform-Section4-Project/</url>
      
        <content type="html"><![CDATA[<p>‍</p><p>创建Git仓库用于存放Terraform代码</p><p>创建.gitignore</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># ignore local .terraform dir</span><br><span class="line">.terraform/*</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>‍</p><p>目标：创建一个EC2实例，并且在EC2里运行一个nginx docker容器</p><p>​<img src="/2024/06/30/AWS-Terraform-Section4-Project/image-20240627220019-nclsrwk.png" alt="image">​</p><p>‍</p><p>需要创建的AWS资源</p><p>*最好不要使用默认的AWS资源</p><ol><li>创建VPC</li><li>创建Subnet</li><li>创建Route Table &amp; Internet Gateway</li><li>创建EC2</li><li>部署nginx docker容器</li><li>创建Security Group(Firewall)，并允许ssh</li></ol><p>​<img src="/2024/06/30/AWS-Terraform-Section4-Project/image-20240627220353-vawsy7w.png" alt="image">​</p><p>‍</p><h2 id="创建VPC-Subnet"><a href="#创建VPC-Subnet" class="headerlink" title="创建VPC &amp; Subnet"></a>创建VPC &amp; Subnet</h2><p>terraform.tfvars</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">vpc_cidr_block = &quot;10.0.0.0/16&quot;</span><br><span class="line">subnet_cidr_block = &quot;10.0.0.0/24&quot;</span><br><span class="line">avail_zone = &quot;eu-west-3b&quot;</span><br><span class="line">env_prefix = &quot;dev&quot;</span><br></pre></td></tr></table></figure><p>‍</p><p>main.tf</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">provider &quot;aws&quot; &#123;</span><br><span class="line">    region = &quot;eu-west-3&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">variable vpc_cidr_block &#123;&#125;</span><br><span class="line">variable subnet_cidr_block &#123;&#125;</span><br><span class="line">variable avail_zone &#123;&#125;</span><br><span class="line">variable env_prefix &#123;&#125;</span><br><span class="line"></span><br><span class="line"># 创建VPC</span><br><span class="line">resource &quot;aws_vpc&quot; &quot;myapp-vpc&quot; &#123;</span><br><span class="line">  cidr_block = var.vpc_cidr_block</span><br><span class="line"></span><br><span class="line">  # vpc名称带有&quot;vpc&quot;前缀</span><br><span class="line">  tags = &#123;</span><br><span class="line">    Name: &quot;$&#123;var.env_prefix&#125;-vpc&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 创建Subnet</span><br><span class="line">resource &quot;aws_subnet&quot; &quot;myapp-subnet-1&quot; &#123;</span><br><span class="line">  vpc_id = aws_vpc.myapp-vpc.id</span><br><span class="line">  cidr_block = var.vpc_cidr_block</span><br><span class="line">  availability_zone = var.avail_zone</span><br><span class="line">  tags = &#123;</span><br><span class="line">    Name: &quot;$&#123;var.env_prefix&#125;-subnet-1&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>‍</p><p>在AWS上查看结果</p><p>​<img src="/2024/06/30/AWS-Terraform-Section4-Project/image-20240627221856-zq53z7g.png" alt="image">​</p><p>‍</p><h2 id="Route-Table"><a href="#Route-Table" class="headerlink" title="Route Table"></a>Route Table</h2><p>Route table决定了VPC转发的目的地</p><p>​<img src="/2024/06/30/AWS-Terraform-Section4-Project/image-20240629093707-g015c9a.png" alt="image">​</p><p>‍</p><p>在Terraform code不必根据执行的先后来编写代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"># 创建Route table</span><br><span class="line">resource &quot;aws_route_table&quot; &quot;myapp-route-table&quot; &#123;</span><br><span class="line">  vpc_id = aws_vpc.myapp-vpc.id</span><br><span class="line"></span><br><span class="line">  route = &#123;</span><br><span class="line">    cidr_block = &quot;0.0.0.0/0&quot;</span><br><span class="line">    gateway_id = aws_internet_gateway.myapp-igw.id</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  tags = &#123;</span><br><span class="line">    Name: &quot;$&#123;var.env_prefix&#125;-rtb&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># Route table gateway</span><br><span class="line">resource &quot;aws_internet_gateway&quot; &quot;myapp-igw&quot; &#123;</span><br><span class="line">  vpc_id = aws_vpc.myapp-vpc.id</span><br><span class="line"></span><br><span class="line">    tags = &#123;</span><br><span class="line">    Name: &quot;$&#123;var.env_prefix&#125;-igw&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>‍</p><p>执行结果</p><p>​<img src="/2024/06/30/AWS-Terraform-Section4-Project/image-20240629095048-bxhndn1.png" alt="image">​</p><p>‍</p><p>同时还要为Route table和Subnet创建关联</p><p>​<img src="/2024/06/30/AWS-Terraform-Section4-Project/image-20240629095414-dwpb65b.png" alt="image">​</p><p>Terraform code</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># Route table &amp; Subnect</span><br><span class="line">resource &quot;aws_route_table_association&quot; &quot;a-rtb-subnet&quot; &#123;</span><br><span class="line">  subnet_id = aws_subnet.myapp-subnet-1.id</span><br><span class="line">  route_table_id = aws_route_table.myapp-route-table.id</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>‍</p><h2 id="Security-Group-Firewall"><a href="#Security-Group-Firewall" class="headerlink" title="Security Group &amp; Firewall"></a>Security Group &amp; Firewall</h2><p>创建安全组</p><p>​<img src="/2024/06/30/AWS-Terraform-Section4-Project/image-20240629100936-owifg74.png" alt="image">​</p><p>Terraform code</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"># Security Group</span><br><span class="line">resource &quot;aws_security_group&quot; &quot;myapp-sg&quot; &#123;</span><br><span class="line">  name = &quot;myapp-sg&quot;</span><br><span class="line">  vpc_id = aws_vpc.myapp-vpc.id</span><br><span class="line">  </span><br><span class="line">  # Incoming traffic</span><br><span class="line">  ingress = &#123;</span><br><span class="line">    from_port = 22</span><br><span class="line">    to_port = 22</span><br><span class="line">    protocal = &quot;tcp&quot;</span><br><span class="line"></span><br><span class="line">    # IPs allow list</span><br><span class="line">    cidr_block = [&quot;your_allow_ip/32&quot;]</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  # Outgoing traffic</span><br><span class="line">  egress = &#123;</span><br><span class="line">    # Allowing all port and ip</span><br><span class="line">    from_port = 0</span><br><span class="line">    to_port = 0</span><br><span class="line">    protocal = &quot;-1&quot;</span><br><span class="line">    cidr_block = [&quot;0.0.0.0/0&quot;]</span><br><span class="line">    prefix_list_ids = []</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  tags = &#123;</span><br><span class="line">    Name: &quot;$&#123;var.env_prefix&#125;-sg&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>‍</p><p>执行结果</p><p>​<img src="/2024/06/30/AWS-Terraform-Section4-Project/image-20240629101551-0c9lczq.png" alt="image">​</p><p>‍</p><h2 id="EC2-AMI"><a href="#EC2-AMI" class="headerlink" title="EC2 &amp; AMI"></a>EC2 &amp; AMI</h2><p>Amazon Machine Image(AMI)是aws提供的操作系统镜像，用户可以根据AMI创建自己的操作系统实例。</p><p>​<img src="/2024/06/30/AWS-Terraform-Section4-Project/image-20240629102443-vk9vmei.png" alt="image">​</p><p>‍</p><p>Terraform code</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"># AWS AMI data definition</span><br><span class="line">data &quot;aws_ami&quot; &quot;latest_aws-linux-image&quot; &#123;</span><br><span class="line">  # Always get latest image</span><br><span class="line">  most_recent = true</span><br><span class="line"></span><br><span class="line">  owners = [&quot;amazon&quot;]</span><br><span class="line">  </span><br><span class="line">  # filter image name with regrex</span><br><span class="line">  filter &#123;</span><br><span class="line">    name = &quot;name&quot;</span><br><span class="line">    values = [&quot;amzn2-ami-hvm-*-x86_64_gp2&quot;]</span><br><span class="line">  &#125;</span><br><span class="line">  filter &#123;</span><br><span class="line">    name = &quot;virtualization-type&quot;</span><br><span class="line">    values = [&quot;hvm&quot;]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># Only test for ami id output</span><br><span class="line"># When execute &quot;terraform plan&quot;, can see value from console</span><br><span class="line"># output &quot;name&quot; &#123;</span><br><span class="line">#   value = data.aws_ami.latest_aws-linux-image</span><br><span class="line"># &#125;</span><br><span class="line"></span><br><span class="line"># 创建aws key pair</span><br><span class="line">resource &quot;aws_key_pair&quot; &quot;ssh-key&quot; &#123;</span><br><span class="line">  key_name = &quot;server-key&quot;</span><br><span class="line"></span><br><span class="line">  # 引用文件</span><br><span class="line">  public_key = &quot;$&#123;file(&quot;/User/xxx/.ssh/key_file.pub&quot;)&#125;&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 创建操作系统实例 - EC2</span><br><span class="line">resource &quot;aws_instance&quot; &quot;myapp-server&quot; &#123;</span><br><span class="line">  # Id of ami</span><br><span class="line">  ami = data.aws_ami.latest_aws-linux-image.id</span><br><span class="line">  instance_type = &quot;t2.micro&quot;</span><br><span class="line"></span><br><span class="line">  # 引用已经创建好的VPC &amp; Subnect</span><br><span class="line">  subnet_id = aws_subnet.myapp-subnet-1.id</span><br><span class="line">  vpc_security_group_ids = [aws_default_security_group.default-sg.id]</span><br><span class="line">  availability_zone = var.avail_zone</span><br><span class="line">  associate_public_ip_address = true</span><br><span class="line"></span><br><span class="line">  # Server key pair, permission should be 400</span><br><span class="line">  # AWS will reject ssh request if permission not set correctly</span><br><span class="line">  # It&#x27;s generate from AWS console, provide the key file name</span><br><span class="line">  key_name = aws_key_pair.ssh-key.key_name </span><br><span class="line">  </span><br><span class="line">  tags = &#123;</span><br><span class="line">    Name = &quot;$&#123;var.env_prefix&#125;-server&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>‍</p><p>等待EC2创建</p><p>​<img src="/2024/06/30/AWS-Terraform-Section4-Project/image-20240629145356-5h7sdlf.png" alt="image">​</p><p>‍</p><h3 id="EC2-initialize-script"><a href="#EC2-initialize-script" class="headerlink" title="EC2 initialize script"></a>EC2 initialize script</h3><p>添加 <code>user_data=</code>​，设置EC2初始化时自动运行脚本</p><p>下图中的代码块只会在初始化的时候被执行一次</p><p>​<img src="/2024/06/30/AWS-Terraform-Section4-Project/image-20240629152214-ngas3tc.png" alt="image">​</p><p>‍</p><p>如果需要执行定义好的脚本而不是代码块，可以使用如下方式</p><p>​<img src="/2024/06/30/AWS-Terraform-Section4-Project/image-20240629152738-j165ka4.png" alt="image">​</p><p>‍</p><p><strong>另一种方式：使用Provisioner执行脚本</strong></p><p>使用<code>remote-exec</code>​在EC2上执行脚本</p><p>​<img src="/2024/06/30/AWS-Terraform-Section4-Project/image-20240629154524-8ou2ulm.png" alt="image">​</p><p>‍</p><p>可以使用<code>local-exec</code>​在本地机器上执行命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">provisioner &quot;local-exec&quot; &#123;</span><br><span class="line">  command = &quot;echo $&#123;self.public_ip&#125; &gt; output.txt&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>‍</p><p>Terraform文档上说明<code>Provisioners</code>​是没有其他选择时的最后手段</p><ul><li>尽量采用<code>user_data</code>​而不是<code>Provisioners</code>​</li><li>尽量使用”local provider”取代<code>local-exec</code>​</li><li>尽量采用配置管理工具取代<code>Provisioners</code>​，如Ansible, Jenkins</li></ul><p>实际上<code>Provisioners</code>​打破了Terraform的概念。Terraform能通过相同的组件状态总是提供一致的返回结果，但是<code>Provisioners</code>​执行的脚本却是未知的，Terraform无法获取到其中的状态。</p><p>​<img src="/2024/06/30/AWS-Terraform-Section4-Project/image-20240629155206-cpb6z6n.png" alt="image">​</p><p>‍</p><p>一种可能的情况是，Provisioner中的脚本执行错误，此时terraform不会返回具体的状态信息。</p><p>这种状态下无法得知EC2具体是否被创建</p><p>​<img src="/2024/06/30/AWS-Terraform-Section4-Project/image-20240629160318-0x1irb3.png" alt="image">​</p><p>‍</p>]]></content>
      
      
      <categories>
          
          <category> AWS Terraform </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AWS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AWS Terraform Section3 - Input and Output</title>
      <link href="/2024/06/29/AWS-Terraform-Section3-Input-and-Output/"/>
      <url>/2024/06/29/AWS-Terraform-Section3-Input-and-Output/</url>
      
        <content type="html"><![CDATA[<p>‍</p><h2 id="Terraform-output"><a href="#Terraform-output" class="headerlink" title="Terraform output"></a>Terraform output</h2><p>示例</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">resource &quot;aws_subnet&quot; &quot;dev-subnet-1&quot; &#123;</span><br><span class="line">    # 指定subnet所属的VPC</span><br><span class="line">    # 目前VPC还没创建，所以需要动态引用定义的资源</span><br><span class="line">    vpc_id = aws_pvc.development-vpc.id</span><br><span class="line"></span><br><span class="line">    # 定义VPC地址范围的子集</span><br><span class="line">    cidr_block = &quot;10.0.10.0/24&quot;</span><br><span class="line"></span><br><span class="line">    availability_zone = &quot;eu-west-3a&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">output &quot;dev-subnet-id&quot; &#123;</span><br><span class="line">    value = aws_subnet.dev-subnet-1.id</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>‍</p><p>执行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">terraform plan</span><br></pre></td></tr></table></figure><p>‍</p><p>可以看到控制台输出了<code>output</code>​中定义的值</p><p>​<img src="/2024/06/29/AWS-Terraform-Section3-Input-and-Output/image-20240627085444-muswq4x.png" alt="image">​</p><p>‍</p><p>*可以使用vscode编写Terraform code，该工具支持打开终端</p><p>​<img src="/2024/06/29/AWS-Terraform-Section3-Input-and-Output/image-20240629162626-a5xvcbc.png" alt="image">​</p><p>‍</p><h2 id="Terraform-input"><a href="#Terraform-input" class="headerlink" title="Terraform input"></a>Terraform input</h2><p>在Terraform中引用变量</p><ul><li>通过<code>default</code>​给定默认值</li><li>通过<code>type</code>​设置变量类型，如list(string), string, object等</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">variable &quot;subnet_cidr_block&quot; &#123;</span><br><span class="line">    description = &quot;subnet cidr block&quot;</span><br><span class="line">default=&quot;10.0.10.0/24&quot;</span><br><span class="line">type = string</span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">resource &quot;aws_subnet&quot; &quot;dev-subnet-1&quot; &#123;</span><br><span class="line">    vpc_id = aws_pvc.development-vpc.id</span><br><span class="line">    cidr_block = var.subnet_cidr_block</span><br><span class="line"></span><br><span class="line">    availability_zone = &quot;eu-west-3a&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>‍</p><p>Object示例</p><p>terraform.tfvars</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cidr_blocks = [</span><br><span class="line">&#123;cidr_block-=&quot;10.0.0.0/16&quot;, name=&quot;dev-vpc&quot;&#125;, </span><br><span class="line">&#123;cidr_block-=&quot;10.0.0.0/16&quot;, name=&quot;dev-vpc&quot;&#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>‍</p><p>变量定义方式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">variable &quot;cidr_blocks&quot; &#123;</span><br><span class="line">  type = list(object(&#123;</span><br><span class="line">    cidr_block = string</span><br><span class="line">    name = string</span><br><span class="line">  &#125;))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>‍</p><p>引用方式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">resource &quot;aws_pvc&quot; &quot;development-vpc&quot; &#123;</span><br><span class="line"></span><br><span class="line">    cider_block = var.cider_block[0].cider_block</span><br><span class="line">    tags = &#123;</span><br><span class="line">        Name: var.cider_block[0].name</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>‍</p><h3 id="变量的赋值方式"><a href="#变量的赋值方式" class="headerlink" title="变量的赋值方式"></a>变量的赋值方式</h3><h4 id="通过控制台输入"><a href="#通过控制台输入" class="headerlink" title="通过控制台输入"></a>通过控制台输入</h4><p>直接执行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">terraform apply</span><br></pre></td></tr></table></figure><p>‍</p><p>然后在控制台输入内容</p><p>​<img src="/2024/06/29/AWS-Terraform-Section3-Input-and-Output/image-20240627090358-a0f77fr.png" alt="image">​</p><p>‍</p><h4 id="命令行传参数"><a href="#命令行传参数" class="headerlink" title="命令行传参数"></a>命令行传参数</h4><p>在控制台执行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">terraform -var &quot;subnet_cidr_block=10.0.30.0/24&quot;</span><br></pre></td></tr></table></figure><p>‍</p><h4 id="（常用）定义变量文件"><a href="#（常用）定义变量文件" class="headerlink" title="（常用）定义变量文件"></a>（常用）定义变量文件</h4><p>当执行如下命令时</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">terraform apply -var-file terraform-dev.tfvars --target=module.xxx</span><br></pre></td></tr></table></figure><p>变量传递链路如下</p><p>​<code>*.tfvars</code>​ -&gt; variable.tf -&gt; main.tf -&gt; output.tf</p><p>‍</p><p>例如：</p><p>创建一个<code>*.tfvars</code>​的文件，例如terraform.tfvars</p><p>Terraform能自动找到<code>tfvars</code>​并识别为变量文件</p><p>​<img src="/2024/06/29/AWS-Terraform-Section3-Input-and-Output/image-20240627091135-d3dfmv2.png" alt="image">​</p><p>‍</p><p>执行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">terraform apply</span><br></pre></td></tr></table></figure><p>‍</p><p>此时不需要额外输入变量的值，Terraform会自动找到变量并且赋值</p><p>‍</p><p>推荐把变量文件根据环境来命名</p><p>例如 terraform-dev.tfvars</p><p>​<img src="/2024/06/29/AWS-Terraform-Section3-Input-and-Output/image-20240627091655-ofb3joh.png" alt="image">​</p><p>指定变量文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">terraform apply -var-file terraform-dev.tfvars</span><br></pre></td></tr></table></figure><p>‍</p><h2 id="AWS-Credential"><a href="#AWS-Credential" class="headerlink" title="AWS Credential"></a>AWS Credential</h2><p>不推荐以下方式明文写入access key</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">provider &quot;aws&quot; &#123;</span><br><span class="line">    region = &quot;eu-west-3&quot; # 取决于购买的EC2实例所属的区域</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">    不推荐hardcode明文的key</span><br><span class="line">    **/</span><br><span class="line">    access_key = &quot;&quot;</span><br><span class="line">    secret_key = &quot;&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>‍</p><p>1.可以使用环境变量的方式</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">export AWS_SECRET_ACCESS = &quot;XXXX&quot;</span><br><span class="line">export AWS_ACCESS_KEY_ID = &quot;XXXX&quot;</span><br></pre></td></tr></table></figure><p>‍</p><p>然后直接执行terraform命令，会自动连接到AWS</p><p>​<img src="/2024/06/29/AWS-Terraform-Section3-Input-and-Output/image-20240627212211-b63szv1.png" alt="image">​</p><p>‍</p><p>2.在文件中存储以便全局调用</p><p>存储位置： <code>~/.aws/credentials</code>​</p><p>可以直接输入 aws configure进行配置，自动存储到 <code>~/.aws/credentials</code>​</p><p>​<img src="/2024/06/29/AWS-Terraform-Section3-Input-and-Output/image-20240627212506-aehf3ue.png" alt="image">​</p><p>‍</p><p>也可以设置AWS_DEFAULT_REGION指定默认的区域</p><p>​<img src="/2024/06/29/AWS-Terraform-Section3-Input-and-Output/image-20240627212919-krbqr1f.png" alt="image">​</p><p>‍</p><p>3.可以通过安装adfs登录AWS</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python install adf-assume</span><br></pre></td></tr></table></figure><p>‍</p><p>执行以下脚本一键连接到AWS</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line">source [python_env]</span><br><span class="line">echo -n &quot;Input AWS password: &quot;</span><br><span class="line">read -s AWS_PASSWORD</span><br><span class="line">export AWS_PROFILE=saml</span><br><span class="line">adfs-assume -u $ACCOUNT --domain=$DOMAIN</span><br></pre></td></tr></table></figure><h2 id="Global-Variable"><a href="#Global-Variable" class="headerlink" title="Global Variable"></a>Global Variable</h2><p>命名规则必须为：<code>TF_VAR_xxx</code>​</p><p>‍</p><p>例如，需要引用操作系统当前环境下的某个变量</p><p>​<img src="/2024/06/29/AWS-Terraform-Section3-Input-and-Output/image-20240627213207-7vyobna.png" alt="image">​</p><p>在Terraform中引用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">variable avail_zone &#123;&#125;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">resource &quot;aws_subnet&quot; &quot;dev-subnet-1&quot; &#123;</span><br><span class="line">  availability_zone = var.avail_zone</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>‍</p><p>执行结果</p><p>可以看到自动识别到了变量 avail_zone 自动匹配到了 TF_VAR_avail_zone</p><p>​<img src="/2024/06/29/AWS-Terraform-Section3-Input-and-Output/image-20240627213338-wu1puwy.png" alt="image">​</p><p>‍</p><h2 id="Terraform-Module"><a href="#Terraform-Module" class="headerlink" title="Terraform Module"></a>Terraform Module</h2><p>通过模块的方式编写，而不是将所有的代码都放在同一个<code>tf</code>​文件中</p><p>一个module应该将多个resource整合起来，方便相同的组件重用</p><p>例如VPC、Subnet、Route table、Internate gateway都应该放到同一个module中，方便创建EC2时直接调用</p><p>​<img src="/2024/06/29/AWS-Terraform-Section3-Input-and-Output/image-20240629160704-lusjo4f.png" alt="image">​</p><p>‍</p><p>同时Terraform也有一些现成的module方便参考，不需要重复创造功能相同的模块</p><p><a href="https://registry.terraform.io/browse/modules">https://registry.terraform.io/browse/modules</a></p><p>‍</p><h2 id="Terraform-state"><a href="#Terraform-state" class="headerlink" title="Terraform state"></a>Terraform state</h2><p>Terraform plan会根据state文件生成执行计划</p><p>最好把<code>tfstate</code>​存放起来远程访问，确保Jenkins和团队成员本地执行都能读取到最新的状态</p><p>AWS可以使用S3存储</p><p>​<img src="/2024/06/29/AWS-Terraform-Section3-Input-and-Output/image-20240629165547-mwpen00.png" alt="image">​</p><p>‍</p><p>例如</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 创建S3</span><br><span class="line">terraform &#123;</span><br><span class="line">  required_version = &quot;&gt;=0.12&quot;</span><br><span class="line">  backend &quot;s3&quot; &#123;</span><br><span class="line">    bucket = &quot;myapp-bucket&quot;</span><br><span class="line">    key = &quot;myapp/state.tfstate&quot;</span><br><span class="line">    region = &quot;eu-west-3&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>‍</p><p>在创建的时候会询问是否把状态存储到S3<img src="/2024/06/29/AWS-Terraform-Section3-Input-and-Output/image-20240629170359-36haj4u.png" alt="image">​</p><p>‍</p><p>此时state文件将交给AWS控制，Jenkins和开发人员本地会自动使用S3的state文件</p><p>​<img src="/2024/06/29/AWS-Terraform-Section3-Input-and-Output/image-20240629170604-2elttg6.png" alt="image">​</p><p>‍</p><p>使用如下命令验证，不同的环境执行应该得到相同的结果</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">terraform state list</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> AWS Terraform </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AWS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AWS Terraform Section2 - VPC</title>
      <link href="/2024/06/23/AWS-Terraform-Section2-VPC/"/>
      <url>/2024/06/23/AWS-Terraform-Section2-VPC/</url>
      
        <content type="html"><![CDATA[<h2 id="VPC-Subnet"><a href="#VPC-Subnet" class="headerlink" title="VPC &amp; Subnet"></a>VPC &amp; Subnet</h2><p>​<img src="/2024/06/23/AWS-Terraform-Section2-VPC/image-20240621090538-0t4qsb0.png" alt="image">​</p><p>‍</p><p>每当一个账户在区域创建时，都会拥有一个AWS VPC（Virtual Private Cloud）</p><p>​<img src="/2024/06/23/AWS-Terraform-Section2-VPC/image-20240621090636-8pfda8m.png" alt="image">​</p><p>‍</p><p>跟随区域，跟随AWS账户默认创建，用于保护每个账户的私有资源访问权限</p><p>例如不同的账户可能创建在同一台物理服务器上，但是不同的账号间的资源访问是互相隔离的</p><p>​<img src="/2024/06/23/AWS-Terraform-Section2-VPC/image-20240621091018-bj1wwsq.png" alt="image">​</p><p>‍</p><p>控制台可以看到默认创建的VPC</p><p>​<img src="/2024/06/23/AWS-Terraform-Section2-VPC/image-20240621090729-glyury5.png" alt="image">​</p><p>‍</p><p>VPC代表了公司的网络架构，包括网络配置、路由、防火墙等</p><p>VPC由不同的<code>Availability Zone</code>​组成，具体指代实际的物理服务器所在的数据中心</p><p>例如 我在中国区，可能会有华南、华中、华北3个数据中心都有虚拟服务器运行，那么就会有3个<code>Availability Zone</code>​，也就会有3个subnet</p><p>​<img src="/2024/06/23/AWS-Terraform-Section2-VPC/image-20240621091717-r6rsa9e.png" alt="image">​</p><p>‍</p><p>当我们需要从外部访问资源时，需要配置一个公共IP地址，可以使用<code>Internet Gateway</code>​</p><p>当我们需要控制外部对VPC访问权限，可以配置防火墙</p><p>​<img src="/2024/06/23/AWS-Terraform-Section2-VPC/image-20240621092301-v45hvvl.png" alt="image">​</p><p>‍</p><h3 id="配置外部访问"><a href="#配置外部访问" class="headerlink" title="配置外部访问"></a>配置外部访问</h3><p>设置防火墙规则和安全组</p><p>VPC -&gt; SECURITY</p><p>​<img src="/2024/06/23/AWS-Terraform-Section2-VPC/image-20240621092558-4chx80a.png" alt="image">​</p><p>‍</p><h2 id="添加VPC资源"><a href="#添加VPC资源" class="headerlink" title="添加VPC资源"></a>添加VPC资源</h2><p>资源命名规则:  aws_[resource_name]</p><p>‍</p><p>所有的语法示例都能在文档中找到</p><p><a href="https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/vpc">https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/vpc</a></p><p>​<img src="/2024/06/23/AWS-Terraform-Section2-VPC/image-20240623100755-9y6u10a.png" alt="image">​</p><p>‍</p><p>代码示例</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">provider &quot;aws&quot; &#123;</span><br><span class="line">    region = &quot;eu-west-3&quot; # 取决于购买的EC2实例所属的区域</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">    不推荐hardcode明文的key</span><br><span class="line">    **/</span><br><span class="line">    access_key = &quot;&quot;</span><br><span class="line">    secret_key = &quot;&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 资源命名规则 - aws_resource</span><br><span class="line"># 创建名为 development-vpc的VPC</span><br><span class="line">resource &quot;aws_pvc&quot; &quot;development-vpc&quot; &#123;</span><br><span class="line"></span><br><span class="line">    # VPC地址范围</span><br><span class="line">    cider_block = &quot;10.0.0.0/16&quot;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 创建名为 dev-subnet-1 的subnet</span><br><span class="line">resource &quot;aws_subnet&quot; &quot;dev-subnet-1&quot; &#123;</span><br><span class="line">    # 指定subnet所属的VPC</span><br><span class="line">    # 目前VPC还没创建，所以需要动态引用定义的资源</span><br><span class="line">    vpc_id = aws_pvc.development-vpc.id</span><br><span class="line"></span><br><span class="line">    # 定义VPC地址范围的子集</span><br><span class="line">    cidr_block = &quot;10.0.10.0/24&quot;</span><br><span class="line"></span><br><span class="line">    availability_zone = &quot;eu-west-3a&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>‍</p><p>通过执行如下命令应用到AWS</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">terraform apply</span><br></pre></td></tr></table></figure><p>‍</p><p>执行命令以后可以预览terraform的执行计划，然后输入<code>yes</code>​确认该计划</p><p>​<img src="/2024/06/23/AWS-Terraform-Section2-VPC/image-20240623101644-fx9ybbf.png" alt="image">​</p><p>‍</p><h3 id="DataSource"><a href="#DataSource" class="headerlink" title="DataSource"></a>DataSource</h3><p>假如我们需要从已有的VPC中创建subnet，则需要先拉取AWS已有的VPC信息，然后引用其id</p><p>​<img src="/2024/06/23/AWS-Terraform-Section2-VPC/image-20240623102401-7sfq2ts.png" alt="image">​</p><p>‍</p><p>示例</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"># 拉取aws数据</span><br><span class="line"># 定义变量名为 existing_vpc 的vpc数据源</span><br><span class="line">data &quot;aws_vpc&quot; &quot;existing_vpc&quot; &#123;</span><br><span class="line"></span><br><span class="line">    # 拉取默认的vpc</span><br><span class="line">    default = true</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 创建名为 dev-subnet-1 的subnet</span><br><span class="line">resource &quot;aws_subnet&quot; &quot;dev-subnet-2&quot; &#123;</span><br><span class="line">    # 从已有的vpc中获取id</span><br><span class="line">    vpc_id = data.aws_vpc.existing_vpc.id</span><br><span class="line"></span><br><span class="line">    # 定义VPC地址范围的子集</span><br><span class="line">    # 不应与vpc中的已有subnet ip范围重复</span><br><span class="line">    cidr_block = &quot;172.31.48.0/20&quot;</span><br><span class="line"></span><br><span class="line">    availability_zone = &quot;eu-west-3a&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>‍</p><p>执行 terraform apply</p><p>​<img src="/2024/06/23/AWS-Terraform-Section2-VPC/image-20240623103153-6tu25vy.png" alt="image">​</p><p>‍</p><h2 id="修改-删除资源"><a href="#修改-删除资源" class="headerlink" title="修改 &amp; 删除资源"></a>修改 &amp; 删除资源</h2><p>继续以AWS VPC为例</p><h3 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h3><p>使用关键字<code>tags</code>​，它存在于所有的资源中</p><p>例如，指定VPC名称</p><p>​<img src="/2024/06/23/AWS-Terraform-Section2-VPC/image-20240623104620-e98o9gy.png" alt="image">​</p><p>在应用tf文件的时候，<code>~</code>​代表资源修改，<code>+</code>​代表新增</p><p>并且在执行计划中有8个属性保持不变</p><p>​<img src="/2024/06/23/AWS-Terraform-Section2-VPC/image-20240623105005-f2r9sza.png" alt="image">​</p><p>‍</p><p>将会在控制台显示名称</p><p>​<img src="/2024/06/23/AWS-Terraform-Section2-VPC/image-20240623104640-82dkf08.png" alt="image">​</p><p>‍</p><p>如果删除掉<code>tags</code>​，那么在执行计划中会以<code>-</code>​显示</p><p>​<img src="/2024/06/23/AWS-Terraform-Section2-VPC/image-20240623105243-u2uvsfs.png" alt="image">​</p><p>‍</p><h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><h4 id="修改tf"><a href="#修改tf" class="headerlink" title="修改tf"></a>修改tf</h4><p> *<strong>推荐使用配置文件的方式，配置文件方便代码管理</strong></p><p>如果把<code>*.tf</code>​中的subnet删除，执行 terraform apply，则意味着删除该subnet</p><p>​<img src="/2024/06/23/AWS-Terraform-Section2-VPC/image-20240623105535-ysouex2.png" alt="image">​</p><p>‍</p><p>执行计划如下</p><p>可以看到整个资源都标有<code>-</code>​，因为这个资源即将被删除</p><p>​<img src="/2024/06/23/AWS-Terraform-Section2-VPC/image-20240623105738-ldw0dxg.png" alt="image">​</p><p>‍</p><h4 id="terraform-destroy"><a href="#terraform-destroy" class="headerlink" title="terraform destroy"></a>terraform destroy</h4><p>执行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">terraform destroy -target [resource_type] [resource_name]</span><br></pre></td></tr></table></figure><p>‍</p><p>例如</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">terraform destroy -target aws_subnet dev-subnet-2</span><br></pre></td></tr></table></figure><p>‍</p><p>可以看到执行计划也是类似的</p><p>​<img src="/2024/06/23/AWS-Terraform-Section2-VPC/image-20240623110048-4j3479w.png" alt="image">​</p><p>‍</p><h2 id="对比差异"><a href="#对比差异" class="headerlink" title="对比差异"></a>对比差异</h2><p>检查aws和tf文件的差异</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">terraform plan</span><br></pre></td></tr></table></figure><p>示例</p><p>​<img src="/2024/06/23/AWS-Terraform-Section2-VPC/image-20240623110453-hpt2fxs.png" alt="image">​</p><p>‍</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>provider: 用于导入一组或一段代码，类似import library</li><li>resource: 类似于从库中调用一段函数</li><li>data: 类似于返回已经存在的资源的函数</li></ul><p>​<img src="/2024/06/23/AWS-Terraform-Section2-VPC/image-20240623103603-vixezkm.png" alt="image">​</p><p>‍</p><p>需要注意的是，这里的用户必须具有创建资源所必须的权限<img src="/2024/06/23/AWS-Terraform-Section2-VPC/image-20240623103705-nm2hmts.png" alt="image">​</p><p>‍</p><p>另外，terraform在apply相同的tf文件的时候，会自动检查所有组件的状态</p><p>如果组件已经存在，则terraform不会再执行操作</p><p>也就是说每当应用相同的配置时，总会得到一样的结果。用户不需要记住当前组件的状态，也不会意外地破坏某些原有的组件。</p><p>‍</p><p>‍</p>]]></content>
      
      
      <categories>
          
          <category> AWS Terraform </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AWS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AWS Terraform Section1 - 简介</title>
      <link href="/2024/06/23/AWS-Terraform-Section1/"/>
      <url>/2024/06/23/AWS-Terraform-Section1/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>官网 <a href="https://developer.hashicorp.com/terraform/intro">https://developer.hashicorp.com/terraform/intro</a></p><p>Infrastructure as Code tool.</p><p>Terraform本质上是通过调用API实现对各种服务器资源的CRUD操作。</p><p>​<img src="/2024/06/23/AWS-Terraform-Section1/image-20240621083744-cph8xt3.png" alt="image">​</p><p>Terraform主要是用于架构的编排，譬如创建EC2，设置VPC，安装docker等，而且其中的顺序必须要遵循一定的顺序。</p><p>另一个IaC工具是Ansible。Ansible可以用来配置基础设置、部署应用、安装和更新应用等</p><p>Terraform创建并测试完后，可以精确自动化地复制更多的环境。</p><p>​<img src="/2024/06/23/AWS-Terraform-Section1/image-20240617213010-g7rnt9g.png" alt="image">​</p><p>‍<img src="/2024/06/23/AWS-Terraform-Section1/image-20240629153340-5rpwr4n.png" alt="image">​</p><p>‍</p><h2 id="安装Terraform"><a href="#安装Terraform" class="headerlink" title="安装Terraform"></a>安装Terraform</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install terraform</span><br></pre></td></tr></table></figure><p>‍</p><p>查看Terraform版本号</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">terraform -v</span><br></pre></td></tr></table></figure><p>‍</p><p>安装结果如下</p><p>​<img src="/2024/06/23/AWS-Terraform-Section1/image-20240617213642-gi9trte.png" alt="image">​</p><p>‍</p><h2 id="初始化AWS环境"><a href="#初始化AWS环境" class="headerlink" title="初始化AWS环境"></a>初始化AWS环境</h2><ul><li>连接到AWS账户</li><li>创建VPC</li><li>创建Subnet</li></ul><h3 id="本地环境设置"><a href="#本地环境设置" class="headerlink" title="本地环境设置"></a>本地环境设置</h3><p>创建名为<code>Terraformed</code>​的文件夹，并在其中创建文件<code>main.tf</code>​</p><p>​<code>*.tf</code>​是Terraform文件的标准命名方式</p><p>​<img src="/2024/06/23/AWS-Terraform-Section1/image-20240617214824-h3zyfo9.png" alt="image">​</p><p>‍</p><p>使用Visual Studio Code打开<code>main.tf</code>​，并且安装Terraform官方插件。</p><p>​<img src="/2024/06/23/AWS-Terraform-Section1/image-20240617215049-jdiqpkh.png" alt="image">​</p><p>‍</p><p>安装完插件以后可以在VS Code中更方便地编辑Terraform文件</p><p>‍</p><h3 id="注册AWS云账号"><a href="#注册AWS云账号" class="headerlink" title="注册AWS云账号"></a>注册AWS云账号</h3><p>注册完毕后可以免费使用AWS云计算资源</p><p>​<img src="/2024/06/23/AWS-Terraform-Section1/image-20240617215341-n63hg26.png" alt="image">​</p><p>‍</p><p>注册完毕后会自动创建root用户，此时应该通过IAM创建一个权限较低的管理员账户，并通过管理员账户管理普通账户。</p><p>​<img src="/2024/06/23/AWS-Terraform-Section1/image-20240621082633-pze0qoe.png" alt="image">​</p><p>​<img src="/2024/06/23/AWS-Terraform-Section1/image-20240621082734-ltw8n4d.png" alt="image">​</p><p>添加group或者选择”Attach existing policies directly”勾选需要赋予的权限</p><p>​<img src="/2024/06/23/AWS-Terraform-Section1/image-20240621082909-kl5bllb.png" alt="image">​</p><p>‍</p><h3 id="Terraform连接到AWS"><a href="#Terraform连接到AWS" class="headerlink" title="Terraform连接到AWS"></a>Terraform连接到AWS</h3><p>​<img src="/2024/06/23/AWS-Terraform-Section1/image-20240621083520-o2agtmi.png" alt="image">​</p><p>‍</p><p>Providers作为Terraform中最重要的关键字，用于标识需要调用的远程云服务供应商API</p><p>Providers列表如下，支持许多的云服务供应商</p><p>支持的资源供应商列表 <a href="https://registry.terraform.io/browse/providers">https://registry.terraform.io/browse/providers</a></p><p>包括云服务、Devops工具(Ansible、Github、Grafana、Jenkins、Kubernetes …)等</p><p>​<img src="/2024/06/23/AWS-Terraform-Section1/image-20240621084141-ejuxa61.png" alt="image">​</p><p>‍</p><p>通过以下*.tf文件，将以编程的方式连接到AWS服务</p><p>AWS语法和源码示例</p><p><a href="https://registry.terraform.io/providers/hashicorp/aws/latest">https://registry.terraform.io/providers/hashicorp/aws/latest</a></p><p><a href="https://registry.terraform.io/providers/hashicorp/aws/latest/docs">https://registry.terraform.io/providers/hashicorp/aws/latest/docs</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">provider &quot;aws&quot; &#123;</span><br><span class="line">    region = &quot;eu-west-3&quot; # 取决于购买的EC2实例所属的区域</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">    不推荐hardcode明文的key</span><br><span class="line">    **/</span><br><span class="line">    access_key = &quot;&quot;</span><br><span class="line">    secret_key = &quot;&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>‍</p><p>*.tf文件是一个定义文件，编写完毕后需要执行以下命令安装相应的依赖(类似npm&#x2F;maven instal)</p><p>进入<code>*.tf</code>​所在的文件夹</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">terraform init</span><br></pre></td></tr></table></figure><p>‍</p><p>运行结果</p><p>​<img src="/2024/06/23/AWS-Terraform-Section1/image-20240621090125-g8a8waj.png" alt="image">​</p><p>‍</p><p>可以看到新文件生成</p><p>​<img src="/2024/06/23/AWS-Terraform-Section1/image-20240621090308-ajssusd.png" alt="image">​</p><p>‍</p><h3 id="查看terraform状态"><a href="#查看terraform状态" class="headerlink" title="查看terraform状态"></a>查看terraform状态</h3><p>执行 terraaform state，以生成<code>tfstate</code>​文件</p><p>该文件可以记录当前terraform资源的状态列表</p><p>​<img src="/2024/06/23/AWS-Terraform-Section1/image-20240627084650-6jzruh4.png" alt="image">​</p><p>‍</p><p>​<img src="/2024/06/23/AWS-Terraform-Section1/image-20240627084208-hc9n0md.png" alt="image">​</p><p>‍</p><p>terraform state的子命令</p><p>​<img src="/2024/06/23/AWS-Terraform-Section1/image-20240627084312-2xv492o.png" alt="image">​</p><p>‍</p><h2 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h2><p>官网 <a href="https://developer.hashicorp.com/terraform/intro">https://developer.hashicorp.com/terraform/intro</a></p><p>Infrastructure as Code tool.</p><p>Terraform本质上是通过调用API实现对各种服务器资源的CRUD操作。</p><p>​<img src="/2024/06/23/AWS-Terraform-Section1/image-20240621083744-cph8xt3.png" alt="image">​</p><p>Terraform主要是用于架构的编排，譬如创建EC2，设置VPC，安装docker等，而且其中的顺序必须要遵循一定的顺序。</p><p>另一个IaC工具是Ansible。Ansible可以用来配置基础设置、部署应用、安装和更新应用等</p><p>​<img src="/2024/06/23/AWS-Terraform-Section1/image-20240617213010-g7rnt9g.png" alt="image">​</p><p>‍</p><p>Terraform创建并测试完后，可以精确自动化地复制更多的环境。</p><p>‍</p><h2 id="安装Terraform-1"><a href="#安装Terraform-1" class="headerlink" title="安装Terraform"></a>安装Terraform</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install terraform</span><br></pre></td></tr></table></figure><p>‍</p><p>查看Terraform版本号</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">terraform -v</span><br></pre></td></tr></table></figure><p>‍</p><p>安装结果如下</p><p>​<img src="/2024/06/23/AWS-Terraform-Section1/image-20240617213642-gi9trte.png" alt="image">​</p><p>‍</p><h2 id="初始化AWS环境-1"><a href="#初始化AWS环境-1" class="headerlink" title="初始化AWS环境"></a>初始化AWS环境</h2><ul><li>连接到AWS账户</li><li>创建VPC</li><li>创建Subnet</li></ul><h3 id="本地环境设置-1"><a href="#本地环境设置-1" class="headerlink" title="本地环境设置"></a>本地环境设置</h3><p>创建名为<code>Terraformed</code>​的文件夹，并在其中创建文件<code>main.tf</code>​</p><p>​<code>*.tf</code>​是Terraform文件的标准命名方式</p><p>​<img src="/2024/06/23/AWS-Terraform-Section1/image-20240617214824-h3zyfo9.png" alt="image">​</p><p>‍</p><p>使用Visual Studio Code打开<code>main.tf</code>​，并且安装Terraform官方插件。</p><p>​<img src="/2024/06/23/AWS-Terraform-Section1/image-20240617215049-jdiqpkh.png" alt="image">​</p><p>‍</p><p>安装完插件以后可以在VS Code中更方便地编辑Terraform文件</p><p>‍</p><h3 id="注册AWS云账号-1"><a href="#注册AWS云账号-1" class="headerlink" title="注册AWS云账号"></a>注册AWS云账号</h3><p>注册完毕后可以免费使用AWS云计算资源</p><p>​<img src="/2024/06/23/AWS-Terraform-Section1/image-20240617215341-n63hg26.png" alt="image">​</p><p>‍</p><p>注册完毕后会自动创建root用户，此时应该通过IAM创建一个权限较低的管理员账户，并通过管理员账户管理普通账户。</p><p>​<img src="/2024/06/23/AWS-Terraform-Section1/image-20240621082633-pze0qoe.png" alt="image">​</p><p>​<img src="/2024/06/23/AWS-Terraform-Section1/image-20240621082734-ltw8n4d.png" alt="image">​</p><p>添加group或者选择”Attach existing policies directly”勾选需要赋予的权限</p><p>​<img src="/2024/06/23/AWS-Terraform-Section1/image-20240621082909-kl5bllb.png" alt="image">​</p><p>‍</p><h3 id="Terraform连接到AWS-1"><a href="#Terraform连接到AWS-1" class="headerlink" title="Terraform连接到AWS"></a>Terraform连接到AWS</h3><p>​<img src="/2024/06/23/AWS-Terraform-Section1/image-20240621083520-o2agtmi.png" alt="image">​</p><p>‍</p><p>Providers作为Terraform中最重要的关键字，用于标识需要调用的远程云服务供应商API</p><p>Providers列表如下，支持许多的云服务供应商</p><p>支持的资源供应商列表 <a href="https://registry.terraform.io/browse/providers">https://registry.terraform.io/browse/providers</a></p><p>包括云服务、Devops工具(Ansible、Github、Grafana、Jenkins、Kubernetes …)等</p><p>​<img src="/2024/06/23/AWS-Terraform-Section1/image-20240621084141-ejuxa61.png" alt="image">​</p><p>‍</p><p>通过以下*.tf文件，将以编程的方式连接到AWS服务</p><p>AWS语法和源码示例</p><p><a href="https://registry.terraform.io/providers/hashicorp/aws/latest">https://registry.terraform.io/providers/hashicorp/aws/latest</a></p><p><a href="https://registry.terraform.io/providers/hashicorp/aws/latest/docs">https://registry.terraform.io/providers/hashicorp/aws/latest/docs</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">provider &quot;aws&quot; &#123;</span><br><span class="line">    region = &quot;eu-west-3&quot; # 取决于购买的EC2实例所属的区域</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">    不推荐hardcode明文的key</span><br><span class="line">    **/</span><br><span class="line">    access_key = &quot;&quot;</span><br><span class="line">    secret_key = &quot;&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>‍</p><p>*.tf文件是一个定义文件，编写完毕后需要执行以下命令安装相应的依赖(类似npm&#x2F;maven instal)</p><p>进入<code>*.tf</code>​所在的文件夹</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">terraform init</span><br></pre></td></tr></table></figure><p>‍</p><p>运行结果</p><p>​<img src="/2024/06/23/AWS-Terraform-Section1/image-20240621090125-g8a8waj.png" alt="image">​</p><p>‍</p><p>可以看到新文件生成</p><p>​<img src="/2024/06/23/AWS-Terraform-Section1/image-20240621090308-ajssusd.png" alt="image">​</p><p>‍</p><h2 id="Terraform常用命令"><a href="#Terraform常用命令" class="headerlink" title="Terraform常用命令"></a>Terraform常用命令</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">terraform init       # 初始化terraform文件</span><br><span class="line"></span><br><span class="line">terraform plan       # 比对当前环境与tf文件的差异</span><br><span class="line"></span><br><span class="line">terraform apply      # 将tf文件的设置应用到aws</span><br><span class="line"></span><br><span class="line">terraform destroy -target [resource_type] [resource_name]  # 删除资源 </span><br><span class="line"></span><br><span class="line">terraform apply -auto-approve  # 无需二次确认，立即应用tf配置文件</span><br><span class="line"></span><br><span class="line">terraform destroy    # 删除全部基础设施</span><br><span class="line"></span><br><span class="line">terraform state      # 生成terraform状态文件</span><br><span class="line"></span><br><span class="line">terraform state list # tfstate 显示文件中所有组件</span><br><span class="line"></span><br><span class="line">terraform state show [组件名]  # 显示tfstate文件中某个组件的terraform完整语法</span><br><span class="line"></span><br><span class="line">terraform version    # 显示terraform版本</span><br><span class="line"></span><br><span class="line">terraform fmt        # 格式化tf文件</span><br><span class="line"></span><br><span class="line">terraform validate   # 验证terraform文件是否正确</span><br><span class="line"></span><br><span class="line">terraform show       # 查看terraform状态</span><br><span class="line"></span><br><span class="line">terraform workspace  # 管理terraform工作空间</span><br><span class="line"></span><br><span class="line">terraform get        # 下载 &amp; 安装(或升级)模块</span><br><span class="line"></span><br><span class="line">terraform import     # 导入模块</span><br></pre></td></tr></table></figure><p>‍</p><p>‍</p>]]></content>
      
      
      <categories>
          
          <category> AWS Terraform </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AWS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DRF Django 学习笔记</title>
      <link href="/2024/06/16/DRF-Django-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2024/06/16/DRF-Django-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="创建第一个测试项目"><a href="#创建第一个测试项目" class="headerlink" title="创建第一个测试项目"></a>创建第一个测试项目</h2><p>安装djanago</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install Django==<span class="number">4.2</span><span class="number">.1</span></span><br></pre></td></tr></table></figure><p>‍</p><p>创建项目</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">django-admin startproject [project_name]</span><br></pre></td></tr></table></figure><p>可以看到项目已经创建</p><p>​<img src="/2024/06/16/DRF-Django-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20240520212137-og7cyxd.png" alt="image">​</p><p>‍</p><p>然后在pycharm打开项目</p><p>​<img src="/2024/06/16/DRF-Django-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20240520212307-dqj5svv.png" alt="image">​</p><p>‍</p><p>项目基本结构</p><p>​<img src="/2024/06/16/DRF-Django-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20240520212403-15sh3or.png" alt="image">​</p><ul><li>wsgi.py - 配置WSGI兼容的Web服务站点</li><li>asgi.py - 配置ASGI兼容的Web服务站点</li><li>urls.py - 配置站点转发的路径</li><li>settings.py - Django项目的全局配置文件（重要）</li></ul><p>‍</p><p>添加项目模块</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py startapp [module_app]</span><br></pre></td></tr></table></figure><p>‍</p><p>执行以下命令创建第一个模块</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py startapp first_module</span><br></pre></td></tr></table></figure><p>‍</p><p>可以看到第一个模块已经创建成功</p><p>​<img src="/2024/06/16/DRF-Django-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20240520212725-g8y3rur.png" alt="image">​</p><p>‍</p><p>添加到settings.py</p><p>​<img src="/2024/06/16/DRF-Django-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20240524211817-438xeg9.png" alt="image">​</p><p>‍</p><p>模块文件结构</p><p>​<img src="/2024/06/16/DRF-Django-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20240520213459-e7qzjk5.png" alt="image">​</p><ul><li>views.py - 视图层，相当于Web开发中的Controller。用于拦截请求，进行逻辑处理并返回数据</li><li>tests.py - 用于编写测试用例</li><li>models.py - 模型层，用于存放与数据库实体相对应的model</li><li>apps.py -</li><li>admin.py - 一般不用</li></ul><p>‍</p><p>运行项目</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py runserver [port]</span><br></pre></td></tr></table></figure><p>‍</p><p>使用7000端口启动项目</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py runserver <span class="number">7000</span></span><br></pre></td></tr></table></figure><p>‍</p><p>控制台</p><p>​<img src="/2024/06/16/DRF-Django-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20240520214939-lfnc7qk.png" alt="image">​</p><p>‍</p><p>输入URL访问 <a href="http://127.0.0.1:7000/">http://127.0.0.1:7000/</a></p><p>​<img src="/2024/06/16/DRF-Django-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20240520215022-tmwz4k0.png" alt="image">​</p><p>‍</p><p>‍</p><h2 id="连接数据库"><a href="#连接数据库" class="headerlink" title="连接数据库"></a>连接数据库</h2><p>连接MySQL</p><p>先安装mysql客户端</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install mysqlclient</span><br></pre></td></tr></table></figure><p>‍</p><p>启动docker数据库</p><p>通过UI启动</p><p>​<img src="/2024/06/16/DRF-Django-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20240524210048-lomz4iw.png" alt="image">​</p><p>或通过命令启动</p><p>​<img src="/2024/06/16/DRF-Django-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20240524210149-3nlah8m.png" alt="image">​</p><p>‍</p><p>settings.py添加数据库信息</p><p>​<img src="/2024/06/16/DRF-Django-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20240525103915-lf2t7a9.png" alt="image">​</p><p>如果能正常启动则说明配置成功</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 manage.py runserver <span class="number">8000</span></span><br></pre></td></tr></table></figure><p>‍</p><h2 id="DRF实现登录功能"><a href="#DRF实现登录功能" class="headerlink" title="DRF实现登录功能"></a>DRF实现登录功能</h2><h3 id="DRF概述"><a href="#DRF概述" class="headerlink" title="DRF概述"></a>DRF概述</h3><p>DRF(Django rest framework) 基于Django的封装，是Restful风格的开发框架</p><p>官方网站 <a href="https://www.django-rest-framework.org/">https://www.django-rest-framework.org</a></p><p>‍</p><p>安装</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install djangorestframework</span><br></pre></td></tr></table></figure><p>‍</p><p>添加到settings.py</p><p>​<img src="/2024/06/16/DRF-Django-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20240524211854-v56ns98.png" alt="image">​</p><p>‍</p><h3 id="创建user和item模块"><a href="#创建user和item模块" class="headerlink" title="创建user和item模块"></a>创建user和item模块</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">python manage.py startapp user</span><br><span class="line">python manage.py startapp item</span><br></pre></td></tr></table></figure><p>‍</p><p>添加到settings.py</p><p>​<img src="/2024/06/16/DRF-Django-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20240525110511-tt1031h.png" alt="image">​</p><p>‍</p><h3 id="数据表设计"><a href="#数据表设计" class="headerlink" title="数据表设计"></a>数据表设计</h3><p>User表</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Create your models here.</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">User</span>(models.Model):</span><br><span class="line">    <span class="built_in">id</span> = models.AutoField(primary_key=<span class="literal">True</span>, null=<span class="literal">False</span>, unique=<span class="literal">True</span>)</span><br><span class="line">    user_name = models.CharField(null=<span class="literal">False</span>, max_length=<span class="number">255</span>, unique=<span class="literal">True</span>)</span><br><span class="line">    is_delete = models.IntegerField()</span><br><span class="line">    password = models.CharField(null=<span class="literal">False</span>, max_length=<span class="number">255</span>, unique=<span class="literal">False</span>)</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        db_table = <span class="string">&quot;user_tbl&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>‍</p><p>Item表</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">create table `item_tbl`(</span><br><span class="line">  `<span class="built_in">id</span>` <span class="built_in">int</span> NOT NULL AUTO_INCREMENT,</span><br><span class="line">`name` varchar(<span class="number">255</span>) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL,</span><br><span class="line">`price` <span class="built_in">int</span> NULL DEFAULT NULL,</span><br><span class="line">`vendor_id` <span class="built_in">int</span> NULL DEFAULT NULL,</span><br><span class="line">PRIMARY KEY (`<span class="built_in">id</span>`) USING BTREE</span><br><span class="line">)ENGINE = InnoDB AUTO_INCREMENT = <span class="number">4894</span> CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci ROW_FORMAT = Dynamic;</span><br></pre></td></tr></table></figure><p>‍</p><p><strong>User表 - 根据class自动在mysql db创建</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">python manage.py makemigrations</span><br><span class="line">python manage.py migrate</span><br></pre></td></tr></table></figure><p>‍</p><p>数据表已经创建</p><p>​<img src="/2024/06/16/DRF-Django-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20240525110258-ot38hp7.png" alt="image">​</p><p>‍</p><p><strong>Item表 - 在数据库创建表，并自动在项目里生成对应的model class</strong></p><p>​<img src="/2024/06/16/DRF-Django-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20240525111124-9q3y8t1.png" alt="image">​</p><p>‍</p><p>运行命令生成class</p><ul><li>如果需要追加则把<code>&gt;</code>​替换为<code>&gt;&gt;</code>​</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py inspectdb --database default item_tbl &gt; item/models.py</span><br></pre></td></tr></table></figure><p>‍</p><p>对应的class自动生成</p><p>​<img src="/2024/06/16/DRF-Django-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20240525111655-kg6g4qh.png" alt="image">​</p><p>‍</p><p>在user_tbl插入一条记录作为第一个用户</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> user_tbl(user_name, is_delete, password) <span class="keyword">VALUES</span>(<span class="string">&#x27;test1&#x27;</span>, <span class="number">0</span>, <span class="string">&#x27;123456&#x27;</span>);</span><br></pre></td></tr></table></figure><p>‍</p><h3 id="前端UI准备"><a href="#前端UI准备" class="headerlink" title="前端UI准备"></a>前端UI准备</h3><p>前后端分离，使用Vue + axios + Bootstrap快速开发</p><p>UI source code <a href="https://github.com/nauvalazhar/bootstrap-4-login-page">https://github.com/nauvalazhar/bootstrap-4-login-page</a></p><p>index.html引入vue和axios</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@3.4.21&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>‍</p><p>修改django主页</p><p>settings.py</p><p>​<img src="/2024/06/16/DRF-Django-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20240531165314-j1pafek.png" alt="image">​</p><p>‍</p><p>添加路由和controller</p><p>urls.py</p><p>​<img src="/2024/06/16/DRF-Django-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20240531165237-mww0vfw.png" alt="image">​</p><p>views.py</p><p>​<img src="/2024/06/16/DRF-Django-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20240531165219-ej1ga44.png" alt="image">​</p><p>‍</p><p>启动效果</p><p>​<img src="/2024/06/16/DRF-Django-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20240531151106-gh93lfl.png" alt="image">​</p><p>‍</p><h3 id="添加后端数据查询接口"><a href="#添加后端数据查询接口" class="headerlink" title="添加后端数据查询接口"></a>添加后端数据查询接口</h3><p>目的：连接到数据库查询用户表，并且校验用户密码</p><p>项目入口文件urls.py添加user路由</p><p>​<img src="/2024/06/16/DRF-Django-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20240531152238-c1ml76q.png" alt="image">​</p><p>‍</p><p>User模块下添加序列化器</p><p>*文件名必须为<code>serializers.py</code>​</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">from user.models import User</span><br><span class="line">from rest_framework import serializers</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class UserSerializer(serializers.ModelSerializer):</span><br><span class="line">    class Meta:</span><br><span class="line">        model = User</span><br><span class="line">        fields = &quot;__all__&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>‍</p><p>User模块下views.py添加控制器逻辑</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">from django.shortcuts import render</span><br><span class="line">from rest_framework.generics import GenericAPIView</span><br><span class="line">from rest_framework.mixins import CreateModelMixin, RetrieveModelMixin</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">from user.models import User</span><br><span class="line">from user.serializers import UserSerializer</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># Create your views here.</span><br><span class="line">def home_page(request):</span><br><span class="line">    return render(request, &quot;index.html&quot;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># User controller</span><br><span class="line"># post   - 对应db操作insert</span><br><span class="line"># get    - query by id</span><br><span class="line"># put    - update by id</span><br><span class="line"># delete - delete by id</span><br><span class="line">class UserMixinAPIView(GenericAPIView,</span><br><span class="line">                        CreateModelMixin,</span><br><span class="line">                        RetrieveModelMixin):</span><br><span class="line"></span><br><span class="line">    queryset = User.objects</span><br><span class="line">    serializer_class = UserSerializer</span><br><span class="line"></span><br><span class="line">    # 添加用户</span><br><span class="line">    # 添加user方法测试</span><br><span class="line">    def post(self, request):</span><br><span class="line">        return self.create(request)</span><br><span class="line"></span><br><span class="line">    # 查询用户</span><br><span class="line">    def get(self, request, pk):</span><br><span class="line">        return self.retrieve(request, pk)</span><br></pre></td></tr></table></figure><p>‍</p><p>User模块下urls.py添加路由拦截规则</p><p>​<img src="/2024/06/16/DRF-Django-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20240531165409-zoibwhs.png" alt="image">​</p><p>‍</p><p>通过postman测试get接口, user id为1</p><p>可以看到正常返回了db里的用户信息</p><p>​<img src="/2024/06/16/DRF-Django-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20240531160648-oo4nkj6.png" alt="image">​</p><p>‍</p><p>目前可以看到访问api返回的是Json数据，而不是状态码</p><p>需要添加一个工具类，并且将返回结果进行封装</p><p>​<img src="/2024/06/16/DRF-Django-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20240531165446-ta1euqw.png" alt="image">​</p><p>修改user&#x2F;views.py</p><p>​<img src="/2024/06/16/DRF-Django-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20240531165622-705tdqv.png" alt="image">​</p><p>‍</p><p>​<img src="/2024/06/16/DRF-Django-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20240531165536-de2orro.png" alt="image">​</p><h3 id="登录改造"><a href="#登录改造" class="headerlink" title="登录改造"></a>登录改造</h3><p>一般业务场景下，不会用user_id进行登录，而是使用账号和密码</p><p>views.py</p><p>​<img src="/2024/06/16/DRF-Django-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20240531172411-rt9ehxp.png" alt="image">​</p><ul><li><p>这里引入了<code>ViewSetMixin</code>​，用于区分两个get请求</p><ul><li><a href="http://127.0.0.1:8000/user/">http://127.0.0.1:8000/user/</a> -&gt; 转发到<code>login</code>​方法, 同时会发送一个request body</li><li><a href="http://127.0.0.1:8000/user/1-%3E">http://127.0.0.1:8000/user/1-&gt;</a> 转发到<code>get</code>​方法，参数只有一个id，没有request body</li></ul></li></ul><p>‍</p><p>urls.py也要做相应的改动</p><p>​<img src="/2024/06/16/DRF-Django-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20240616105216-aghtber.png" alt="image">​</p><p>可以看到同一个get url可以兼容不同的输入参数</p><p>​<img src="/2024/06/16/DRF-Django-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20240531172635-ki0kfir.png" alt="image">​</p><p>‍</p><p>添加前端返回结果</p><p>通过@click绑定点击事件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@3.4.21&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">const</span> app = <span class="title class_">Vue</span>.<span class="title function_">createApp</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// Method will be executed when the page initialize</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="title function_">created</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// For testing</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// this.loginTest();</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// Mount your method to DOM element</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// Static method</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="attr">methods</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="title function_">loginTest</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="title function_">alert</span>(<span class="string">&quot;Test vue.&quot;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="title function_">userLogin</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">var</span> accountName = $(<span class="string">&#x27;#account-name&#x27;</span>).<span class="title function_">val</span>();</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">var</span> accountPwd = $(<span class="string">&#x27;#account-password&#x27;</span>).<span class="title function_">val</span>();</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">var</span> userLoginInfo = &#123;&#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">userLoginInfo.<span class="property">accountName</span> = accountName;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">userLoginInfo.<span class="property">accountPwd</span> = accountPwd;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">axios.<span class="title function_">post</span>(<span class="string">&#x27;/user/&#x27;</span>, userLoginInfo)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">.<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// debugger;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="variable language_">console</span>.<span class="title function_">log</span>(res.<span class="property">data</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">if</span> (res.<span class="property">data</span>.<span class="property">status</span> == <span class="number">200</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// TODO 登录成功，跳转到首页</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="title function_">alert</span>(<span class="string">&#x27;登录成功&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125; <span class="keyword">else</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="title function_">alert</span>(res.<span class="property">data</span>.<span class="property">msg</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">app.<span class="title function_">mount</span>(<span class="string">&#x27;#loginApp&#x27;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>‍</p><h2 id="JWT认证"><a href="#JWT认证" class="headerlink" title="JWT认证"></a>JWT认证</h2><p>Web app的会话控制</p><ul><li>Cookie  -&gt; 存储在浏览器（客户端）上的小文件，用于保存用户信息的key-value文件</li><li>Session -&gt; 存储在服务端，用于保存用户会话所需的属性及配置信息。如果用户过多会导致占用的内存过大</li><li>Token    -&gt; 用户访问API资源所需的凭证，一般由身份标识、时间戳、用户必要信息等内容组成，是一串加密的字符串</li></ul><p>‍</p><p>响应流程</p><p>‍</p><p>JWT：Json web token</p><p>官网：<a href="https://jwt.io/">https://jwt.io</a></p><p>JWT格式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c</span><br></pre></td></tr></table></figure><p>通过<code>.</code>​连接成的三段字符串</p><p>JWT组成</p><ul><li>第一段：header，指头信息包含算法，字符串是由头信息进行base64加密</li><li>第二段：payload，指系统自定义存储的信息，如用户名、过期时间等，并进行base64加密</li><li>第三段：verify signature，指需要系统定义 “salt”，或者称为密钥</li></ul><p>​<img src="/2024/06/16/DRF-Django-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20231123211650-59w49ap.png" alt="image">​</p><p>‍</p><p>JWT服务端解密</p><p>获取token，例如</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">request.GET.get(<span class="string">&quot;token&quot;</span>)</span><br></pre></td></tr></table></figure><p>然后通过<code>.</code>​把字符串分割成三个部分</p><ul><li>第一步：用base64解密得到<code>header</code>​头部信息</li><li>第二步：用base64解密得到系统中的<code>info</code>​用户数据</li><li>第三步：判断 base64 (header + info + 系统密钥) 是否等于分割后的第三部分</li></ul><p>*要注意保护好系统的密钥</p><p>‍</p><h3 id="安装pyjwt"><a href="#安装pyjwt" class="headerlink" title="安装pyjwt"></a>安装pyjwt</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install pyjwt</span><br></pre></td></tr></table></figure><p>‍</p><h3 id="JWT工具类测试"><a href="#JWT工具类测试" class="headerlink" title="JWT工具类测试"></a>JWT工具类测试</h3><p>Django在初始化项目的时候会自动生成一个key，可以使用这个作为密钥</p><p>也根据自定义算法生成随机字符串</p><p>​<img src="/2024/06/16/DRF-Django-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20240616112951-1zjp40y.png" alt="image">​</p><p>‍</p><p>编写工具类生成token</p><p>设置token过期时间为5分钟</p><p>​<img src="/2024/06/16/DRF-Django-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20240616185722-ugvjkj5.png" alt="image">​</p><p>jwt_demo.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> jwt</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> djangoDRFDemo.settings <span class="keyword">import</span> SECRET_KEY</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">create_token</span>():</span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">&#x27;alg&#x27;</span>: <span class="string">&quot;HS256&quot;</span>,</span><br><span class="line">        <span class="string">&#x27;typ&#x27;</span>: <span class="string">&quot;jwt&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    payload = &#123;</span><br><span class="line">        <span class="string">&#x27;user_id&#x27;</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="string">&#x27;username&#x27;</span>: <span class="string">&quot;test_user&quot;</span>,</span><br><span class="line">        <span class="string">&#x27;exp&#x27;</span>: datetime.datetime.utcnow() + datetime.timedelta(minutes=<span class="number">1</span>)  <span class="comment"># 定义超时时间</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    result = jwt.encode(headers=headers, payload=payload, key=SECRET_KEY, algorithm=<span class="string">&quot;HS256&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_payload</span>(<span class="params">token</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">return</span> jwt.decode(token, SECRET_KEY,algorithms=[<span class="string">&quot;HS256&quot;</span>])</span><br><span class="line">    <span class="keyword">except</span> jwt.exceptions.DecodeError:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;token认证失败&quot;</span>)</span><br><span class="line">    <span class="keyword">except</span> jwt.exceptions.ExpiredSignatureError:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;token已经失效了&quot;</span>)</span><br><span class="line">    <span class="keyword">except</span> jwt.exceptions.InvalidTokenError:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;无效的token&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 加密过程 - 生成token</span></span><br><span class="line">    token = create_token()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;生成token：&quot;</span> + token)</span><br><span class="line"></span><br><span class="line">    payload = get_payload(token)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;获取payload：&quot;</span> + <span class="built_in">str</span>(payload))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 使用旧的token测试验证过程</span></span><br><span class="line">    <span class="comment"># 会抛出Signature has expired异常</span></span><br><span class="line">    expired_token = <span class="string">&quot;&quot;&quot;eyJhbGciOiJIUzI1NiIsInR5cCI6Imp3dCJ9.eyJ1c2VyX2lkIjoxLCJ1c2VybmFtZSI6InRlc3RfdXNlciIsImV4cCI6MTcxODUzNTcyNH0.8miAzL3pG7yMRonfR68kBJdGnUM1JksyriomfdB-zFY&quot;&quot;&quot;</span></span><br><span class="line">    payload = get_payload(expired_token)</span><br></pre></td></tr></table></figure><p>‍</p><p>运行结果</p><p>​<img src="/2024/06/16/DRF-Django-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20240616190642-p6db7se.png" alt="image">​</p><p>‍</p><h3 id="JWT登录功能整合"><a href="#JWT登录功能整合" class="headerlink" title="JWT登录功能整合"></a>JWT登录功能整合</h3><h4 id="首次登录时返回token"><a href="#首次登录时返回token" class="headerlink" title="首次登录时返回token"></a>首次登录时返回token</h4><p>1.添加JWT工具类</p><p>​<img src="/2024/06/16/DRF-Django-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20240616193837-in20fg9.png" alt="image">​</p><p>‍</p><p>2.添加View方法</p><p>​<img src="/2024/06/16/DRF-Django-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20240616193907-luppdc2.png" alt="image">​</p><p>‍</p><p>3.添加路由</p><p>​<img src="/2024/06/16/DRF-Django-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20240616193933-5vh48a9.png" alt="image">​</p><p>‍</p><p>4.测试接口</p><p>成功返回token</p><p>​<img src="/2024/06/16/DRF-Django-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20240616194000-v88wi5c.png" alt="image">​</p><p>‍</p><h4 id="针对非登录接口添加JWT验证"><a href="#针对非登录接口添加JWT验证" class="headerlink" title="针对非登录接口添加JWT验证"></a>针对非登录接口添加JWT验证</h4><p>1.针对url中携带token进行验证</p><p>jwt工具类添加方法</p><p>​<img src="/2024/06/16/DRF-Django-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20240616201642-aawmuiu.png" alt="image">​</p><p>‍</p><p>View中的方法也做相应的修改</p><p>​<img src="/2024/06/16/DRF-Django-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20240616203620-gtorlbn.png" alt="image">​</p><p>‍</p><p>测试</p><p>1.先登录一次拿到token</p><p>​<img src="/2024/06/16/DRF-Django-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20240616202924-6gi24r3.png" alt="image">​</p><p>‍</p><p>2.在参数中使用token，然后发送GET请求</p><p>​<img src="/2024/06/16/DRF-Django-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20240616202946-8wylpft.png" alt="image">​</p><p>‍</p><p>控制台也会打印出token的信息</p><p>​<img src="/2024/06/16/DRF-Django-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20240616203047-lokq4um.png" alt="image">​</p><p>‍</p><p>3.等待token过期后再次发起请求</p><p>​<img src="/2024/06/16/DRF-Django-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20240616203640-pq1rd2p.png" alt="image">​</p><p>控制台显示token失效</p><p>​<img src="/2024/06/16/DRF-Django-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20240616203707-qw67jl3.png" alt="image">​</p><p>‍</p><h4 id="针对请求header中携带token的验证方式"><a href="#针对请求header中携带token的验证方式" class="headerlink" title="针对请求header中携带token的验证方式"></a>针对请求header中携带token的验证方式</h4><p>添加工具类</p><p>​<img src="/2024/06/16/DRF-Django-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20240616204928-23tnv8s.png" alt="image">​</p><p>‍</p><p>View里做相应的修改</p><p>​<img src="/2024/06/16/DRF-Django-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20240616205007-v9zy1hx.png" alt="image">​</p><p>‍</p><p>测试接口，也是先拿到token</p><p>​<img src="/2024/06/16/DRF-Django-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20240616205048-svf0zn0.png" alt="image">​</p><p>‍</p><p>‍</p><h4 id="JWT全局配置"><a href="#JWT全局配置" class="headerlink" title="JWT全局配置"></a>JWT全局配置</h4><p>如果每一个类都添加JWT验证类，不方便维护</p><p>​<img src="/2024/06/16/DRF-Django-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20240616205142-aeipl2x.png" alt="image">​</p><p>‍</p><p>在settings.py中添加全局配置</p><p>所有的url都会被拦截</p><p>​<img src="/2024/06/16/DRF-Django-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20240616205423-o15i58r.png" alt="image">​</p><p>‍</p><p>View里做相应的修改</p><p>注释掉类里的authentication</p><p>​<img src="/2024/06/16/DRF-Django-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20240616205511-oxd492e.png" alt="image">​</p><p>‍</p><p>需要验证的方法里面只需要添加如下代码即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 判断token状态</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> request.user.get(<span class="string">&quot;status&quot;</span>):</span><br><span class="line"><span class="keyword">return</span> ResponseMessage.UserResponse.failed(<span class="string">&quot;User token is invalid.&quot;</span>)</span><br></pre></td></tr></table></figure><p>‍</p><p>测试</p><p>​<img src="/2024/06/16/DRF-Django-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20240616205732-ufbdmfi.png" alt="image">​</p><p>‍</p><h2 id="设置定时任务"><a href="#设置定时任务" class="headerlink" title="设置定时任务"></a>设置定时任务</h2><p>安装APSchedule</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install django_apscheduler</span><br></pre></td></tr></table></figure><p>‍</p><p>settings.py添加</p><p>​<img src="/2024/06/16/DRF-Django-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20240616210113-vl0ot45.png" alt="image">​</p><p>‍</p><p>执行如下命令完成DB的更改</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">python3 manage.py makemigrations</span><br><span class="line">python3 manage.py migrate</span><br></pre></td></tr></table></figure><p>​<img src="/2024/06/16/DRF-Django-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20240616210647-anm7hc6.png" alt="image">​</p><p>‍</p><p>会在DB中创建APScheduler所需的表</p><p>​<img src="/2024/06/16/DRF-Django-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20240616210633-bolnwxx.png" alt="image">​</p><p>‍</p><p>修改app folder中的urls.py</p><p>​<img src="/2024/06/16/DRF-Django-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20240616212555-kl9jbpb.png" alt="image">​</p><p>‍</p><p>启动APP即可看到效果</p><p>代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> apscheduler.schedulers.background <span class="keyword">import</span> BackgroundScheduler</span><br><span class="line"><span class="keyword">from</span> django_apscheduler.jobstores <span class="keyword">import</span> DjangoJobStore,register_job</span><br><span class="line"></span><br><span class="line">scheduler = BackgroundScheduler()</span><br><span class="line">scheduler.add_jobstore(DjangoJobStore(), <span class="string">&quot;default&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@register_job(<span class="params">scheduler, <span class="string">&#x27;interval&#x27;</span>, seconds=<span class="number">5</span>, name=<span class="string">&#x27;auto_hello&#x27;</span>, replace_existing=<span class="literal">True</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test_schedule</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Hello schedule&quot;</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Django </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python Web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java Lucene中文分词</title>
      <link href="/2024/04/15/Lucene%E4%B8%AD%E6%96%87%E5%88%86%E8%AF%8D/"/>
      <url>/2024/04/15/Lucene%E4%B8%AD%E6%96%87%E5%88%86%E8%AF%8D/</url>
      
        <content type="html"><![CDATA[<h1 id="Lucene中文分词"><a href="#Lucene中文分词" class="headerlink" title="Lucene中文分词"></a>Lucene中文分词</h1><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><h3 id="非结构化数据查询方法"><a href="#非结构化数据查询方法" class="headerlink" title="非结构化数据查询方法"></a>非结构化数据查询方法</h3><p>（1）顺序扫描法(Serial Scanning)</p><p>所谓顺序扫描，比如要找内容包含某一个字符串的文件，就是一个文档一个文档的看，对于每一个文档，</p><p>从头看到尾，如果此文档包含此字符串，则此文档为我们要找的文件，接着看下一个文件，</p><p>直到扫描完所有的文件。如利用windows的搜索也可以搜索文件内容，只是相当的慢。</p><p>（2）全文检索(Full-text Search)</p><p>将非结构化数据中的一部分信息提取出来，重新组织，使其变得有一定结构，然后对此有一定结构的数据进行搜索，</p><p>从而达到搜索相对较快的目的。这部分从非结构化数据中提取出的然后重新组织的信息，我们称之索引。</p><p>例如：字典。字典的拼音表和部首检字表就相当于字典的索引，对每一个字的解释是非结构化的，</p><p>如果字典没有音节表和部首检字表，在茫茫辞海中找一个字只能顺序扫描。然而字的某些信息可以提取出来进行结构化处理，</p><p>比如读音，就比较结构化，分声母和韵母，分别只有几种可以一一列举，于是将读音拿出来按一定的顺序排列，</p><p>每一项读音都指向此字的详细解释的页数。我们搜索时按结构化的拼音搜到读音，然后按其指向的页数，便可找到我们的非结构化数据——也即对字的解释。</p><p><strong>这种先建立索引，再对索引进行搜索的过程就叫全文检索(Full-text Search)。</strong></p><p>虽然创建索引的过程也是非常耗时的，但是索引一旦创建就可以多次使用，全文检索主要处理的是查询，所以耗时间创建索引是值得的。</p><p>‍</p><h3 id="什么是Lucene"><a href="#什么是Lucene" class="headerlink" title="什么是Lucene"></a>什么是Lucene</h3><p><strong>Lucene是apache下的一个开放源代码的全文检索引擎工具包</strong>。提供了完整的查询引擎和索引引擎，部分文本分析引擎（英文与德文两种西方语言）。</p><p>对于数据量大、数据结构不固定的数据可采用全文检索方式搜索，比如百度、Google等搜索引擎、论坛站内搜索、电商网站站内搜索等。</p><p><img src="/2024/04/15/Lucene%E4%B8%AD%E6%96%87%E5%88%86%E8%AF%8D/image-20210529105841-4936d6f.png" alt="image.png"></p><p>对搜索的原始内容进行索引构建一个索引库，索引过程包括：确定原始内容即要搜索的内容、采集文档、创建文档、分析文档、索引文档</p><p>从索引库中搜索内容，搜索过程包括：用户通过搜索界面、创建查询、执行搜索，从索引库搜索、渲染搜索结果</p><p>‍</p><h3 id="全文索引"><a href="#全文索引" class="headerlink" title="全文索引"></a>全文索引</h3><p>搜索引擎通常检索的场景是：给定几个关键词，找出包含关键词的文档。怎么快速找到包含某个关键词的文档就成为搜索的关键。所以全文检索引擎一般使用倒排索引，如Lucene。</p><p><strong>全文正排索引</strong></p><p>一句话总结：通过文档找到所有的词，称为正排索引</p><p>正排表是以文档的ID为关键字，表中记录文档中每个字的位置信息，查找时扫描表中每个文档中字的信息直到找出所有包含查询关键字的文档。<br>正排表结构如图所示，这种组织方法在建立索引的时候结构比较简单，建立比较方便且易于维护;因为索引是基于文档建立的，若是有新的文档加入，直接为该文档建立一个新的索引块，挂接在原来索引文件的后面。若是有文档删除，则直接找到该文档号文档对应的索引信息，将其直接删除。但是在查询的时候需对所有的文档进行扫描以确保没有遗漏，这样就使得检索时间大大延长，检索效率低下。<br>尽管正排表的工作原理非常的简单，但是由于其检索效率太低，除非在特定情况下，否则实用性价值不大。</p><p><img src="/2024/04/15/Lucene%E4%B8%AD%E6%96%87%E5%88%86%E8%AF%8D/image-20210602160526-o4n214r.png" alt="image.png"></p><p>‍</p><p><strong>全文倒排索引</strong></p><p>一句话总结：通过词找到所有文档，称为倒排索引</p><p>倒排表以字或词为关键字进行索引，表中关键字所对应的记录表项记录了出现这个字或词的所有文档，一个表项就是一个字表段，它记录该文档的ID和字符在该文档中出现的位置情况。<br>由于每个字或词对应的文档数量在动态变化，所以倒排表的建立和维护都较为复杂，但是在查询的时候由于可以一次得到查询关键字所对应的所有文档，所以效率高于正排表。在全文检索中，检索的快速响应是一个最为关键的性能，而索引建立由于在后台进行，尽管效率相对低一些，但不会影响整个搜索引擎的效率。</p><p><img src="/2024/04/15/Lucene%E4%B8%AD%E6%96%87%E5%88%86%E8%AF%8D/image-20210602160619-ul7mobu.png" alt="image.png"></p><p>‍</p><h3 id="Lucene的评分机制"><a href="#Lucene的评分机制" class="headerlink" title="Lucene的评分机制"></a>Lucene的评分机制</h3><ul><li>结果：（TF-IDF，文档id）</li><li>词频：Term Frequency，简称TF——词在文档中出现的频率</li><li>逆文档频率：Inverse Document Frequency，简称IDF——词在所有文档中出现的频率越低，说明词越重要</li></ul><p>‍</p><h3 id="中文分析器"><a href="#中文分析器" class="headerlink" title="中文分析器"></a>中文分析器</h3><p>Analyzer替换成能处理中文的分析器</p><ul><li>庖丁</li><li>盘古</li><li>IK</li></ul><p>‍</p><h2 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h2><p>主要目标：针对txt小说文件进行关键词查询，关键词为<code>泡沫 贷款</code></p><h3 id="步骤分解"><a href="#步骤分解" class="headerlink" title="步骤分解"></a>步骤分解</h3><p>1.明确查询范围，准备基础数据，并整理到目录下</p><p><img src="/2024/04/15/Lucene%E4%B8%AD%E6%96%87%E5%88%86%E8%AF%8D/image-20210603145755-lvyw6f9.png" alt="image.png"></p><p>【注意】使用<code>IK Analyzer</code>要保证文档是<code>UTF_8</code>编码格式</p><p>‍</p><p>2.创建索引生成器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 创建索引生成器</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> IndexWriter <span class="title function_">createWriter</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 指定索引生成目录并打开</span></span><br><span class="line">    <span class="type">var</span> <span class="variable">path</span> <span class="operator">=</span> Paths.get(INDEX_DIR);</span><br><span class="line">    <span class="type">var</span> <span class="variable">dir</span> <span class="operator">=</span> FSDirectory.open(path);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 指定词法分析器</span></span><br><span class="line">    <span class="type">var</span> <span class="variable">analyzer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">IKAnalyzer</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 建造者模式生成配置</span></span><br><span class="line">    <span class="type">var</span> <span class="variable">writerConfig</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">IndexWriterConfig</span>(analyzer);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">IndexWriter</span>(dir, writerConfig);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果需要使用英文分析器，则<code>new IKAnalyzer()</code>改为<code>new StandardAnalyzer()</code></p><p>‍</p><p>3.读取小说数据，由Lucene引擎在指定目录创建索引</p><p>4.创建索引搜索器</p><p>5.使用索引搜索器进行搜索，注意搜索中的分析器必须与<code>第二步</code>中的<strong>分析器一致</strong></p><blockquote><p>Lucene的查询方式很 丰富，对于数值类型的数据，采取TermRangeQuery的方式，对于String类型的，就可以采取TermQuery等，查询方式了，可以通过采取合适的查询方式，检索到数据。Queryparser这个查询方式包含了其他几种查询方式。</p></blockquote><p>【注意】几种查询方式的比较</p><table><thead><tr><th>TermQuery</th><th>精确查询</th></tr></thead><tbody><tr><td>TermRangeQuery</td><td>查询一个范围</td></tr><tr><td>PrefixQuery</td><td>前缀匹配查询</td></tr><tr><td>WildcardQuery</td><td>通配符查询</td></tr><tr><td>BooleanQuery</td><td>多条件查询</td></tr><tr><td>PhraseQuery</td><td>短语查询</td></tr><tr><td>FuzzyQuery</td><td>模糊查询</td></tr><tr><td>Queryparser</td><td>万能查询（上面的都可以用这个来查询到）</td></tr></tbody></table><p>‍</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>Lucene.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> lucene;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> data.Book;</span><br><span class="line"><span class="keyword">import</span> org.apache.lucene.analysis.standard.StandardAnalyzer;</span><br><span class="line"><span class="keyword">import</span> org.apache.lucene.document.Document;</span><br><span class="line"><span class="keyword">import</span> org.apache.lucene.document.Field;</span><br><span class="line"><span class="keyword">import</span> org.apache.lucene.document.TextField;</span><br><span class="line"><span class="keyword">import</span> org.apache.lucene.index.DirectoryReader;</span><br><span class="line"><span class="keyword">import</span> org.apache.lucene.index.IndexWriter;</span><br><span class="line"><span class="keyword">import</span> org.apache.lucene.index.IndexWriterConfig;</span><br><span class="line"><span class="keyword">import</span> org.apache.lucene.queryparser.classic.ParseException;</span><br><span class="line"><span class="keyword">import</span> org.apache.lucene.queryparser.classic.QueryParser;</span><br><span class="line"><span class="keyword">import</span> org.apache.lucene.search.IndexSearcher;</span><br><span class="line"><span class="keyword">import</span> org.apache.lucene.store.FSDirectory;</span><br><span class="line"><span class="keyword">import</span> org.wltea.analyzer.lucene.IKAnalyzer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Paths;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.LinkedList;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Lucene中文分词</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LuceneCN</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">INDEX_DIR</span> <span class="operator">=</span> <span class="string">&quot;/Users/kalosora/Desktop/novel/index_data&quot;</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">DATA_DIR</span> <span class="operator">=</span> <span class="string">&quot;/Users/kalosora/Desktop/novel/book&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建索引生成器</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> IndexWriter <span class="title function_">createWriter</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 指定索引生成目录并打开</span></span><br><span class="line">        <span class="type">var</span> <span class="variable">path</span> <span class="operator">=</span> Paths.get(INDEX_DIR);</span><br><span class="line">        <span class="type">var</span> <span class="variable">dir</span> <span class="operator">=</span> FSDirectory.open(path);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 指定词法分析器</span></span><br><span class="line">        <span class="type">var</span> <span class="variable">analyzer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">IKAnalyzer</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 建造者模式生成配置</span></span><br><span class="line">        <span class="type">var</span> <span class="variable">writerConfig</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">IndexWriterConfig</span>(analyzer);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">IndexWriter</span>(dir, writerConfig);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建索引</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">createIndex</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取索引生成器</span></span><br><span class="line">        <span class="type">var</span> <span class="variable">writer</span> <span class="operator">=</span> <span class="built_in">this</span>.createWriter();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 采集数据</span></span><br><span class="line">        Map&lt;Integer, Book&gt; bookMap = readFromBooks(DATA_DIR);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// TODO 按章节分割文档</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// TODO 多线程处理以提高效率</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建文档对象</span></span><br><span class="line">        <span class="type">var</span> <span class="variable">documents</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;Document&gt;();</span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;Integer, Book&gt; entry : bookMap.entrySet()) &#123;</span><br><span class="line">            <span class="type">Integer</span> <span class="variable">key</span> <span class="operator">=</span> entry.getKey();</span><br><span class="line">            <span class="type">Book</span> <span class="variable">value</span> <span class="operator">=</span> entry.getValue();</span><br><span class="line"></span><br><span class="line">            <span class="type">var</span> <span class="variable">document</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Document</span>();</span><br><span class="line">            document.add(<span class="keyword">new</span> <span class="title class_">TextField</span>(<span class="string">&quot;Name&quot;</span>,</span><br><span class="line">                    value.getName(),</span><br><span class="line">                    Field.Store.YES));</span><br><span class="line"><span class="comment">//            document.add(new TextField(&quot;Author&quot;,</span></span><br><span class="line"><span class="comment">//                    value.getAuthor(),</span></span><br><span class="line"><span class="comment">//                    Field.Store.YES));</span></span><br><span class="line">            document.add(<span class="keyword">new</span> <span class="title class_">TextField</span>(<span class="string">&quot;Sentence&quot;</span>,</span><br><span class="line">                    value.getSentence(),</span><br><span class="line">                    Field.Store.YES));</span><br><span class="line"></span><br><span class="line">            documents.add(document);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 对文档对象创建索引</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> document : documents) &#123;</span><br><span class="line">            writer.addDocument(document);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        writer.close();</span><br><span class="line">        System.out.println(<span class="string">&quot;全文索引生成完毕!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 从指定目录读取数据</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> bookPath</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Map&lt;Integer, Book&gt; <span class="title function_">readFromBooks</span><span class="params">(String bookPath)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        Map&lt;Integer, Book&gt; bookMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取文件列表</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">booksPath</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(bookPath);</span><br><span class="line">        <span class="type">var</span> <span class="variable">books</span> <span class="operator">=</span> booksPath.listFiles();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 遍历文件</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> book : books) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 获取书名和作者名</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> book.getName();</span><br><span class="line"></span><br><span class="line">            <span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(book);</span><br><span class="line">            <span class="type">BufferedReader</span> <span class="variable">reader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(fis, <span class="string">&quot;UTF-8&quot;</span>));</span><br><span class="line"></span><br><span class="line">            <span class="type">String</span> <span class="variable">context</span> <span class="operator">=</span> reader.readLine();</span><br><span class="line">            <span class="keyword">while</span> (context != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="comment">// 组装书本信息</span></span><br><span class="line">                <span class="type">Book</span> <span class="variable">bookInfo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Book</span>();</span><br><span class="line">                bookInfo.setName(fileName);</span><br><span class="line">                <span class="comment">//bookInfo.setAuthor(bookAuthor);</span></span><br><span class="line">                bookInfo.setSentence(context);</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 入队并读取下一个句子</span></span><br><span class="line">                bookMap.put(count, bookInfo);</span><br><span class="line">                context = reader.readLine();</span><br><span class="line"></span><br><span class="line">                count++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> bookMap;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建索引搜索器</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> IndexSearcher <span class="title function_">createSearcher</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 指定索引生成目录并打开</span></span><br><span class="line">        <span class="type">var</span> <span class="variable">path</span> <span class="operator">=</span> Paths.get(INDEX_DIR);</span><br><span class="line">        <span class="type">var</span> <span class="variable">dir</span> <span class="operator">=</span> FSDirectory.open(path);</span><br><span class="line">        <span class="type">var</span> <span class="variable">reader</span> <span class="operator">=</span> DirectoryReader.open(dir);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">IndexSearcher</span>(reader);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 从索引搜索</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> keyWord</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">queryIndex</span><span class="params">(String keyWord)</span> <span class="keyword">throws</span> ParseException, IOException &#123;</span><br><span class="line">        <span class="type">var</span> <span class="variable">query</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">QueryParser</span>(<span class="string">&quot;Sentence&quot;</span>, <span class="keyword">new</span> <span class="title class_">IKAnalyzer</span>()).parse(keyWord);</span><br><span class="line"></span><br><span class="line">        <span class="type">var</span> <span class="variable">searcher</span> <span class="operator">=</span> <span class="built_in">this</span>.createSearcher();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 仅查询前10条</span></span><br><span class="line">        <span class="type">var</span> <span class="variable">docs</span> <span class="operator">=</span> searcher.search(query, <span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 输出结果</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> scoreDoc : docs.scoreDocs) &#123;</span><br><span class="line">            <span class="type">var</span> <span class="variable">docID</span> <span class="operator">=</span> scoreDoc.doc;</span><br><span class="line">            <span class="type">var</span> <span class="variable">doc</span> <span class="operator">=</span> searcher.doc(docID);</span><br><span class="line"><span class="comment">//            System.out.format(&quot;%s %s %s %s\n&quot;, scoreDoc.score,</span></span><br><span class="line"><span class="comment">//                    doc.get(&quot;Author&quot;),</span></span><br><span class="line"><span class="comment">//                    doc.get(&quot;Name&quot;),</span></span><br><span class="line"><span class="comment">//                    doc.get(&quot;Sentence&quot;));</span></span><br><span class="line"></span><br><span class="line">            System.out.format(<span class="string">&quot;%s %s %s\n&quot;</span>, scoreDoc.score,</span><br><span class="line">                    doc.get(<span class="string">&quot;Name&quot;</span>),</span><br><span class="line">                    doc.get(<span class="string">&quot;Sentence&quot;</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>‍</p><p>main.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 中文分词入口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">main</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, ParseException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">LuceneCN</span> <span class="variable">lucene</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LuceneCN</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建索引</span></span><br><span class="line">        <span class="comment">//lucene.createIndex();</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 查询关键词</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">keyword</span> <span class="operator">=</span> <span class="string">&quot;贷款 泡沫&quot;</span>;</span><br><span class="line">        lucene.queryIndex(keyword);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>‍</p><p>pom.xml</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="line">&lt;project xmlns=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span><br><span class="line">         xmlns:xsi=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="line">         xsi:schemaLocation=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><br><span class="line">    &lt;modelVersion&gt;<span class="number">4.0</span><span class="number">.0</span>&lt;/modelVersion&gt;</span><br><span class="line"></span><br><span class="line">    &lt;groupId&gt;org.example&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;LuceneX&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;<span class="number">1.0</span>-SNAPSHOT&lt;/version&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line">        &lt;!-- Lucene Lib --&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.apache.lucene&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;lucene-memory&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;<span class="number">7.1</span><span class="number">.0</span>&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.apache.lucene&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;lucene-core&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;<span class="number">7.1</span><span class="number">.0</span>&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.apache.lucene&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;lucene-queryparser&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;<span class="number">7.1</span><span class="number">.0</span>&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- IK 中文分词 --&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;com.github.magese&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;ik-analyzer&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;<span class="number">7.4</span><span class="number">.0</span>&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">    &lt;/dependencies&gt;</span><br><span class="line"></span><br><span class="line">    &lt;build&gt;</span><br><span class="line">        &lt;plugins&gt;</span><br><span class="line">            &lt;plugin&gt;</span><br><span class="line">                &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;</span><br><span class="line">                &lt;configuration&gt;</span><br><span class="line">                    &lt;source&gt;<span class="number">12</span>&lt;/source&gt;</span><br><span class="line">                    &lt;target&gt;<span class="number">12</span>&lt;/target&gt;</span><br><span class="line">                &lt;/configuration&gt;</span><br><span class="line">            &lt;/plugin&gt;</span><br><span class="line">        &lt;/plugins&gt;</span><br><span class="line">    &lt;/build&gt;</span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure><p>‍</p><h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><p>输出目录</p><p><img src="/2024/04/15/Lucene%E4%B8%AD%E6%96%87%E5%88%86%E8%AF%8D/image-20210603151149-q6tptou.png" alt="image.png"></p><p>‍</p><p>运行结果</p><p><img src="/2024/04/15/Lucene%E4%B8%AD%E6%96%87%E5%88%86%E8%AF%8D/image-20210603151130-diflmqr.png" alt="image.png"></p><p>‍</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://zhuanlan.zhihu.com/p/47764999">Java 全文检索引擎工具包 Lucene 原理解析</a></p><p>‍</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java Core </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>旅程还在继续</title>
      <link href="/2024/03/29/%E6%97%85%E7%A8%8B%E8%BF%98%E5%9C%A8%E7%BB%A7%E7%BB%AD/"/>
      <url>/2024/03/29/%E6%97%85%E7%A8%8B%E8%BF%98%E5%9C%A8%E7%BB%A7%E7%BB%AD/</url>
      
        <content type="html"><![CDATA[<h1 id="旅程还在继续"><a href="#旅程还在继续" class="headerlink" title="旅程还在继续"></a>旅程还在继续</h1><p>一年半没有更新博客，原因是Mac重置数据以后，我发现博客数据没有备份…</p><p>还好有记下hexo配置的过程，于是只能从头来过</p><p>Hexo NEXT主题也从原来的5.X升级到了7.X</p><p>​<img src="/2024/03/29/%E6%97%85%E7%A8%8B%E8%BF%98%E5%9C%A8%E7%BB%A7%E7%BB%AD/image-20240317124230-zpap1uq.png" alt="image">​</p><p>‍</p><p>旅程还在继续，学习也不能止步。</p>]]></content>
      
      
      <categories>
          
          <category> 随记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Oracle 开发常用代码</title>
      <link href="/2022/06/14/Oracle%20%E5%BC%80%E5%8F%91%E5%B8%B8%E7%94%A8%E4%BB%A3%E7%A0%81/"/>
      <url>/2022/06/14/Oracle%20%E5%BC%80%E5%8F%91%E5%B8%B8%E7%94%A8%E4%BB%A3%E7%A0%81/</url>
      
        <content type="html"><![CDATA[<h2 id="基本"><a href="#基本" class="headerlink" title="基本"></a>基本</h2><h3 id="获取环境信息"><a href="#获取环境信息" class="headerlink" title="获取环境信息"></a>获取环境信息</h3><p>USEREVN()方法返回用户环境的信息。</p><p>option 可以是 ENTRYID,SESSIONID,TERMINAL,ISDBA,LANGUAGE,CLIENT_INFO,LANG,VSIZE</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--查看当前用户是否是 DBA，如果是返回 true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> userevn(<span class="string">&#x27;isbda&#x27;</span>) <span class="keyword">from</span> dual;</span><br><span class="line"></span><br><span class="line"><span class="comment">--返回 SESSION 会话 ID </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> userevn(<span class="string">&#x27;sessionid&#x27;</span>) <span class="keyword">from</span> dual;</span><br><span class="line"></span><br><span class="line"><span class="comment">--返回多人会话人数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> userevn(<span class="string">&#x27;entryid&#x27;</span>) <span class="keyword">from</span> dual;</span><br><span class="line"></span><br><span class="line"><span class="comment">--返回当前 instance 标志</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> userevn(<span class="string">&#x27;instance&#x27;</span>) <span class="keyword">from</span> dual;</span><br><span class="line"></span><br><span class="line"><span class="comment">--返回当前语言环境</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> userevn(<span class="string">&#x27;language&#x27;</span>) <span class="keyword">from</span> dual;</span><br><span class="line"></span><br><span class="line"><span class="comment">--返回当前语言环境的缩写，如 ZHS,EN 等</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> userevn(<span class="string">&#x27;lang&#x27;</span>) <span class="keyword">from</span> dual;</span><br><span class="line"></span><br><span class="line"><span class="comment">--返回用户终端或机器标识</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> userevn(<span class="string">&#x27;terminal&#x27;</span>) <span class="keyword">from</span> dual;</span><br><span class="line"></span><br><span class="line"><span class="comment">--返回传入字符的字节数，以 X 为例，返回的就是 X 字符的大小</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> userevn(X) <span class="keyword">from</span> dual;</span><br></pre></td></tr></table></figure><p>‍</p><h3 id="截取到某一个字符串前面的内容"><a href="#截取到某一个字符串前面的内容" class="headerlink" title="截取到某一个字符串前面的内容"></a>截取到某一个字符串前面的内容</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> substr(<span class="string">&#x27;210-1106000001&#x27;</span>,<span class="number">1</span>,instr(<span class="string">&#x27;210-1106000001&#x27;</span>,<span class="string">&#x27;-&#x27;</span>)<span class="number">-1</span>) <span class="keyword">from</span> dual;</span><br></pre></td></tr></table></figure><p>‍</p><h3 id="设置当前会话日期格式"><a href="#设置当前会话日期格式" class="headerlink" title="设置当前会话日期格式"></a>设置当前会话日期格式</h3><p>设置当前会话日期格式为英文</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> session <span class="keyword">set</span> nls_date_language<span class="operator">=</span>american;</span><br></pre></td></tr></table></figure><p>‍</p><h3 id="开启控制台输出"><a href="#开启控制台输出" class="headerlink" title="开启控制台输出"></a>开启控制台输出</h3><p>用于使 <code>dbms_output.put_line()</code> 生效</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span> serveroutput <span class="keyword">on</span>;</span><br><span class="line"><span class="operator">/</span></span><br></pre></td></tr></table></figure><p>‍</p><h3 id="关闭参数输入"><a href="#关闭参数输入" class="headerlink" title="关闭参数输入"></a>关闭参数输入</h3><p>使Oracle的参数符号 <code>&amp;</code> 失效</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span> <span class="keyword">define</span> off;</span><br><span class="line"><span class="operator">/</span></span><br></pre></td></tr></table></figure><p>‍</p><h2 id="数据库指标"><a href="#数据库指标" class="headerlink" title="数据库指标"></a>数据库指标</h2><h3 id="查看占用表空间大小"><a href="#查看占用表空间大小" class="headerlink" title="查看占用表空间大小"></a>查看占用表空间大小</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> se.username,</span><br><span class="line">       se.sid,</span><br><span class="line">       su.extents,</span><br><span class="line">       su.blocks <span class="operator">*</span> to_number(rtrim(p.value)) <span class="keyword">AS</span> Space,</span><br><span class="line">       tablespace,</span><br><span class="line">       segtype,</span><br><span class="line">       sql_text</span><br><span class="line">  <span class="keyword">FROM</span> v$sort_usage su, v$<span class="keyword">parameter</span> p, v$session se, v$<span class="keyword">sql</span> s</span><br><span class="line"> <span class="keyword">WHERE</span> p.name <span class="operator">=</span> <span class="string">&#x27;db_block_size&#x27;</span></span><br><span class="line">   <span class="keyword">AND</span> su.session_addr <span class="operator">=</span> se.saddr</span><br><span class="line">   <span class="keyword">AND</span> s.hash_value <span class="operator">=</span> su.sqlhash</span><br><span class="line">   <span class="keyword">AND</span> s.address <span class="operator">=</span> su.sqladdr</span><br><span class="line"> <span class="keyword">ORDER</span> <span class="keyword">BY</span> se.username, se.sid;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>‍</p><h3 id="查看占用的磁盘空间"><a href="#查看占用的磁盘空间" class="headerlink" title="查看占用的磁盘空间"></a>查看占用的磁盘空间</h3><p>对于产生大量DML的场景，会需要监控磁盘空间。如果空间爆满会导致Oracle宕机。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> TRUNC(first_time) &quot;Date&quot;,</span><br><span class="line">       to_char(first_time, <span class="string">&#x27;Dy&#x27;</span>) &quot;Day&quot;,</span><br><span class="line">       <span class="built_in">COUNT</span>(<span class="number">1</span>) &quot;Total(GB)&quot;,</span><br><span class="line">       <span class="built_in">SUM</span>(DECODE(to_char(first_time, <span class="string">&#x27;hh24&#x27;</span>), <span class="string">&#x27;00&#x27;</span>, <span class="number">1</span>, <span class="number">0</span>)) &quot;h0&quot;,</span><br><span class="line">       <span class="built_in">SUM</span>(DECODE(to_char(first_time, <span class="string">&#x27;hh24&#x27;</span>), <span class="string">&#x27;01&#x27;</span>, <span class="number">1</span>, <span class="number">0</span>)) &quot;h1&quot;,</span><br><span class="line">       <span class="built_in">SUM</span>(DECODE(to_char(first_time, <span class="string">&#x27;hh24&#x27;</span>), <span class="string">&#x27;02&#x27;</span>, <span class="number">1</span>, <span class="number">0</span>)) &quot;h2&quot;,</span><br><span class="line">       <span class="built_in">SUM</span>(DECODE(to_char(first_time, <span class="string">&#x27;hh24&#x27;</span>), <span class="string">&#x27;03&#x27;</span>, <span class="number">1</span>, <span class="number">0</span>)) &quot;h3&quot;,</span><br><span class="line">       <span class="built_in">SUM</span>(DECODE(to_char(first_time, <span class="string">&#x27;hh24&#x27;</span>), <span class="string">&#x27;04&#x27;</span>, <span class="number">1</span>, <span class="number">0</span>)) &quot;h4&quot;,</span><br><span class="line">       <span class="built_in">SUM</span>(DECODE(to_char(first_time, <span class="string">&#x27;hh24&#x27;</span>), <span class="string">&#x27;05&#x27;</span>, <span class="number">1</span>, <span class="number">0</span>)) &quot;h5&quot;,</span><br><span class="line">       <span class="built_in">SUM</span>(DECODE(to_char(first_time, <span class="string">&#x27;hh24&#x27;</span>), <span class="string">&#x27;06&#x27;</span>, <span class="number">1</span>, <span class="number">0</span>)) &quot;h6&quot;,</span><br><span class="line">       <span class="built_in">SUM</span>(DECODE(to_char(first_time, <span class="string">&#x27;hh24&#x27;</span>), <span class="string">&#x27;07&#x27;</span>, <span class="number">1</span>, <span class="number">0</span>)) &quot;h7&quot;,</span><br><span class="line">       <span class="built_in">SUM</span>(DECODE(to_char(first_time, <span class="string">&#x27;hh24&#x27;</span>), <span class="string">&#x27;08&#x27;</span>, <span class="number">1</span>, <span class="number">0</span>)) &quot;h8&quot;,</span><br><span class="line">       <span class="built_in">SUM</span>(DECODE(to_char(first_time, <span class="string">&#x27;hh24&#x27;</span>), <span class="string">&#x27;09&#x27;</span>, <span class="number">1</span>, <span class="number">0</span>)) &quot;h9&quot;,</span><br><span class="line">       <span class="built_in">SUM</span>(DECODE(to_char(first_time, <span class="string">&#x27;hh24&#x27;</span>), <span class="string">&#x27;10&#x27;</span>, <span class="number">1</span>, <span class="number">0</span>)) &quot;h10&quot;,</span><br><span class="line">       <span class="built_in">SUM</span>(DECODE(to_char(first_time, <span class="string">&#x27;hh24&#x27;</span>), <span class="string">&#x27;11&#x27;</span>, <span class="number">1</span>, <span class="number">0</span>)) &quot;h11&quot;,</span><br><span class="line">       <span class="built_in">SUM</span>(DECODE(to_char(first_time, <span class="string">&#x27;hh24&#x27;</span>), <span class="string">&#x27;12&#x27;</span>, <span class="number">1</span>, <span class="number">0</span>)) &quot;h12&quot;,</span><br><span class="line">       <span class="built_in">SUM</span>(DECODE(to_char(first_time, <span class="string">&#x27;hh24&#x27;</span>), <span class="string">&#x27;13&#x27;</span>, <span class="number">1</span>, <span class="number">0</span>)) &quot;h13&quot;,</span><br><span class="line">       <span class="built_in">SUM</span>(DECODE(to_char(first_time, <span class="string">&#x27;hh24&#x27;</span>), <span class="string">&#x27;14&#x27;</span>, <span class="number">1</span>, <span class="number">0</span>)) &quot;h14&quot;,</span><br><span class="line">       <span class="built_in">SUM</span>(DECODE(to_char(first_time, <span class="string">&#x27;hh24&#x27;</span>), <span class="string">&#x27;15&#x27;</span>, <span class="number">1</span>, <span class="number">0</span>)) &quot;h15&quot;,</span><br><span class="line">       <span class="built_in">SUM</span>(DECODE(to_char(first_time, <span class="string">&#x27;hh24&#x27;</span>), <span class="string">&#x27;16&#x27;</span>, <span class="number">1</span>, <span class="number">0</span>)) &quot;h16&quot;,</span><br><span class="line">       <span class="built_in">SUM</span>(DECODE(to_char(first_time, <span class="string">&#x27;hh24&#x27;</span>), <span class="string">&#x27;17&#x27;</span>, <span class="number">1</span>, <span class="number">0</span>)) &quot;h17&quot;,</span><br><span class="line">       <span class="built_in">SUM</span>(DECODE(to_char(first_time, <span class="string">&#x27;hh24&#x27;</span>), <span class="string">&#x27;18&#x27;</span>, <span class="number">1</span>, <span class="number">0</span>)) &quot;h18&quot;,</span><br><span class="line">       <span class="built_in">SUM</span>(DECODE(to_char(first_time, <span class="string">&#x27;hh24&#x27;</span>), <span class="string">&#x27;19&#x27;</span>, <span class="number">1</span>, <span class="number">0</span>)) &quot;h19&quot;,</span><br><span class="line">       <span class="built_in">SUM</span>(DECODE(to_char(first_time, <span class="string">&#x27;hh24&#x27;</span>), <span class="string">&#x27;20&#x27;</span>, <span class="number">1</span>, <span class="number">0</span>)) &quot;h20&quot;,</span><br><span class="line">       <span class="built_in">SUM</span>(DECODE(to_char(first_time, <span class="string">&#x27;hh24&#x27;</span>), <span class="string">&#x27;21&#x27;</span>, <span class="number">1</span>, <span class="number">0</span>)) &quot;h21&quot;,</span><br><span class="line">       <span class="built_in">SUM</span>(DECODE(to_char(first_time, <span class="string">&#x27;hh24&#x27;</span>), <span class="string">&#x27;22&#x27;</span>, <span class="number">1</span>, <span class="number">0</span>)) &quot;h22&quot;,</span><br><span class="line">       <span class="built_in">SUM</span>(DECODE(to_char(first_time, <span class="string">&#x27;hh24&#x27;</span>), <span class="string">&#x27;23&#x27;</span>, <span class="number">1</span>, <span class="number">0</span>)) &quot;h23&quot;,</span><br><span class="line">       ROUND(<span class="built_in">COUNT</span>(<span class="number">1</span>) <span class="operator">/</span> <span class="number">24</span>, <span class="number">2</span>) &quot;Avg&quot;</span><br><span class="line">  <span class="keyword">FROM</span> gv$log_history</span><br><span class="line"> <span class="keyword">WHERE</span> thread# <span class="operator">=</span> inst_id</span><br><span class="line">   <span class="keyword">AND</span> TRUNC(first_time) <span class="operator">&gt;=</span> to_date(<span class="string">&#x27;2022/01/25&#x27;</span>, <span class="string">&#x27;yyyy/mm/dd&#x27;</span>)</span><br><span class="line"> <span class="keyword">GROUP</span> <span class="keyword">BY</span> TRUNC(first_time), to_char(first_time, <span class="string">&#x27;Dy&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>‍</p><h3 id="查询锁住的表"><a href="#查询锁住的表" class="headerlink" title="查询锁住的表"></a>查询锁住的表</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> dob.object_name &quot;对象名称&quot;,</span><br><span class="line">       lo.session_id &quot;会话ID&quot;,</span><br><span class="line">       vss.serial# &quot;穿行&quot;,</span><br><span class="line">       vss.action &quot;职责&quot;,</span><br><span class="line">       vss.module &quot;表单&quot;,</span><br><span class="line">       vss.blocking_session &quot;等待其他会话ID&quot;,</span><br><span class="line">       vss.client_identifier &quot;用户&quot;,</span><br><span class="line">       vql.sql_text &quot;SQL语句&quot;,</span><br><span class="line">       <span class="string">&#x27;alter system kill session &#x27;</span> <span class="operator">||</span> <span class="string">&#x27;&#x27;&#x27;&#x27;</span> <span class="operator">||</span> lo.session_id <span class="operator">||</span> <span class="string">&#x27;,&#x27;</span> <span class="operator">||</span> vss.serial# <span class="operator">||</span> <span class="string">&#x27;&#x27;&#x27;immediate;&#x27;</span> &quot;命令&quot;</span><br><span class="line">  <span class="keyword">FROM</span> v$locked_object lo,</span><br><span class="line">       dba_objects     dob,</span><br><span class="line">       v$session       vss,</span><br><span class="line">       v$process       vps,</span><br><span class="line">       v$<span class="keyword">sql</span>           vql</span><br><span class="line"> <span class="keyword">WHERE</span> lo.object_id <span class="operator">=</span> dob.object_id</span><br><span class="line">   <span class="keyword">AND</span> lo.session_id <span class="operator">=</span> vss.sid</span><br><span class="line">   <span class="keyword">AND</span> vss.paddr <span class="operator">=</span> vps.addr</span><br><span class="line">   <span class="keyword">AND</span> vql.sql_id(<span class="operator">+</span>) <span class="operator">=</span> vss.sql_id</span><br><span class="line">   <span class="comment">--AND OBJECT_NAME = &#x27;AP_INVOICES_ALL&#x27;</span></span><br><span class="line"> <span class="keyword">ORDER</span> <span class="keyword">BY</span> lo.session_id;</span><br></pre></td></tr></table></figure><p>‍</p><h2 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h2><h3 id="数字转换成大写"><a href="#数字转换成大写" class="headerlink" title="数字转换成大写"></a>数字转换成大写</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FUNCTION</span> convert_money(input_nbr1 NUMBER) <span class="keyword">RETURN</span> VARCHAR2 <span class="keyword">IS</span></span><br><span class="line">    input_nbr_bak  NUMBER(<span class="number">20</span>);</span><br><span class="line">    num_character  VARCHAR2(<span class="number">200</span>) :<span class="operator">=</span> <span class="string">&#x27;零壹贰叁肆伍陆柒捌玖&#x27;</span>;</span><br><span class="line">    unit_character VARCHAR2(<span class="number">400</span>) :<span class="operator">=</span> <span class="string">&#x27;分角圆拾佰仟万拾佰仟亿拾佰仟万拾佰仟亿&#x27;</span>;</span><br><span class="line">    output_string  VARCHAR2(<span class="number">1000</span>) :<span class="operator">=</span> <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    remain_nbr     NUMBER(<span class="number">20</span>);</span><br><span class="line">    bit_num        NUMBER(<span class="number">20</span>);</span><br><span class="line">    bit_unit       VARCHAR2(<span class="number">20</span>);</span><br><span class="line">    bit_indic      NUMBER(<span class="number">1</span>) :<span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    i              NUMBER(<span class="number">2</span>) :<span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    spe_unit       VARCHAR2(<span class="number">20</span>) :<span class="operator">=</span> <span class="string">&#x27;A&#x27;</span>;</span><br><span class="line">    sign_indic     VARCHAR2(<span class="number">10</span>);</span><br><span class="line">    input_nbr      NUMBER(<span class="number">38</span>);</span><br><span class="line">  <span class="keyword">BEGIN</span></span><br><span class="line">    input_nbr :<span class="operator">=</span> input_nbr1 <span class="operator">*</span> <span class="number">100</span>;</span><br><span class="line">    IF input_nbr <span class="operator">=</span> <span class="number">0</span> <span class="keyword">THEN</span></span><br><span class="line">      <span class="keyword">RETURN</span> <span class="string">&#x27;零圆整&#x27;</span>;</span><br><span class="line">    ELSIF input_nbr <span class="operator">&gt;</span> <span class="number">0</span> <span class="keyword">THEN</span></span><br><span class="line">      sign_indic    :<span class="operator">=</span> <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">      input_nbr_bak :<span class="operator">=</span> input_nbr;</span><br><span class="line">    ELSIF input_nbr <span class="operator">&lt;</span> <span class="number">0</span> <span class="keyword">THEN</span></span><br><span class="line">      sign_indic    :<span class="operator">=</span> <span class="string">&#x27;1&#x27;</span>;</span><br><span class="line">      input_nbr_bak :<span class="operator">=</span> <span class="operator">-</span>input_nbr;</span><br><span class="line">    <span class="keyword">END</span> IF;</span><br><span class="line">    LOOP</span><br><span class="line">      remain_nbr    :<span class="operator">=</span> <span class="built_in">floor</span>(input_nbr_bak <span class="operator">/</span> <span class="number">10</span>);</span><br><span class="line">      bit_num       :<span class="operator">=</span> input_nbr_bak <span class="operator">-</span> remain_nbr <span class="operator">*</span> <span class="number">10</span>;</span><br><span class="line">      input_nbr_bak :<span class="operator">=</span> remain_nbr;</span><br><span class="line">      bit_unit      :<span class="operator">=</span> rtrim(substr(unit_character,</span><br><span class="line">                                    i <span class="operator">+</span> <span class="number">1</span>,</span><br><span class="line">                                    <span class="number">1</span>));</span><br><span class="line">      IF bit_num <span class="operator">&gt;</span> <span class="number">0</span> <span class="keyword">THEN</span></span><br><span class="line"> </span><br><span class="line">        bit_indic :<span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        IF i <span class="operator">=</span> <span class="number">6</span></span><br><span class="line">           <span class="keyword">OR</span> i <span class="operator">=</span> <span class="number">14</span> <span class="keyword">THEN</span></span><br><span class="line"> </span><br><span class="line">          spe_unit :<span class="operator">=</span> <span class="string">&#x27;万&#x27;</span>;</span><br><span class="line">        ELSIF (i <span class="operator">&gt;=</span> <span class="number">7</span> <span class="keyword">AND</span> i <span class="operator">&lt;=</span> <span class="number">9</span>)</span><br><span class="line">              <span class="keyword">OR</span> (i <span class="operator">&gt;=</span> <span class="number">15</span> <span class="keyword">AND</span> i <span class="operator">&lt;=</span> <span class="number">17</span>) <span class="keyword">THEN</span></span><br><span class="line"> </span><br><span class="line">          IF spe_unit <span class="operator">!=</span> <span class="string">&#x27;万&#x27;</span> <span class="keyword">THEN</span></span><br><span class="line"> </span><br><span class="line">            output_string :<span class="operator">=</span> <span class="string">&#x27;万&#x27;</span> <span class="operator">||</span> output_string;</span><br><span class="line">            spe_unit      :<span class="operator">=</span> <span class="string">&#x27;万&#x27;</span>;</span><br><span class="line">          <span class="keyword">END</span> IF;</span><br><span class="line">        <span class="keyword">END</span> IF;</span><br><span class="line">        output_string :<span class="operator">=</span> substr(num_character,</span><br><span class="line">                                bit_num <span class="operator">+</span> <span class="number">1</span>,</span><br><span class="line">                                <span class="number">1</span>) <span class="operator">||</span> bit_unit <span class="operator">||</span> output_string;</span><br><span class="line">      <span class="keyword">ELSE</span></span><br><span class="line"> </span><br><span class="line">        IF bit_indic <span class="operator">=</span> <span class="number">1</span> <span class="keyword">THEN</span></span><br><span class="line"> </span><br><span class="line">          output_string :<span class="operator">=</span> <span class="string">&#x27;零&#x27;</span> <span class="operator">||</span> output_string;</span><br><span class="line">        <span class="keyword">END</span> IF;</span><br><span class="line">        IF bit_unit <span class="keyword">IN</span> (<span class="string">&#x27;圆&#x27;</span>,</span><br><span class="line">                        <span class="string">&#x27;亿&#x27;</span>) <span class="keyword">THEN</span></span><br><span class="line"> </span><br><span class="line">          spe_unit      :<span class="operator">=</span> bit_unit;</span><br><span class="line">          output_string :<span class="operator">=</span> bit_unit <span class="operator">||</span> output_string;</span><br><span class="line">        <span class="keyword">END</span> IF;</span><br><span class="line">        bit_indic :<span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">END</span> IF;</span><br><span class="line">      i :<span class="operator">=</span> i <span class="operator">+</span> <span class="number">1</span>;</span><br><span class="line">      EXIT <span class="keyword">WHEN</span> input_nbr_bak <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">END</span> LOOP;</span><br><span class="line">    IF <span class="built_in">MOD</span>(input_nbr,</span><br><span class="line">           <span class="number">100</span>) <span class="operator">=</span> <span class="number">0</span> <span class="keyword">THEN</span></span><br><span class="line"> </span><br><span class="line">      output_string :<span class="operator">=</span> output_string <span class="operator">||</span> <span class="string">&#x27;整&#x27;</span>;</span><br><span class="line">    <span class="keyword">END</span> IF;</span><br><span class="line">    IF sign_indic <span class="operator">=</span> <span class="string">&#x27;1&#x27;</span> <span class="keyword">THEN</span></span><br><span class="line">      output_string :<span class="operator">=</span> <span class="string">&#x27;负&#x27;</span> <span class="operator">||</span> output_string;</span><br><span class="line">    <span class="keyword">END</span> IF;</span><br><span class="line">    <span class="keyword">RETURN</span> output_string;</span><br><span class="line">  <span class="keyword">END</span>;</span><br></pre></td></tr></table></figure><p>‍</p>]]></content>
      
      
      <categories>
          
          <category> Database </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Oracle </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java 单例模式的安全性</title>
      <link href="/2022/05/26/Java%20%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F%E7%9A%84%E5%AE%89%E5%85%A8%E6%80%A7/"/>
      <url>/2022/05/26/Java%20%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F%E7%9A%84%E5%AE%89%E5%85%A8%E6%80%A7/</url>
      
        <content type="html"><![CDATA[<h2 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h2><p>单例模式是指，某个对象在运行时仅存在一个，并对外提供统一访问方式。</p><ul><li>饿汉模式：类被加载的时候就立即初始化并创建唯一实例</li><li>懒汉模式：在被首次调用的时候才创建唯一实例。加入双重检查锁机制能保证线程安全。</li></ul><p>‍</p><h3 id="饿汉单例模式"><a href="#饿汉单例模式" class="headerlink" title="饿汉单例模式"></a>饿汉单例模式</h3><p>实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 饿汉单例模式</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BeanContainerStaving</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">BeanContainerStaving</span> <span class="variable">instance</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BeanContainerStaving</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 禁止访问构造方法</span></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">BeanContainerStaving</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> BeanContainerStaving <span class="title function_">getInstance</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>‍</p><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SingletonTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>()</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;Thread 1 get instance&quot;</span>);</span><br><span class="line">                System.out.println(BeanContainerStaving.getInstance());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>()</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;Thread 2 get instance&quot;</span>);</span><br><span class="line">                System.out.println(BeanContainerStaving.getInstance());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        thread2.start();</span><br><span class="line">        thread1.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>‍</p><p>结果</p><p>保证获取到的是唯一实例</p><p><img src="/2022/05/26/Java%20%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F%E7%9A%84%E5%AE%89%E5%85%A8%E6%80%A7/image-20220527094219-vqdoi4y.png" alt="image.png"></p><p>‍</p><h3 id="懒汉单例模式"><a href="#懒汉单例模式" class="headerlink" title="懒汉单例模式"></a>懒汉单例模式</h3><p>实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 懒汉单例模式</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BeanContainerLazy</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 防止指令重排序</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span>  BeanContainerLazy instance;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">BeanContainerLazy</span><span class="params">()</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> BeanContainerLazy <span class="title function_">getInstance</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 双重检测</span></span><br><span class="line">        <span class="keyword">if</span>(instance == <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (BeanContainerLazy.class)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(instance == <span class="literal">null</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    instance = <span class="keyword">new</span> <span class="title class_">BeanContainerLazy</span>();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>‍</p><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SingletonTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>()&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;Thread 1 get instance: &quot;</span> + BeanContainerLazy.getInstance());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>()&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;Thread 2 get instance: &quot;</span> + BeanContainerLazy.getInstance());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        thread2.start();</span><br><span class="line">        thread1.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>‍</p><p>结果</p><p>懒汉模式同样保证了实例在运行时唯一</p><p><img src="/2022/05/26/Java%20%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F%E7%9A%84%E5%AE%89%E5%85%A8%E6%80%A7/image-20220527094800-q1lz1rw.png" alt="image.png"></p><p>‍</p><h2 id="单例的安全性"><a href="#单例的安全性" class="headerlink" title="单例的安全性"></a>单例的安全性</h2><p>尽管单例模式已经将构造方法设置为 <code>private</code> 但是依然存在让单例不唯一的手段。</p><ul><li>反射攻击</li><li>序列化攻击</li></ul><p>‍</p><h3 id="反射攻击"><a href="#反射攻击" class="headerlink" title="反射攻击"></a>反射攻击</h3><p>实现：通过反射创建实例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SingletonTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>()&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;Thread 1 get instance: &quot;</span> + BeanContainerLazy.getInstance());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>()&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;Thread 2 get instance: &quot;</span> + BeanContainerLazy.getInstance());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 反射创建懒汉单例模式</span></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>()&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="type">Class</span> <span class="variable">lazyClazz</span> <span class="operator">=</span> BeanContainerLazy.class;</span><br><span class="line">                <span class="type">Constructor</span> <span class="variable">constructor</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    constructor = lazyClazz.getDeclaredConstructor();</span><br><span class="line">                    constructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">                    System.out.println(<span class="string">&quot;Thread 3 get instance: &quot;</span> + constructor.newInstance());</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        thread2.start();</span><br><span class="line">        thread1.start();</span><br><span class="line">        thread3.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>‍</p><p>结果：出现了地址不相同的实例，表明通过反射可以破坏单例模式的唯一性</p><p><img src="/2022/05/26/Java%20%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F%E7%9A%84%E5%AE%89%E5%85%A8%E6%80%A7/image-20220527150904-rey5u1e.png" alt="image.png"></p><p>‍</p><h3 id="序列化攻击"><a href="#序列化攻击" class="headerlink" title="序列化攻击"></a>序列化攻击</h3><p>懒汉式单，实现序列化接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 懒汉单例模式</span></span><br><span class="line"><span class="comment"> * 实现序列化接口</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BeanContainerLazySel</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 防止指令重排序</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> BeanContainerLazySel instance;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">BeanContainerLazySel</span><span class="params">()</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> BeanContainerLazySel <span class="title function_">getInstance</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 双重检测</span></span><br><span class="line">        <span class="keyword">if</span>(instance == <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (BeanContainerLazySel.class)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(instance == <span class="literal">null</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    instance = <span class="keyword">new</span> <span class="title class_">BeanContainerLazySel</span>();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>‍</p><p>测试序列化攻击</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SingletonTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 序列化</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> instance</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setObject</span><span class="params">(BeanContainerLazySel instance)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;instance&quot;</span>));</span><br><span class="line">        outputStream.writeObject(instance);</span><br><span class="line">        outputStream.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 反序列化</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> BeanContainerLazySel <span class="title function_">getObject</span><span class="params">()</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;instance&quot;</span>));</span><br><span class="line">        <span class="type">BeanContainerLazySel</span> <span class="variable">object</span> <span class="operator">=</span> (BeanContainerLazySel)inputStream.readObject();</span><br><span class="line">        inputStream.close();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> object;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">BeanContainerLazySel</span> <span class="variable">instance</span> <span class="operator">=</span> BeanContainerLazySel.getInstance();</span><br><span class="line">        System.out.println(instance);</span><br><span class="line">        setObject(instance);</span><br><span class="line"></span><br><span class="line">        <span class="type">BeanContainerLazySel</span> <span class="variable">object</span> <span class="operator">=</span> getObject();</span><br><span class="line">        System.out.println(object);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>‍</p><p>结果：在懒汉式单例下，通过序列化来获取单例，可以看到地址不一致。</p><p><img src="/2022/05/26/Java%20%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F%E7%9A%84%E5%AE%89%E5%85%A8%E6%80%A7/image-20220529101039-2xeopat.png" alt="image.png"></p><p>‍</p><h3 id="最佳实践"><a href="#最佳实践" class="headerlink" title="最佳实践"></a>最佳实践</h3><h4 id="抵御反射攻击"><a href="#抵御反射攻击" class="headerlink" title="抵御反射攻击"></a>抵御反射攻击</h4><p><strong>使用枚举类型</strong></p><p>把懒汉式单例存放到枚举类型中，可防止反射和序列化攻击</p><p>以懒汉式单例为例子：</p><p>实现（枚举）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 懒汉单例模式</span></span><br><span class="line"><span class="comment"> * 实现序列化接口</span></span><br><span class="line"><span class="comment"> * 单例存放在枚举类型</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EnumBeanContainerStavingSel</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">EnumBeanContainerStavingSel</span><span class="params">()</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> EnumBeanContainerStavingSel <span class="title function_">getInstance</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> ContainerHolder.HOLDER.instance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">enum</span> <span class="title class_">ContainerHolder</span></span><br><span class="line">    &#123;</span><br><span class="line">        HOLDER;</span><br><span class="line">        <span class="keyword">private</span> EnumBeanContainerStavingSel instance;</span><br><span class="line"></span><br><span class="line">        ContainerHolder()</span><br><span class="line">        &#123;</span><br><span class="line">            instance = <span class="keyword">new</span> <span class="title class_">EnumBeanContainerStavingSel</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.coding.singleton;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SingletonTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 序列化</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> instance</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setObject</span><span class="params">(EnumBeanContainerStavingSel instance)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;instance&quot;</span>));</span><br><span class="line">        outputStream.writeObject(instance);</span><br><span class="line">        outputStream.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 反序列化</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> EnumBeanContainerStavingSel <span class="title function_">getObject</span><span class="params">()</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;instance&quot;</span>));</span><br><span class="line">        <span class="type">EnumBeanContainerStavingSel</span> <span class="variable">object</span> <span class="operator">=</span> (EnumBeanContainerStavingSel)inputStream.readObject();</span><br><span class="line">        inputStream.close();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> object;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>()&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;Thread 1 get instance: &quot;</span> + EnumBeanContainerStavingSel.getInstance());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 反射攻击</span></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>()&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="type">Constructor</span> <span class="variable">constructor</span> <span class="operator">=</span> EnumBeanContainerStavingSel.class.getDeclaredConstructor();</span><br><span class="line">                    constructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">                    <span class="type">EnumBeanContainerStavingSel</span> <span class="variable">enumBeanContainerStavingSel</span> <span class="operator">=</span> (EnumBeanContainerStavingSel)constructor.newInstance();</span><br><span class="line">                    System.out.println(<span class="string">&quot;Thread 2 get instance: &quot;</span> + enumBeanContainerStavingSel.getInstance());</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 序列化攻击</span></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>()&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">                <span class="type">EnumBeanContainerStavingSel</span> <span class="variable">instance</span> <span class="operator">=</span> EnumBeanContainerStavingSel.getInstance();</span><br><span class="line"></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">// 把对象写入到磁盘</span></span><br><span class="line">                    setObject(instance);</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// 从磁盘中读取对象，并观察是否与运行中的实例相同</span></span><br><span class="line">                    <span class="type">EnumBeanContainerStavingSel</span> <span class="variable">object</span> <span class="operator">=</span> getObject();</span><br><span class="line">                    System.out.println(<span class="string">&quot;Thread 3 get instance: &quot;</span> + object);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        thread2.start();</span><br><span class="line">        thread1.start();</span><br><span class="line">        thread3.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>‍</p><p>结果</p><p>可以看到放在枚举中的实:</p><ol><li>反射的方式读取都是同一个类。</li><li>序列化方式读取，却不是同一个类，也就是说枚举类型能够抵御反射攻击，却不能抵御序列化攻击</li></ol><p><img src="/2022/05/26/Java%20%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F%E7%9A%84%E5%AE%89%E5%85%A8%E6%80%A7/image-20220529103748-ram6wrj.png" alt="image.png"></p><p>‍</p><h4 id="抵御序列化攻击"><a href="#抵御序列化攻击" class="headerlink" title="抵御序列化攻击"></a>抵御序列化攻击</h4><p>在类中定义 <code>readResolve</code> 的逻辑</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 懒汉单例模式</span></span><br><span class="line"><span class="comment"> * 实现序列化接口</span></span><br><span class="line"><span class="comment"> * 单例存放在枚举类型</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EnumBeanContainerStavingSel</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">EnumBeanContainerStavingSel</span><span class="params">()</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> EnumBeanContainerStavingSel <span class="title function_">getInstance</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> ContainerHolder.HOLDER.instance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">enum</span> <span class="title class_">ContainerHolder</span></span><br><span class="line">    &#123;</span><br><span class="line">        HOLDER;</span><br><span class="line">        <span class="keyword">private</span> EnumBeanContainerStavingSel instance;</span><br><span class="line"></span><br><span class="line">        ContainerHolder()</span><br><span class="line">        &#123;</span><br><span class="line">            instance = <span class="keyword">new</span> <span class="title class_">EnumBeanContainerStavingSel</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Object <span class="title function_">readResolve</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(getInstance() == <span class="literal">null</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">EnumBeanContainerStavingSel</span>();</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> ContainerHolder.HOLDER.instance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>‍</p><p>使用同样的测试用例进行测试，结果如下</p><p><img src="/2022/05/26/Java%20%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F%E7%9A%84%E5%AE%89%E5%85%A8%E6%80%A7/image-20220529104010-0nrheqc.png" alt="image.png"></p><p>‍</p><h4 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h4><ol><li>枚举类型实际上是 <code>static</code> 的代码块，会在类加载的时候执行，不能被反射创建。枚举类型中的实例是线程安全的。</li><li>在序列化对象的时候，如果要保证单例，则需要实现 <code>readResolve()</code> 方法保证对象唯一。</li></ol>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java Core </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MinIO搭建OSS</title>
      <link href="/2021/08/23/MinIO%E6%90%AD%E5%BB%BAOSS/"/>
      <url>/2021/08/23/MinIO%E6%90%AD%E5%BB%BAOSS/</url>
      
        <content type="html"><![CDATA[<h1 id="MinIO搭建OSS"><a href="#MinIO搭建OSS" class="headerlink" title="MinIO搭建OSS"></a>MinIO搭建OSS</h1><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>环境基于dokcer。</p><p>首先确保docker启动状态，输入命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull minio/minio</span><br></pre></td></tr></table></figure><p>‍</p><p>等待下载完毕后，需要创建两个文件夹：config和data，作为minIO的docker映射文件夹</p><p><img src="/2021/08/23/MinIO%E6%90%AD%E5%BB%BAOSS/image-20210823142734-i76o6a9.png" alt="image.png"></p><p>‍</p><p>执行命令，启动容器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line">  -p 9000:9000 \</span><br><span class="line">  -p 9001:9001 \</span><br><span class="line">  --name minio \</span><br><span class="line">  -e <span class="string">&quot;MINIO_ROOT_USER=KALOSORA&quot;</span> \</span><br><span class="line">  -e <span class="string">&quot;MINIO_ROOT_PASSWORD=KALOSORA&quot;</span> \</span><br><span class="line">  -v /Users/kalosora/docker-reflection/minio/data:/data \</span><br><span class="line">  -v /Users/kalosora/docker-reflection/minio/config:/root/.minio \</span><br><span class="line">  minio/minio server /data --console-address <span class="string">&quot;:9001&quot;</span></span><br></pre></td></tr></table></figure><p>命令说明：</p><ul><li>需要映射两个端口，一个是api端口，另一个是web控制台端口，最后要用 <code>--console-address</code> 指定控制台，那么此时9001被指定为控制台端口，另一个9000就会自动变成API端口</li><li>USER和PASSWORD最好是纯英文字符串，不要包含特殊符号，因为曾经试过登录以后Java上传不了文件</li><li>这里映射的&#x2F;data和&#x2F;config路径对应上面创建的两个文件夹路径</li></ul><p>‍</p><p>当docker后台显示如下即为搭建完成</p><p><img src="/2021/08/23/MinIO%E6%90%AD%E5%BB%BAOSS/image-20210823143155-j8ejxnc.png" alt="image.png"></p><p>‍</p><h2 id="设置访问策略"><a href="#设置访问策略" class="headerlink" title="设置访问策略"></a>设置访问策略</h2><p>登陆到控制台</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1:9001</span><br></pre></td></tr></table></figure><p>‍</p><p>点击右上角添加存储桶</p><p><img src="/2021/08/23/MinIO%E6%90%AD%E5%BB%BAOSS/image-20210823143309-9r3x26w.png" alt="image.png"></p><p>‍</p><p>添加完毕后，设置访问策略为public，这样可以通过 <code>http://127.0.0.1:9001/存储桶名称/文件名</code> 的形式访问</p><p><img src="/2021/08/23/MinIO%E6%90%AD%E5%BB%BAOSS/image-20210823143432-vdi8abb.png" alt="image.png"></p><p>‍</p><p>最后添加一个访问规则</p><p><img src="/2021/08/23/MinIO%E6%90%AD%E5%BB%BAOSS/image-20210823143517-dmvj87d.png" alt="image.png"></p><p>‍</p><p>按照图里的进行设置即可</p><p><img src="/2021/08/23/MinIO%E6%90%AD%E5%BB%BAOSS/image-20210823143543-6cub0ux.png" alt="image.png"></p><p>‍</p><h2 id="简单实例"><a href="#简单实例" class="headerlink" title="简单实例"></a>简单实例</h2><p>maven依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--           Minio     --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.minio<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>minio<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>‍</p><h3 id="本地文件上传"><a href="#本地文件上传" class="headerlink" title="本地文件上传"></a>本地文件上传</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// MinIO OSS</span></span><br><span class="line"><span class="comment">// 测试文件上传</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span></span><br><span class="line">        <span class="keyword">throws</span> IOException, NoSuchAlgorithmException, InvalidKeyException &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Base information</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">accessKey</span> <span class="operator">=</span> <span class="string">&quot;KALOSORA&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">secretKey</span> <span class="operator">=</span> <span class="string">&quot;KALOSORA&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">serverUrl</span> <span class="operator">=</span> <span class="string">&quot;http://127.0.0.1:9000&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">bucketName</span> <span class="operator">=</span> <span class="string">&quot;images&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Create a minioClient with the MinIO server playground, its access key and secret key.</span></span><br><span class="line">        <span class="type">MinioClient</span> <span class="variable">minioClient</span> <span class="operator">=</span></span><br><span class="line">                MinioClient.builder()</span><br><span class="line">                        .endpoint(serverUrl)</span><br><span class="line">                        .credentials(accessKey, secretKey)</span><br><span class="line">                        .build();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Make &#x27;asiatrip&#x27; bucket if not exist.</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">found</span> <span class="operator">=</span></span><br><span class="line">                minioClient.bucketExists(BucketExistsArgs.builder().bucket(bucketName).build());</span><br><span class="line">        <span class="keyword">if</span> (!found) &#123;</span><br><span class="line">            <span class="comment">// Make a new bucket called &#x27;asiatrip&#x27;.</span></span><br><span class="line">            minioClient.makeBucket(MakeBucketArgs.builder().bucket(bucketName).build());</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Bucket already exists.&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Upload &#x27;/home/user/Photos/asiaphotos.zip&#x27; as object name &#x27;asiaphotos-2015.zip&#x27; to bucket</span></span><br><span class="line">        <span class="comment">// &#x27;asiatrip&#x27;.</span></span><br><span class="line">        minioClient.uploadObject(</span><br><span class="line">                UploadObjectArgs.builder()</span><br><span class="line">                        <span class="comment">//.contentType(&quot;image/jpg&quot;)</span></span><br><span class="line">                        .bucket(bucketName)</span><br><span class="line">                        .object(<span class="string">&quot;portal-cover.jpg&quot;</span>)</span><br><span class="line">                        .filename(<span class="string">&quot;/Users/kalosora/Desktop/portal-cover.jpg&quot;</span>)</span><br><span class="line">                        .build());</span><br><span class="line">        System.out.println(<span class="string">&quot;File has been uploaded!&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (MinioException e) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Error occurred: &quot;</span> + e);</span><br><span class="line">        System.out.println(<span class="string">&quot;HTTP trace: &quot;</span> + e.httpTrace());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>‍</p><h3 id="文件流上传"><a href="#文件流上传" class="headerlink" title="文件流上传"></a>文件流上传</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span></span><br><span class="line">            <span class="keyword">throws</span> IOException, NoSuchAlgorithmException, InvalidKeyException &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Base information</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">accessKey</span> <span class="operator">=</span> <span class="string">&quot;KALOSORA&quot;</span>;</span><br><span class="line">            <span class="type">String</span> <span class="variable">secretKey</span> <span class="operator">=</span> <span class="string">&quot;KALOSORA&quot;</span>;</span><br><span class="line">            <span class="type">String</span> <span class="variable">serverUrl</span> <span class="operator">=</span> <span class="string">&quot;http://127.0.0.1:9000&quot;</span>;</span><br><span class="line">            <span class="type">String</span> <span class="variable">bucketName</span> <span class="operator">=</span> <span class="string">&quot;article&quot;</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Create a minioClient with the MinIO server playground, its access key and secret key.</span></span><br><span class="line">            <span class="type">MinioClient</span> <span class="variable">minioClient</span> <span class="operator">=</span></span><br><span class="line">                    MinioClient.builder()</span><br><span class="line">                            .endpoint(serverUrl)</span><br><span class="line">                            .credentials(accessKey, secretKey)</span><br><span class="line">                            .build();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Make &#x27;asiatrip&#x27; bucket if not exist.</span></span><br><span class="line">            <span class="type">boolean</span> <span class="variable">found</span> <span class="operator">=</span></span><br><span class="line">                    minioClient.bucketExists(BucketExistsArgs.builder().bucket(bucketName).build());</span><br><span class="line">            <span class="keyword">if</span> (!found) &#123;</span><br><span class="line">                <span class="comment">// Make a new bucket called &#x27;asiatrip&#x27;.</span></span><br><span class="line">                minioClient.makeBucket(MakeBucketArgs.builder().bucket(bucketName).build());</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;Bucket &#x27;test&#x27; already exists.&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 通过文件流上传</span></span><br><span class="line">            <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;/Users/kalosora/Downloads/tempfile/210426A9N10GBYNC_数据结构 - 集合.md&quot;</span>);</span><br><span class="line">            minioClient.putObject(</span><br><span class="line">                    PutObjectArgs.builder().bucket(bucketName)</span><br><span class="line">                            .object(<span class="string">&quot;kalosora/article.md&quot;</span>) <span class="comment">// 这里可以自动生成kalosora文件夹</span></span><br><span class="line">                            .stream(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(file), -<span class="number">1</span>, <span class="number">10485760</span>)</span><br><span class="line">                            .build());</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">&quot;File has been uploaded!&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (MinioException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Error occurred: &quot;</span> + e);</span><br><span class="line">            System.out.println(<span class="string">&quot;HTTP trace: &quot;</span> + e.httpTrace());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>‍</p><h2 id="Springboot整合"><a href="#Springboot整合" class="headerlink" title="Springboot整合"></a>Springboot整合</h2><p>‍</p><p>前端引用上传后的图片</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;http://127.0.0.1:9000/images/portal-cover.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;Photo 1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;img-fluid&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>完整实例1</p><blockquote><p><a href="https://blog.csdn.net/zhuyu19911016520/article/details/109448375?utm_medium=distribute.pc_aggpage_search_result.none-task-blog-2~aggregatepage~first_rank_v2~rank_aggregation-15-109448375.pc_agg_rank_aggregation&utm_term=minio+%E5%AD%98%E5%82%A8%E8%A7%86%E9%A2%91&spm=1000.2123.3001.4430">https://blog.csdn.net/zhuyu19911016520/article/details/109448375?utm_medium=distribute.pc_aggpage_search_result.none-task-blog-2~aggregatepage~first_rank_v2~rank_aggregation-15-109448375.pc_agg_rank_aggregation&amp;utm_term=minio+存储视频&amp;spm=1000.2123.3001.4430</a></p></blockquote><p>完整实例2</p><blockquote><p><a href="https://blog.csdn.net/qq_43230007/article/details/108701081?utm_medium=distribute.pc_aggpage_search_result.none-task-blog-2~aggregatepage~first_rank_v2~rank_aggregation-2-108701081.pc_agg_rank_aggregation&utm_term=minio%E6%96%87%E4%BB%B6%E6%B5%81&spm=1000.2123.3001.4430">https://blog.csdn.net/qq_43230007/article/details/108701081?utm_medium=distribute.pc_aggpage_search_result.none-task-blog-2~aggregatepage~first_rank_v2~rank_aggregation-2-108701081.pc_agg_rank_aggregation&amp;utm_term=minio文件流&amp;spm=1000.2123.3001.4430</a></p></blockquote><p>‍</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker部署Eureka</title>
      <link href="/2021/07/14/Docker%E9%83%A8%E7%BD%B2Eureka/"/>
      <url>/2021/07/14/Docker%E9%83%A8%E7%BD%B2Eureka/</url>
      
        <content type="html"><![CDATA[<h1 id="Docker部署Eureka"><a href="#Docker部署Eureka" class="headerlink" title="Docker部署Eureka"></a>Docker部署Eureka</h1><h2 id="SpringCloud打包"><a href="#SpringCloud打包" class="headerlink" title="SpringCloud打包"></a>SpringCloud打包</h2><p>【注意】</p><ul><li><p>其他微服务组件部署方式相同，如zuul也能这样部署（部署依然失败）</p></li><li><p>部署zuul要指定本地网络 <code>--network=host </code></p><ul><li><blockquote><p>docker run –network&#x3D;host –name zuul-server  -d -p 7070:7070 springcloud&#x2F;zuul-server</p></blockquote></li></ul></li></ul><p>‍</p><p>1.在需要打包的项目的 <code>pom.xml</code> 中添加如下内容</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 打包参数 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 打包的文件名称 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">finalName</span>&gt;</span>eureka<span class="tag">&lt;/<span class="name">finalName</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><p>‍</p><p>2.更新maven，并全局install</p><p><img src="/2021/07/14/Docker%E9%83%A8%E7%BD%B2Eureka/image-20210714091040-72udekv.png" alt="image.png">  </p><p>‍</p><p>直到出现构建成功字样</p><p><img src="/2021/07/14/Docker%E9%83%A8%E7%BD%B2Eureka/image-20210714091121-5crabt0.png" alt="image.png">  </p><p>‍</p><p>3.找到需要打包的项目，这里以 eureka 为例，点击package</p><p>直到出现打包成功字样</p><p><img src="/2021/07/14/Docker%E9%83%A8%E7%BD%B2Eureka/image-20210714091257-0fnxdxv.png" alt="image.png">  </p><p>‍</p><p>4.命令终端运行，测试系统是否正常连接到该项目</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">java </span>-<span class="keyword">jar </span>eureka.<span class="keyword">jar</span></span><br></pre></td></tr></table></figure><p>‍</p><p>结果如下（需要终止时，<code>ctrl + c</code> 或 关闭终端窗口 即可）</p><p><img src="/2021/07/14/Docker%E9%83%A8%E7%BD%B2Eureka/image-20210714091413-79bzuse.png" alt="image.png">  </p><h2 id="jar构建镜像"><a href="#jar构建镜像" class="headerlink" title="jar构建镜像"></a>jar构建镜像</h2><p>1.拉取jdk镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull java:8</span><br></pre></td></tr></table></figure><p>‍</p><p>2.新建一个目录，并且把jar包放进去</p><p>3.在新建的目录中，创建名为Dockerfile的文件</p><ul><li>EXPOSE：表明暴露的端口号</li><li>ADD：表明要添加的jar包</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">FROM java:8</span><br><span class="line">EXPOSE 7070</span><br><span class="line">VOLUME /tmp</span><br><span class="line">ADD eureka.jar app.jar</span><br><span class="line">RUN sh -c &#x27;touch /app.jar&#x27;</span><br><span class="line">ENV JAVA_OPTS=&quot;&quot;</span><br><span class="line">ENTRYPOINT [ &quot;sh&quot;, &quot;-c&quot;, &quot;java $JAVA_OPTS -Djava.security.egd=file:/dev/./urandom -jar /app.jar&quot; ]</span><br></pre></td></tr></table></figure><p>‍</p><p>目录内容如下：</p><p><img src="/2021/07/14/Docker%E9%83%A8%E7%BD%B2Eureka/image-20210714100334-l0hh2wd.png" alt="image.png">  </p><p>‍</p><p>4.命令终端cd进入该目录，执行命令</p><p>【注意】命令末尾有个 ‘.’ 代表当前路径</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -t springcloud/eureka .</span><br></pre></td></tr></table></figure><p>‍</p><p>结果：</p><p><img src="/2021/07/14/Docker%E9%83%A8%E7%BD%B2Eureka/image-20210714095258-vnft06a.png" alt="image.png">  </p><p>‍</p><p>5.在docker中查看镜像</p><p>也可以使用命令 <code>docker images</code></p><p><img src="/2021/07/14/Docker%E9%83%A8%E7%BD%B2Eureka/image-20210714095344-w6ih4fz.png" alt="image.png">  </p><p>‍</p><p>6.创建容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 7070:7070 springcloud/eureka</span><br></pre></td></tr></table></figure><p>‍</p><p>7.访问eureka</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost:7070</span><br></pre></td></tr></table></figure><p>‍</p><p>结果可以看到运行成功</p><p><img src="/2021/07/14/Docker%E9%83%A8%E7%BD%B2Eureka/image-20210714095610-yyuntu2.png" alt="image.png">  </p><p>‍</p><p>‍</p><p>‍</p>]]></content>
      
      
      <categories>
          
          <category> Cloud Native </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> Spring </tag>
            
            <tag> Devops </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java 文件上传与下载</title>
      <link href="/2021/06/18/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E4%B8%8E%E4%B8%8B%E8%BD%BD/"/>
      <url>/2021/06/18/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E4%B8%8E%E4%B8%8B%E8%BD%BD/</url>
      
        <content type="html"><![CDATA[<h1 id="文件上传与下载"><a href="#文件上传与下载" class="headerlink" title="文件上传与下载"></a>文件上传与下载</h1><p><strong>基于Springboot + Vue前后端分离</strong></p><p>项目源码：</p><ul><li>前端<code>springboot-file</code></li><li>后端<code>springboot-file-process</code></li></ul><p>‍</p><h2 id="流程梳理"><a href="#流程梳理" class="headerlink" title="流程梳理"></a>流程梳理</h2><p><strong>文件上传</strong></p><ol><li><p>前端提交文件，后端使用<code>MultipartFile</code>接收</p></li><li><p>后端新建File并保存到对应的目录上（此时文件后端服务一般与文件存储放在同一个linux服务器上）</p></li><li><p>如果需要回显，存储成功后，向前端返回文件路径。此时该路径必须能够通过http直接访问</p><ol><li>还有一种方法，返回图片的base64格式，放到img标签里面</li></ol></li></ol><p>‍</p><p><strong>文件下载</strong></p><ol><li><p>前端提交文件名到后端</p></li><li><p>后端搜索到文件名，通过文件流写入到<code>HttpServletResponse</code>的<code>OutputStream</code>中</p></li><li><p>前端通过<code>window.location</code>接收</p><ol><li><p>或者是通过以下方式设置图片的Base64，其中<code>imgurl</code>是vue的动态绑定变量</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">:src</span>=<span class="string">&quot;&#x27;data:image/png;base64,&#x27;+imgurl&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol></li></ol><p>‍</p><h2 id="代码实例"><a href="#代码实例" class="headerlink" title="代码实例"></a>代码实例</h2><h3 id="前端代码"><a href="#前端代码" class="headerlink" title="前端代码"></a>前端代码</h3><p>upload.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>文件上传页面<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;fileUploadVue&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span> <span class="attr">th:inlines</span>=<span class="string">&quot;text&quot;</span>&gt;</span>文件上传<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>选择文件: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;fileName&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;file&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;fileUpload&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;下载&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;fileDownload&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span> <span class="attr">th:inlines</span>=<span class="string">&quot;text&quot;</span>&gt;</span>图片上传并回显<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>选择文件: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;fileName&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;file&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;fileUploadAndShow&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">:src</span>=<span class="string">&quot;&#x27;data:image/png;base64,&#x27;+imageBase64&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;vue/vue.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;vue/axios.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> fileUploadVue = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&quot;#fileUploadVue&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">imageBase64</span>: <span class="string">&quot;&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">created</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> me = <span class="variable language_">this</span>;</span></span><br><span class="line"><span class="language-javascript">            me.<span class="title function_">testPostStatus</span>();</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 测试前后端是否调通</span></span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">testPostStatus</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">var</span> name = <span class="string">&quot;hello&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">var</span> postTestUrl = <span class="string">&quot;http://localhost:8001/postTest?name=&quot;</span>;  <span class="comment">// 这里必须添加 &#x27;http://&#x27; 前缀，否则会CORS请求被拦截</span></span></span><br><span class="line"><span class="language-javascript">                axios.<span class="title function_">post</span>(postTestUrl + name).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(res.<span class="property">data</span>);</span></span><br><span class="line"><span class="language-javascript">                &#125;);</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">fileUpload</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">var</span> formData = <span class="keyword">new</span> <span class="title class_">FormData</span>();</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">var</span> uploadFileUrl = <span class="string">&quot;http://localhost:8001/uploadFile&quot;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">                formData.<span class="title function_">append</span>(<span class="string">&#x27;file&#x27;</span>, <span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">file</span>.<span class="property">files</span>[<span class="number">0</span>]);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">                axios.<span class="title function_">post</span>(uploadFileUrl, formData).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">if</span> (res.<span class="property">data</span> == <span class="string">&quot;SUCCESS&quot;</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="title function_">alert</span>(<span class="string">&quot;文件上传成功&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">                    &#125;</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="title function_">alert</span>(<span class="string">&quot;文件上传失败&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">                    &#125;</span></span><br><span class="line"><span class="language-javascript">                &#125;);</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">fileDownload</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">var</span> downloadFileUrl = <span class="string">&quot;http://localhost:8001/downloadFile&quot;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">window</span>.<span class="property">location</span> = <span class="string">&quot;http://localhost:8001/downloadFile&quot;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">fileUploadAndShow</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">var</span> me = <span class="variable language_">this</span>;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">var</span> formData = <span class="keyword">new</span> <span class="title class_">FormData</span>();</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">var</span> downloadFileUrl = <span class="string">&quot;http://localhost:8001/fileUploadAndShow&quot;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">                formData.<span class="title function_">append</span>(<span class="string">&#x27;file&#x27;</span>, <span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">file</span>.<span class="property">files</span>[<span class="number">0</span>]);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">                axios.<span class="title function_">post</span>(downloadFileUrl, formData).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(res.<span class="property">data</span>);</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">if</span> (res.<span class="property">data</span>.<span class="property">status</span> == <span class="string">&quot;SUCCESS&quot;</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                        me.<span class="property">imageBase64</span> = res.<span class="property">data</span>.<span class="property">imageBase64</span>;</span></span><br><span class="line"><span class="language-javascript">                        <span class="title function_">alert</span>(<span class="string">&quot;文件上传成功&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">                    &#125;</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="title function_">alert</span>(<span class="string">&quot;文件上传失败&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">                    &#125;</span></span><br><span class="line"><span class="language-javascript">                &#125;);</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>‍</p><h3 id="后端代码"><a href="#后端代码" class="headerlink" title="后端代码"></a>后端代码</h3><p>SwaggerConfig.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.file.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.google.common.base.Predicate;</span><br><span class="line"><span class="keyword">import</span> com.google.common.base.Predicates;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.RequestHandler;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.builders.ApiInfoBuilder;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.builders.PathSelectors;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.builders.RequestHandlerSelectors;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.service.ApiInfo;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.service.Contact;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.spi.DocumentationType;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.spring.web.plugins.Docket;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.swagger2.annotations.EnableSwagger2;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableSwagger2</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Swagger2</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    http://localhost:8088/swagger-ui.html     原路径</span></span><br><span class="line"><span class="comment">//    http://localhost:8088/doc.html     新路径，github开源的swagger页面，自带汉化</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 配置swagger2核心配置 docket</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Docket <span class="title function_">createRestApi</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        Predicate&lt;RequestHandler&gt; filePredicate = RequestHandlerSelectors.basePackage(<span class="string">&quot;com.file.controller&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Docket</span>(DocumentationType.SWAGGER_2)  <span class="comment">// 指定api类型为swagger2</span></span><br><span class="line">                .apiInfo(apiInfo())                 <span class="comment">// 用于定义api文档汇总信息</span></span><br><span class="line">                .select()</span><br><span class="line">                .apis(Predicates.or(filePredicate))</span><br><span class="line">                .paths(PathSelectors.any())         <span class="comment">// 所有controller</span></span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ApiInfo <span class="title function_">apiInfo</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ApiInfoBuilder</span>()</span><br><span class="line">                .title(<span class="string">&quot;sora blog·博客接口api&quot;</span>)                       <span class="comment">// 文档页标题</span></span><br><span class="line">                .contact(<span class="keyword">new</span> <span class="title class_">Contact</span>(<span class="string">&quot;sora&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;https://www.kalosora.work&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;kalosora@gmail.com&quot;</span>))                   <span class="comment">// 联系人信息</span></span><br><span class="line">                .description(<span class="string">&quot;sora blog博客的api文档&quot;</span>)      <span class="comment">// 详细信息</span></span><br><span class="line">                .version(<span class="string">&quot;1.0.0&quot;</span>)                               <span class="comment">// 文档版本号</span></span><br><span class="line">                .termsOfServiceUrl(<span class="string">&quot;https://www.kalosora.work&quot;</span>)     <span class="comment">// 网站地址</span></span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>‍</p><p>FileController.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.file.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.Api;</span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.ApiOperation;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.multipart.MultipartFile;</span><br><span class="line"><span class="keyword">import</span> sun.misc.BASE64Encoder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 允许跨域</span></span><br><span class="line"><span class="meta">@CrossOrigin(origins = &quot;*&quot;, methods = &#123;RequestMethod.GET, RequestMethod.POST&#125;)</span></span><br><span class="line"><span class="meta">@Api(value = &quot;文件处理相关Controller&quot;, tags = &#123;&quot;文件处理相关Controller&quot;&#125;)</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FileController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Status Code</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">STATUS_SUCCESS</span> <span class="operator">=</span> <span class="string">&quot;SUCCESS&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">STATUS_ERROR</span> <span class="operator">=</span> <span class="string">&quot;ERROR&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/downloadFile&quot;)</span></span><br><span class="line">    <span class="meta">@ApiOperation(value = &quot;文件下载的接口&quot;, notes = &quot;文件下载的接口&quot;, httpMethod = &quot;GET&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">downloadFile</span><span class="params">(HttpServletResponse response)</span> <span class="keyword">throws</span> UnsupportedEncodingException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> <span class="string">&quot;布偶.jpg&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">storePath</span> <span class="operator">=</span> <span class="string">&quot;/Users/kalosora/Desktop/模拟下载/&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">File</span> <span class="variable">downLoadFile</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(storePath + fileName);</span><br><span class="line">        <span class="keyword">if</span> (!downLoadFile.exists()) &#123;</span><br><span class="line">            <span class="keyword">return</span> STATUS_ERROR;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 文件存在，开始下载</span></span><br><span class="line">        response.setHeader(<span class="string">&quot;content-type&quot;</span>, <span class="string">&quot;application/octet-stream&quot;</span>);</span><br><span class="line">        response.setContentType(<span class="string">&quot;application/octet-stream&quot;</span>);</span><br><span class="line">        response.setHeader(<span class="string">&quot;Content-Disposition&quot;</span>, <span class="string">&quot;attachment;filename=&quot;</span> + java.net.URLEncoder.encode(fileName, <span class="string">&quot;UTF-8&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 定义输入流</span></span><br><span class="line">        <span class="type">byte</span>[] buffer = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">is</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">BufferedInputStream</span> <span class="variable">bis</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">OutputStream</span> <span class="variable">os</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            os = response.getOutputStream();</span><br><span class="line">            is = <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(downLoadFile);</span><br><span class="line">            bis = <span class="keyword">new</span> <span class="title class_">BufferedInputStream</span>(is);</span><br><span class="line"></span><br><span class="line">            <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> bis.read(buffer);</span><br><span class="line">            <span class="keyword">while</span> (i != -<span class="number">1</span>) &#123;</span><br><span class="line">                os.write(buffer);</span><br><span class="line">                i = bis.read(buffer);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            bis.close();</span><br><span class="line">            is.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> STATUS_SUCCESS;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/uploadFile&quot;)</span></span><br><span class="line">    <span class="meta">@ApiOperation(value = &quot;文件上传的接口&quot;, notes = &quot;文件上传的接口&quot;, httpMethod = &quot;POST&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">uploadFile</span><span class="params">(<span class="meta">@RequestParam(&quot;file&quot;)</span> MultipartFile file)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 文件保存路径</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">storePath</span> <span class="operator">=</span> <span class="string">&quot;/Users/kalosora/Desktop/模拟下载/&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (file.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">return</span> STATUS_ERROR;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取原文件名</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">originalFileName</span> <span class="operator">=</span> file.getOriginalFilename();</span><br><span class="line">        System.out.println(<span class="string">&quot;文件名: &quot;</span> + originalFileName);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取文件类型</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">fileType</span> <span class="operator">=</span> originalFileName.substring(originalFileName.lastIndexOf(<span class="string">&quot;.&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;文件类型: &quot;</span> + fileType);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 模拟文件保存到与应用同一个服务器</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">saveFile</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(storePath + originalFileName);</span><br><span class="line">        System.out.println(<span class="string">&quot;新文件:&quot;</span> + saveFile.toString());</span><br><span class="line">        <span class="keyword">if</span> (!saveFile.exists()) &#123;</span><br><span class="line">            file.transferTo(saveFile);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> STATUS_SUCCESS;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/fileUploadAndShow&quot;)</span></span><br><span class="line">    <span class="meta">@ApiOperation(value = &quot;文件上传的接口&quot;, notes = &quot;文件上传的接口&quot;, httpMethod = &quot;POST&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title function_">fileUploadAndShow</span><span class="params">(<span class="meta">@RequestParam(&quot;file&quot;)</span> MultipartFile file)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"></span><br><span class="line">        Map&lt;String, Object&gt; resultMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;String, Object&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 文件保存路径</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">storePath</span> <span class="operator">=</span> <span class="string">&quot;/Users/kalosora/Desktop/模拟下载/&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (file.isEmpty()) &#123;</span><br><span class="line">            resultMap.put(<span class="string">&quot;status&quot;</span>, STATUS_ERROR);</span><br><span class="line">            <span class="keyword">return</span> resultMap;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取原文件名</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">originalFileName</span> <span class="operator">=</span> file.getOriginalFilename();</span><br><span class="line">        System.out.println(<span class="string">&quot;文件名: &quot;</span> + originalFileName);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取文件类型</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">fileType</span> <span class="operator">=</span> originalFileName.substring(originalFileName.lastIndexOf(<span class="string">&quot;.&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;文件类型: &quot;</span> + fileType);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 模拟文件保存到与应用同一个服务器</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">saveFile</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(storePath + originalFileName);</span><br><span class="line">        System.out.println(<span class="string">&quot;新文件:&quot;</span> + saveFile.toString());</span><br><span class="line">        <span class="keyword">if</span> (!saveFile.exists()) &#123;</span><br><span class="line">            file.transferTo(saveFile);</span><br><span class="line">        &#125;<span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 文件存在，则直接返回图片Base64</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">imageBase64</span> <span class="operator">=</span> fileToBase64(saveFile);</span><br><span class="line">            resultMap.put(<span class="string">&quot;imageBase64&quot;</span>, imageBase64);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        resultMap.put(<span class="string">&quot;status&quot;</span>, STATUS_SUCCESS);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> resultMap;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/postTest&quot;)</span></span><br><span class="line">    <span class="meta">@ApiOperation(value = &quot;测试前后端交互的接口&quot;, notes = &quot;测试前后端交互的接口&quot;, httpMethod = &quot;POST&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">postTest</span><span class="params">(<span class="meta">@RequestParam(&quot;name&quot;)</span> String name)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> STATUS_SUCCESS;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 文件转换成Base64编码</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 文件转换为base64</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> file</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">fileToBase64</span><span class="params">(File file)</span> &#123;<span class="comment">//将图片文件转化为字节数组字符串，并对其进行Base64编码处理</span></span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">byte</span>[] fileData = <span class="literal">null</span>;</span><br><span class="line">        <span class="comment">// 读取文件字节数组</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            in = <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(file);</span><br><span class="line">            fileData = <span class="keyword">new</span> <span class="title class_">byte</span>[in.available()];</span><br><span class="line">            in.read(fileData);</span><br><span class="line">            in.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 对字节数组Base64编码并且返回</span></span><br><span class="line">        <span class="type">BASE64Encoder</span> <span class="variable">encoder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BASE64Encoder</span>();</span><br><span class="line">        <span class="keyword">return</span> encoder.encode(fileData);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>‍</p><h2 id="参考网站"><a href="#参考网站" class="headerlink" title="参考网站"></a>参考网站</h2><p><a href="https://www.jianshu.com/p/be1af489551c">Springboot文件上传下载</a></p><p>‍</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java 多线程导入excel数据</title>
      <link href="/2021/05/26/Java%20%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%AF%BC%E5%85%A5excel%E6%95%B0%E6%8D%AE/"/>
      <url>/2021/05/26/Java%20%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%AF%BC%E5%85%A5excel%E6%95%B0%E6%8D%AE/</url>
      
        <content type="html"><![CDATA[<h1 id="Java-多线程导入excel数据"><a href="#Java-多线程导入excel数据" class="headerlink" title="Java 多线程导入excel数据"></a>Java 多线程导入excel数据</h1><p>项目源码：</p><ul><li>前端<code>springboo-excel</code></li><li>后端<code>springboot-excel-process</code></li></ul><p>‍</p><p>本质上是如何高效地处理大量的数据集合：</p><ul><li>从一个数据库抓取另一个数据库的大量数据</li><li>从大文件Excel中导入到数据库</li></ul><h2 id="目标分解"><a href="#目标分解" class="headerlink" title="目标分解"></a>目标分解</h2><p>使用springboot，方便使用依赖和后续的文件上传</p><ol><li><p>使用POI生成Excel文件</p></li><li><p>使用POI解析Excel文件</p></li><li><p>多线程拆分Excel文件，并导入到数据库，观察耗时</p><ol><li>尝试使用多线程以降低耗时</li><li>使用 spring jdbc template，前端使用MultipartFile</li><li>生产者读取，消费者写入</li></ol></li></ol><p>‍</p><h2 id="Springboot通用配置"><a href="#Springboot通用配置" class="headerlink" title="Springboot通用配置"></a>Springboot通用配置</h2><p>0.<code>application.yml</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  profiles:</span><br><span class="line">    active: oracle</span><br></pre></td></tr></table></figure><p>‍</p><p>1.<code>application-oracle.yml</code>，用于连接oracle数据库</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">server:</span><br><span class="line">  port: 8003</span><br><span class="line"></span><br><span class="line">spring:</span><br><span class="line">  # 数据源的相关配置</span><br><span class="line">  datasource:</span><br><span class="line">    type: com.zaxxer.hikari.HikariDataSource          # 数据源类型：HikariCP</span><br><span class="line">    driver-class-name: oracle.jdbc.driver.OracleDriver</span><br><span class="line">    url: jdbc:oracle:thin:@10.38.1.101:1521:PROD</span><br><span class="line">    username: apps</span><br><span class="line">    password: It2017</span><br><span class="line">    hikari:</span><br><span class="line">      connection-timeout: 30000       # 等待连接池分配连接的最大时长（毫秒），超过这个时长还没可用的连接则发生SQLException， 默认:30秒</span><br><span class="line">      minimum-idle: 5                 # 最小连接数</span><br><span class="line">      maximum-pool-size: 20           # 最大连接数</span><br><span class="line">      auto-commit: true               # 自动提交</span><br><span class="line">      idle-timeout: 600000            # 连接超时的最大时长（毫秒），超时则被释放（retired），默认:10分钟</span><br><span class="line">      pool-name: DateSourceHikariCP   # 连接池名字</span><br><span class="line">      max-lifetime: 1800000           # 连接的生命时长（毫秒），超时而且没被使用则被释放（retired），默认:30分钟 1800000ms</span><br><span class="line">      connection-test-query: SELECT 1 FROM DUAL</span><br><span class="line">  application:</span><br><span class="line">    name: spring-excel</span><br></pre></td></tr></table></figure><p>‍</p><p>2.<code>pom.xml</code> 使用jdk1.8</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springboot-excel-process<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.8.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.4.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger-ui<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.4.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.xiaoymin<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>swagger-bootstrap-ui<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- apache poi --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 用于操作微软办公文档 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.poi<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>poi<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- Spring Jdbc Template --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- Oralce Jdbc --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.oracle.database.jdbc<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ojdbc8<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>12.2.0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- fastJson --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.10.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-annotations<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.10.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.10.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">finalName</span>&gt;</span>$&#123;project.artifactId&#125;<span class="tag">&lt;/<span class="name">finalName</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- Java 编译 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">encoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">encoding</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>‍</p><p>3.<code>swagger2.java</code>接口调试配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">package com.excel.config;</span><br><span class="line"></span><br><span class="line">import com.google.common.base.Predicate;</span><br><span class="line">import com.google.common.base.Predicates;</span><br><span class="line">import org.springframework.context.annotation.Bean;</span><br><span class="line">import org.springframework.context.annotation.Configuration;</span><br><span class="line">import springfox.documentation.RequestHandler;</span><br><span class="line">import springfox.documentation.builders.ApiInfoBuilder;</span><br><span class="line">import springfox.documentation.builders.PathSelectors;</span><br><span class="line">import springfox.documentation.builders.RequestHandlerSelectors;</span><br><span class="line">import springfox.documentation.service.ApiInfo;</span><br><span class="line">import springfox.documentation.service.Contact;</span><br><span class="line">import springfox.documentation.spi.DocumentationType;</span><br><span class="line">import springfox.documentation.spring.web.plugins.Docket;</span><br><span class="line">import springfox.documentation.swagger2.annotations.EnableSwagger2;</span><br><span class="line"></span><br><span class="line">@Configuration</span><br><span class="line">@EnableSwagger2</span><br><span class="line">public class Swagger2 &#123;</span><br><span class="line"></span><br><span class="line">//    http://localhost:8088/swagger-ui.html     原路径</span><br><span class="line">//    http://localhost:8088/doc.html     新路径，github开源的swagger页面，自带汉化</span><br><span class="line">    // 配置swagger2核心配置 docket</span><br><span class="line">    @Bean</span><br><span class="line">    public Docket createRestApi() &#123;</span><br><span class="line"></span><br><span class="line">        Predicate<span class="tag">&lt;<span class="name">RequestHandler</span>&gt;</span> excelPredicate = RequestHandlerSelectors.basePackage(&quot;com.excel.controller&quot;);</span><br><span class="line"></span><br><span class="line">        return new Docket(DocumentationType.SWAGGER_2)  // 指定api类型为swagger2</span><br><span class="line">                .apiInfo(apiInfo())                 // 用于定义api文档汇总信息</span><br><span class="line">                .select()</span><br><span class="line">                .apis(Predicates.or(excelPredicate))</span><br><span class="line">                .paths(PathSelectors.any())         // 所有controller</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line">    private ApiInfo apiInfo() &#123;</span><br><span class="line">        return new ApiInfoBuilder()</span><br><span class="line">                .title(&quot;sora blog·博客接口api&quot;)                       // 文档页标题</span><br><span class="line">                .contact(new Contact(&quot;sora&quot;,</span><br><span class="line">                        &quot;https://www.kalosora.work&quot;,</span><br><span class="line">                        &quot;kalosora@gmail.com&quot;))                   // 联系人信息</span><br><span class="line">                .description(&quot;sora blog博客的api文档&quot;)      // 详细信息</span><br><span class="line">                .version(&quot;1.0.0&quot;)                               // 文档版本号</span><br><span class="line">                .termsOfServiceUrl(&quot;https://www.kalosora.work&quot;)     // 网站地址</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>‍</p><p>‍</p><h2 id="生成Excel文件"><a href="#生成Excel文件" class="headerlink" title="生成Excel文件"></a>生成Excel文件</h2><h3 id="生成简单的Excel表格"><a href="#生成简单的Excel表格" class="headerlink" title="生成简单的Excel表格"></a>生成简单的Excel表格</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;excel&quot;)</span></span><br><span class="line"><span class="meta">@Api(value = &quot;EXCEL处理相关Controller&quot;, tags = &#123;&quot;EXCEL处理相关Controller&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExcelController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建Excel文件</span></span><br><span class="line"><span class="comment">     * 一个Excel文件，包括多个Sheet；一个Sheet包括多个Cell</span></span><br><span class="line"><span class="comment">     * 一个Cell包括多个Column</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;createSampleExcel&quot;)</span></span><br><span class="line">    <span class="meta">@ApiOperation(value = &quot;创建简单Excel文件&quot;, notes = &quot;创建简单Excel文件&quot;, httpMethod = &quot;GET&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">createExcel</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">excelFilePath</span> <span class="operator">=</span> <span class="string">&quot;/Users/kalosora/Desktop/sample.xls&quot;</span>;</span><br><span class="line">        <span class="type">File</span> <span class="variable">excelFile</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(excelFilePath);</span><br><span class="line">        <span class="keyword">if</span> (excelFile.exists()) &#123;</span><br><span class="line">            excelFile.createNewFile();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 开始创建Excel</span></span><br><span class="line">        <span class="type">HSSFWorkbook</span> <span class="variable">workbook</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HSSFWorkbook</span>();</span><br><span class="line">        <span class="type">HSSFSheet</span> <span class="variable">sheet</span> <span class="operator">=</span> workbook.createSheet(<span class="string">&quot;Sheet1&quot;</span>);</span><br><span class="line">        <span class="comment">// 从第0行开始创建</span></span><br><span class="line">        <span class="type">HSSFRow</span> <span class="variable">row</span> <span class="operator">=</span> sheet.createRow(<span class="number">0</span>);</span><br><span class="line">        <span class="comment">// 设置单元格内容，从0开始</span></span><br><span class="line">        row.createCell(<span class="number">0</span>).setCellValue(<span class="string">&quot;发票编号&quot;</span>);</span><br><span class="line">        row.createCell(<span class="number">1</span>).setCellValue(<span class="string">&quot;经营单位&quot;</span>);</span><br><span class="line">        row.createCell(<span class="number">2</span>).setCellValue(<span class="string">&quot;GL日期&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置Excel备注信息</span></span><br><span class="line">        setExcelDesc(workbook);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 写入到Excel</span></span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(excelFile);</span><br><span class="line">        workbook.write(fos);</span><br><span class="line">        workbook.close();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;创建成功!输出到:&quot;</span> + excelFilePath;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置Excel文档信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> workbook</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">setExcelDesc</span><span class="params">(HSSFWorkbook workbook)</span> &#123;</span><br><span class="line">        workbook.createInformationProperties();                     <span class="comment">//创建文档信息</span></span><br><span class="line">        <span class="type">DocumentSummaryInformation</span> <span class="variable">dsi</span> <span class="operator">=</span> workbook.getDocumentSummaryInformation();<span class="comment">//摘要信息</span></span><br><span class="line">        dsi.setCategory(<span class="string">&quot;Excel文件&quot;</span>);                                <span class="comment">//类别</span></span><br><span class="line">        dsi.setManager(<span class="string">&quot;kalosora&quot;</span>);                                 <span class="comment">//管理者</span></span><br><span class="line">        dsi.setCompany(<span class="string">&quot;--&quot;</span>);                                       <span class="comment">//公司</span></span><br><span class="line">        <span class="type">SummaryInformation</span> <span class="variable">si</span> <span class="operator">=</span> workbook.getSummaryInformation();   <span class="comment">//摘要信息</span></span><br><span class="line">        si.setSubject(<span class="string">&quot;测试文档&quot;</span>);                                   <span class="comment">//主题</span></span><br><span class="line">        si.setTitle(<span class="string">&quot;测试文档&quot;</span>);                                     <span class="comment">//标题</span></span><br><span class="line">        si.setAuthor(<span class="string">&quot;kalosora&quot;</span>);                                   <span class="comment">//作者</span></span><br><span class="line">        si.setComments(<span class="string">&quot;POI测试文档&quot;</span>);                               <span class="comment">//备注</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>‍</p><h3 id="改进：从数据库导出到excel"><a href="#改进：从数据库导出到excel" class="headerlink" title="改进：从数据库导出到excel"></a>改进：从数据库导出到excel</h3><p>使用spring jdbc Template导出excel文件</p><p>Repository层，<code>ApInvoiceVO.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.excel.repository;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 发票实体类VO</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ApInvoiceVO</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 发票编号</span></span><br><span class="line">    <span class="keyword">private</span> String invoiceNum;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 经营单位</span></span><br><span class="line">    <span class="keyword">private</span> String orgName;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 总账日期</span></span><br><span class="line">    <span class="keyword">private</span> String glDate;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// getter &amp; setter</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getInvoiceNum</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> invoiceNum;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setInvoiceNum</span><span class="params">(String invoiceNum)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.invoiceNum = invoiceNum;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getOrgName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> orgName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setOrgName</span><span class="params">(String orgName)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.orgName = orgName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getGlDate</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> glDate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setGlDate</span><span class="params">(String glDate)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.glDate = glDate;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>‍</p><p>Service层，<code>ApInvoiceService.java</code>，使用Jdbc Template</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 发票Service层</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ApInvoiceService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> JdbcTemplate jdbcTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ApInvoiceService</span><span class="params">(JdbcTemplate jdbcTemplate)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.jdbcTemplate = jdbcTemplate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询发票信息</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;ApInvoiceVO&gt; <span class="title function_">queryInvoiceInfo</span><span class="params">(String querySql)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> jdbcTemplate.query(querySql, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;&#125;, <span class="keyword">new</span> <span class="title class_">BeanPropertyRowMapper</span>&lt;&gt;(ApInvoiceVO.class));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>‍</p><p>Controller层</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/createExcelFromDB&quot;)</span></span><br><span class="line"><span class="meta">@ApiOperation(value = &quot;从数据库导出Excel文件&quot;, notes = &quot;从数据库导出Excel文件&quot;, httpMethod = &quot;GET&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">createExcelFromDB</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取数据源</span></span><br><span class="line">    <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">    sb.append(<span class="string">&quot;select aia.invoice_num,hou.name org_name,to_char(aia.gl_date,&#x27;yyyy-mm-dd hh24:mi:ss&#x27;) gl_date &quot;</span>);</span><br><span class="line">    sb.append(<span class="string">&quot;from ap_invoices_all aia,hr_operating_units hou &quot;</span>);</span><br><span class="line">    sb.append(<span class="string">&quot;where 1=1 and aia.org_id = hou.organization_id &quot;</span>);</span><br><span class="line">    sb.append(<span class="string">&quot;and gl_date &gt;= to_date(&#x27;2021-05-01&#x27;,&#x27;yyyy-mm-dd&#x27;)&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// fixme：测试sql语句</span></span><br><span class="line">    System.out.println(<span class="string">&quot;查询语句:&quot;</span> + sb.toString());</span><br><span class="line"></span><br><span class="line">    List&lt;ApInvoiceVO&gt; invoiceVOList = apInvoiceService.queryInvoiceInfo(sb.toString());</span><br><span class="line"></span><br><span class="line">    <span class="type">String</span> <span class="variable">excelFilePath</span> <span class="operator">=</span> <span class="string">&quot;/Users/kalosora/Desktop/sampleDB.xls&quot;</span>;</span><br><span class="line">    <span class="type">File</span> <span class="variable">excelFile</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(excelFilePath);</span><br><span class="line">    <span class="keyword">if</span> (excelFile.exists()) &#123;</span><br><span class="line">        excelFile.createNewFile();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 开始创建Excel</span></span><br><span class="line">    <span class="type">HSSFWorkbook</span> <span class="variable">workbook</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HSSFWorkbook</span>();</span><br><span class="line">    <span class="type">HSSFSheet</span> <span class="variable">sheet</span> <span class="operator">=</span> workbook.createSheet(<span class="string">&quot;Sheet1&quot;</span>);</span><br><span class="line">    <span class="comment">// 设置表头</span></span><br><span class="line">    <span class="type">HSSFRow</span> <span class="variable">row</span> <span class="operator">=</span> sheet.createRow(<span class="number">0</span>);</span><br><span class="line">    row.createCell(<span class="number">0</span>).setCellValue(<span class="string">&quot;发票编号&quot;</span>);</span><br><span class="line">    row.createCell(<span class="number">1</span>).setCellValue(<span class="string">&quot;经营单位&quot;</span>);</span><br><span class="line">    row.createCell(<span class="number">2</span>).setCellValue(<span class="string">&quot;GL日期&quot;</span>);</span><br><span class="line">    <span class="comment">// 写入到Sheet1中</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; invoiceVOList.size(); i++) &#123;</span><br><span class="line">        row = sheet.createRow(i);</span><br><span class="line">        <span class="comment">// 设置单元格内容，从0开始</span></span><br><span class="line">        row.createCell(<span class="number">0</span>).setCellValue(invoiceVOList.get(i).getInvoiceNum());</span><br><span class="line">        row.createCell(<span class="number">1</span>).setCellValue(invoiceVOList.get(i).getOrgName());</span><br><span class="line">        row.createCell(<span class="number">2</span>).setCellValue(invoiceVOList.get(i).getGlDate());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置Excel备注信息</span></span><br><span class="line">    setExcelDesc(workbook);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 写入到Excel</span></span><br><span class="line">    <span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(excelFile);</span><br><span class="line">    workbook.write(fos);</span><br><span class="line">    workbook.close();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;创建成功!输出到:&quot;</span> + excelFilePath;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>‍</p><h3 id="改进：freemarker导出到excel"><a href="#改进：freemarker导出到excel" class="headerlink" title="改进：freemarker导出到excel"></a>改进：freemarker导出到excel</h3><p>上传sql文件，并且导出到excel</p><p>步骤分解</p><ol><li>从file中获取sql语句</li><li>读取select后，from前的所有字段，生成字节码（动态生成实体类）</li><li>连接数据库，通过freemarker导出到excel</li></ol><p>‍</p><h2 id="从Excel导入"><a href="#从Excel导入" class="headerlink" title="从Excel导入"></a>从Excel导入</h2><h3 id="解析简单的Excel表格"><a href="#解析简单的Excel表格" class="headerlink" title="解析简单的Excel表格"></a>解析简单的Excel表格</h3><p>excel包含少量数据，使用Spring Jdbc Template处理，并在数据库创建记录</p><p>【注意】xls格式最大行数为65535，以二进制形式存储文件；xlsx格式以xml形式存储文件，可以最多存储100w+行数据</p><p>前端：<code>excel.html</code>，使用Vue</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Excel文件上传页面<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;excelProcess&quot;</span>&gt;</span></span><br><span class="line">        请选择excel文件: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;file&quot;</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;excelUpload&quot;</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;测试连接&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;testPostStatus&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./vue/axios.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./vue/vue.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> excelProcess = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&quot;#excelProcess&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">created</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 测试前后端连接</span></span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">testPostStatus</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">var</span> postUrl = <span class="string">&quot;http://localhost:8003/testPost?postMsg=&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">var</span> msg = <span class="string">&quot;从VUE发送消息!&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">                axios.<span class="title function_">post</span>(postUrl + msg).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(res.<span class="property">data</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">if</span> (res.<span class="property">data</span>.<span class="property">status</span> == <span class="number">200</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="title function_">alert</span>(<span class="string">&quot;连接服务器成功&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">                    &#125;</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="title function_">alert</span>(<span class="string">&quot;连接服务器失败&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">                    &#125;</span></span><br><span class="line"><span class="language-javascript">                &#125;);</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 上传Excel文件</span></span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">excelUpload</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">var</span> excelUploadUrl = <span class="string">&quot;http://localhost:8003/excel/readExcelIntoDB&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">var</span> formData = <span class="keyword">new</span> <span class="title class_">FormData</span>();</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">                formData.<span class="title function_">append</span>(<span class="string">&#x27;excel&#x27;</span>, <span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">file</span>.<span class="property">files</span>[<span class="number">0</span>]);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">                axios.<span class="title function_">post</span>(excelUploadUrl, formData).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(res.<span class="property">data</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">if</span> (res.<span class="property">data</span>.<span class="property">status</span> == <span class="number">200</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="title function_">alert</span>(<span class="string">&quot;文件上传成功！&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">                    &#125;</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="title function_">alert</span>(<span class="string">&quot;文件解析失败！&quot;</span> + res.<span class="property">data</span>.<span class="property">msg</span>);</span></span><br><span class="line"><span class="language-javascript">                    &#125;</span></span><br><span class="line"><span class="language-javascript">                &#125;);</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>‍</p><p>后端，连接的是mysql数据库</p><p><code>ExcelService.java</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">package com.excel.service;</span><br><span class="line"></span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.jdbc.core.JdbcTemplate;</span><br><span class="line">import org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line">@Service</span><br><span class="line">public class ExcelService &#123;</span><br><span class="line"></span><br><span class="line">    private final JdbcTemplate jdbcTemplate;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    public ExcelService(JdbcTemplate jdbcTemplate) &#123;</span><br><span class="line">        this.jdbcTemplate = jdbcTemplate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void insertExcelData(String sqlStr)</span><br><span class="line">    &#123;</span><br><span class="line">        jdbcTemplate.update(sqlStr);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>‍</p><p><code>ExcelController.java</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 从数据库导出到Excel</span><br><span class="line"> *</span><br><span class="line"> * @return</span><br><span class="line"> * @throws IOException</span><br><span class="line"> */</span><br><span class="line">@GetMapping(&quot;/createExcelFromDB&quot;)</span><br><span class="line">@ApiOperation(value = &quot;从数据库导出Excel文件&quot;, notes = &quot;从数据库导出Excel文件&quot;, httpMethod = &quot;GET&quot;)</span><br><span class="line">public String createExcelFromDB() throws IOException &#123;</span><br><span class="line"></span><br><span class="line">    // 获取数据源</span><br><span class="line">    StringBuilder sb = new StringBuilder();</span><br><span class="line">    sb.append(&quot;select aia.invoice_num,hou.name org_name,to_char(aia.gl_date,&#x27;yyyy-mm-dd hh24:mi:ss&#x27;) gl_date &quot;);</span><br><span class="line">    sb.append(&quot;from ap_invoices_all aia,hr_operating_units hou &quot;);</span><br><span class="line">    sb.append(&quot;where 1=1 and aia.org_id = hou.organization_id &quot;);</span><br><span class="line">    sb.append(&quot;and gl_date &gt;= to_date(&#x27;2021-05-01&#x27;,&#x27;yyyy-mm-dd&#x27;)&quot;);</span><br><span class="line"></span><br><span class="line">    // fixme：测试sql语句</span><br><span class="line">    System.out.println(&quot;查询语句:&quot; + sb.toString());</span><br><span class="line"></span><br><span class="line">    List<span class="tag">&lt;<span class="name">ApInvoiceVO</span>&gt;</span> invoiceVOList = apInvoiceService.queryInvoiceInfo(sb.toString());</span><br><span class="line"></span><br><span class="line">    String excelFilePath = &quot;/Users/kalosora/Desktop/sampleDB.xls&quot;;</span><br><span class="line">    File excelFile = new File(excelFilePath);</span><br><span class="line">    if (excelFile.exists()) &#123;</span><br><span class="line">        excelFile.createNewFile();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 开始创建Excel</span><br><span class="line">    HSSFWorkbook workbook = new HSSFWorkbook();</span><br><span class="line">    HSSFSheet sheet = workbook.createSheet(&quot;Sheet1&quot;);</span><br><span class="line">    // 设置表头</span><br><span class="line">    HSSFRow row = sheet.createRow(0);</span><br><span class="line">    row.createCell(0).setCellValue(&quot;发票编号&quot;);</span><br><span class="line">    row.createCell(1).setCellValue(&quot;经营单位&quot;);</span><br><span class="line">    row.createCell(2).setCellValue(&quot;GL日期&quot;);</span><br><span class="line">    // 写入到Sheet1中</span><br><span class="line">    for (int i = 1; i &lt; invoiceVOList.size(); i++) &#123;</span><br><span class="line">        row = sheet.createRow(i);</span><br><span class="line">        // 设置单元格内容，从0开始</span><br><span class="line">        row.createCell(0).setCellValue(invoiceVOList.get(i).getInvoiceNum());</span><br><span class="line">        row.createCell(1).setCellValue(invoiceVOList.get(i).getOrgName());</span><br><span class="line">        row.createCell(2).setCellValue(invoiceVOList.get(i).getGlDate());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 设置Excel备注信息</span><br><span class="line">    setExcelDesc(workbook);</span><br><span class="line"></span><br><span class="line">    // 写入到Excel</span><br><span class="line">    FileOutputStream fos = new FileOutputStream(excelFile);</span><br><span class="line">    workbook.write(fos);</span><br><span class="line">    workbook.close();</span><br><span class="line"></span><br><span class="line">    return &quot;创建成功!输出到:&quot; + excelFilePath;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 解析Excel文件，并插入到数据库</span><br><span class="line"> *</span><br><span class="line"> * @return</span><br><span class="line"> */</span><br><span class="line">@PostMapping(&quot;/readExcelIntoDB&quot;)</span><br><span class="line">@ApiOperation(value = &quot;解析Excel文件并插入到数据库&quot;, notes = &quot;解析Excel文件并插入到数据库&quot;, httpMethod = &quot;POST&quot;)</span><br><span class="line">public Map&lt;String, Object&gt; readExcelIntoDB(@RequestParam(&quot;excel&quot;) MultipartFile excel) &#123;</span><br><span class="line">    Map&lt;String, Object&gt; resultMap = new HashMap<span class="tag">&lt;&gt;</span>();</span><br><span class="line"></span><br><span class="line">    // 校验文件类型</span><br><span class="line">    String originFile = excel.getOriginalFilename();</span><br><span class="line">    if (!originFile.contains(&quot;xls&quot;) &amp;&amp; !originFile.contains(&quot;xlsx&quot;)) &#123;</span><br><span class="line">        resultMap.put(&quot;status&quot;, -1);</span><br><span class="line">        resultMap.put(&quot;msg&quot;, &quot;无法解析的Excel文件类型&quot;);</span><br><span class="line">        return resultMap;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 解析Excel文件，xls文件最大行数65535，使用POI进行简单的数据导入</span><br><span class="line">    Map&lt;Integer, List<span class="tag">&lt;<span class="name">String</span>&gt;</span>&gt; excelMap = new HashMap<span class="tag">&lt;&gt;</span>();</span><br><span class="line">    try &#123;</span><br><span class="line">        InputStream is = excel.getInputStream();</span><br><span class="line">        Workbook workBook = new HSSFWorkbook(is, true);</span><br><span class="line">        excelMap = processWorkBook(workBook);</span><br><span class="line"></span><br><span class="line">    &#125; catch (IOException e) &#123;</span><br><span class="line">        System.out.println(&quot;获取Excel文件失败：&quot; + e.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 拼接Mysql SQL语句,当然也可以采用实体类的方式。拼接的方式比较节省空间</span><br><span class="line">    StringBuilder sb = new StringBuilder();</span><br><span class="line">    sb.append(&quot;insert into `sample-table` (column1,column2,column3) values &quot;);</span><br><span class="line">    // 插入到数据库，第0行一般为标题，故忽略</span><br><span class="line">    for (int i = 1; i &lt; excelMap.size(); i++) &#123;</span><br><span class="line">        List<span class="tag">&lt;<span class="name">String</span>&gt;</span> columnList = excelMap.get(i);</span><br><span class="line"></span><br><span class="line">        StringJoiner joiner = new StringJoiner(&quot;,&quot;, &quot;(&quot;, &quot;),&quot;);</span><br><span class="line">        for (String column : columnList) &#123;</span><br><span class="line">            column = &quot;&#x27;&quot; + column + &quot;&#x27;&quot;;</span><br><span class="line">            joiner.add(column);</span><br><span class="line">        &#125;</span><br><span class="line">        sb.append(joiner);</span><br><span class="line">    &#125;</span><br><span class="line">    String sqlStr = sb.toString();</span><br><span class="line">    sqlStr = sqlStr.substring(0, sqlStr.lastIndexOf(&quot;,&quot;));</span><br><span class="line">    System.out.println(&quot;sql语句:&quot; + sqlStr);</span><br><span class="line"></span><br><span class="line">    // 插入到数据库</span><br><span class="line">    excelService.insertExcelData(sqlStr);</span><br><span class="line"></span><br><span class="line">    resultMap.put(&quot;status&quot;, 200);</span><br><span class="line">    return resultMap;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 处理Excel文件</span><br><span class="line"> *</span><br><span class="line"> * @param workbook</span><br><span class="line"> * @return</span><br><span class="line"> */</span><br><span class="line">private Map&lt;Integer, List<span class="tag">&lt;<span class="name">String</span>&gt;</span>&gt; processWorkBook(Workbook workbook) &#123;</span><br><span class="line">    Sheet sheet = workbook.getSheetAt(0);</span><br><span class="line"></span><br><span class="line">    // 二维集合对应Excel二维表</span><br><span class="line">    Map&lt;Integer, List<span class="tag">&lt;<span class="name">String</span>&gt;</span>&gt; map = new HashMap<span class="tag">&lt;&gt;</span>();</span><br><span class="line"></span><br><span class="line">    int i = 0;</span><br><span class="line">    for (Row row : sheet) &#123;</span><br><span class="line">        map.put(i, new ArrayList<span class="tag">&lt;<span class="name">String</span>&gt;</span>());</span><br><span class="line">        for (Cell cell : row) &#123; // 遍历当前行的所有cell</span><br><span class="line">            switch (cell.getCellType()) &#123;</span><br><span class="line">                case STRING:</span><br><span class="line">                    map.get(i).add(cell.getRichStringCellValue().getString()); // 如果是字符串则保存</span><br><span class="line">                    break;</span><br><span class="line">                case _NONE:</span><br><span class="line">                    break;</span><br><span class="line">                case NUMERIC:</span><br><span class="line">                    map.get(i).add(cell.getNumericCellValue() + &quot;&quot;); //将数值转换为字符串</span><br><span class="line">                    break;</span><br><span class="line">                case BOOLEAN:</span><br><span class="line">                    break;</span><br><span class="line">                case FORMULA:</span><br><span class="line">                    break;</span><br><span class="line">                case BLANK:</span><br><span class="line">                    break;</span><br><span class="line">                case ERROR:</span><br><span class="line">                    break;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return map;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>‍</p><p>‍</p><h4 id="改进：添加AOP并观察单线程运行速度"><a href="#改进：添加AOP并观察单线程运行速度" class="headerlink" title="改进：添加AOP并观察单线程运行速度"></a>改进：添加AOP并观察单线程运行速度</h4><p>尝试导入10w条数据，并观察导入的速度，添加AOP拦截</p><h5 id="AOP配置"><a href="#AOP配置" class="headerlink" title="AOP配置"></a>AOP配置</h5><p>0.修改<code>application.yml</code>配置文件，修改允许上传文件的尺寸</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  profiles:</span><br><span class="line">    active: mariadb</span><br><span class="line">  servlet:</span><br><span class="line">    multipart:</span><br><span class="line">      max-file-size: 50MB</span><br><span class="line">      max-request-size: 50MB</span><br></pre></td></tr></table></figure><p>1.<code>pom.xml</code>引入AOP依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-aop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2.Aspect配置类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.excel.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.ProceedingJoinPoint;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Around;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Aspect;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServiceLogAspect</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">Logger</span> <span class="variable">logger</span> <span class="operator">=</span> LoggerFactory.getLogger(ServiceLogAspect.class);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * AOP通知：</span></span><br><span class="line"><span class="comment">     * 1.前置通知</span></span><br><span class="line"><span class="comment">     * 2.后置通知</span></span><br><span class="line"><span class="comment">     * 3.环绕通知：调用service之前和之后执行</span></span><br><span class="line"><span class="comment">     * 4.异常通知：service发生异常的时候通知</span></span><br><span class="line"><span class="comment">     * 5.最终通知</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Around(&quot;execution(* com.excel.controller.*.*(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">recordTimeOfService</span><span class="params">(ProceedingJoinPoint joinPoint)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        logger.info(<span class="string">&quot;==== 开始执行 &#123;&#125;.&#123;&#125; ====&quot;</span>,</span><br><span class="line">                joinPoint.getTarget().getClass(),</span><br><span class="line">                joinPoint.getSignature().getName());</span><br><span class="line"></span><br><span class="line">        <span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">        <span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> joinPoint.proceed();</span><br><span class="line"></span><br><span class="line">        <span class="type">long</span> <span class="variable">end</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        <span class="type">long</span> <span class="variable">takeTime</span> <span class="operator">=</span> end - start;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (takeTime &gt; <span class="number">3000</span>) &#123;</span><br><span class="line">            logger.error(<span class="string">&quot;当前执行耗时：&#123;&#125;&quot;</span>, takeTime);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (takeTime &gt; <span class="number">2000</span>) &#123;</span><br><span class="line">            logger.warn(<span class="string">&quot;当前执行耗时：&#123;&#125;&quot;</span>, takeTime);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            logger.info(<span class="string">&quot;当前执行耗时：&#123;&#125;&quot;</span>, takeTime);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>‍</p><h5 id="数据导入测试"><a href="#数据导入测试" class="headerlink" title="数据导入测试"></a>数据导入测试</h5><p>准备了10w行的xls文档，导入到空表，观察测试结果</p><p>![image.png](Java 多线程导入excel数据&#x2F;image-20210526102050-srjdrwj.png)</p><p>‍</p><p>实际测试发现，仅能导入65535行，耗时1875ms</p><p>springboot单机导入</p><p>![image.png](Java 多线程导入excel数据&#x2F;image-20210526103408-jsigw9k.png)</p><p>mysql数据总数</p><p>![image.png](Java 多线程导入excel数据&#x2F;image-20210526102956-x5hphwk.png)</p><p>‍</p><h3 id="解析xlsx的Excel表格"><a href="#解析xlsx的Excel表格" class="headerlink" title="解析xlsx的Excel表格"></a>解析xlsx的Excel表格</h3><p>pom.xml添加依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 用于操作微软办公文档2007 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.poi<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>poi-ooxml<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>添加XLSX解析的方法</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">@PostMapping(&quot;/readExcelXLSXIntoDB&quot;)</span><br><span class="line">@ApiOperation(value = &quot;解析xlsx文件并插入到数据库&quot;, notes = &quot;解析xlsx文件并插入到数据库&quot;, httpMethod = &quot;POST&quot;)</span><br><span class="line">public Map&lt;String, Object&gt; readExcelXLSXIntoDB(@RequestParam(&quot;excel&quot;) MultipartFile excel) &#123;</span><br><span class="line">    Map&lt;String, Object&gt; resultMap = new HashMap<span class="tag">&lt;&gt;</span>();</span><br><span class="line"></span><br><span class="line">    // 校验文件类型</span><br><span class="line">    String originFile = excel.getOriginalFilename();</span><br><span class="line">    if (!originFile.contains(&quot;xls&quot;) &amp;&amp; !originFile.contains(&quot;xlsx&quot;)) &#123;</span><br><span class="line">        resultMap.put(&quot;status&quot;, -1);</span><br><span class="line">        resultMap.put(&quot;msg&quot;, &quot;无法解析的Excel文件类型&quot;);</span><br><span class="line">        return resultMap;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 解析Excel文件，xlsx文件最大行数100w+</span><br><span class="line">    Map&lt;Integer, List<span class="tag">&lt;<span class="name">String</span>&gt;</span>&gt; excelMap = new HashMap<span class="tag">&lt;&gt;</span>();</span><br><span class="line">    try &#123;</span><br><span class="line">        InputStream is = excel.getInputStream();</span><br><span class="line">        Workbook workBook = new XSSFWorkbook(is);</span><br><span class="line">        excelMap = processWorkBook(workBook);</span><br><span class="line"></span><br><span class="line">    &#125; catch (IOException e) &#123;</span><br><span class="line">        System.out.println(&quot;获取Excel文件失败：&quot; + e.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 拼接Mysql SQL语句,当然也可以采用实体类的方式。拼接的方式比较节省空间</span><br><span class="line">    StringBuilder sb = new StringBuilder();</span><br><span class="line">    sb.append(&quot;insert into `sample-table` (column1,column2,column3) values &quot;);</span><br><span class="line">    // 插入到数据库，第0行一般为标题，故忽略</span><br><span class="line">    for (int i = 1; i &lt; excelMap.size(); i++) &#123;</span><br><span class="line">        List<span class="tag">&lt;<span class="name">String</span>&gt;</span> columnList = excelMap.get(i);</span><br><span class="line"></span><br><span class="line">        StringJoiner joiner = new StringJoiner(&quot;,&quot;, &quot;(&quot;, &quot;),&quot;);</span><br><span class="line">        for (String column : columnList) &#123;</span><br><span class="line">            column = &quot;&#x27;&quot; + column + &quot;&#x27;&quot;;</span><br><span class="line">            joiner.add(column);</span><br><span class="line">        &#125;</span><br><span class="line">        sb.append(joiner);</span><br><span class="line">    &#125;</span><br><span class="line">    String sqlStr = sb.toString();</span><br><span class="line">    sqlStr = sqlStr.substring(0, sqlStr.lastIndexOf(&quot;,&quot;));</span><br><span class="line">    System.out.println(&quot;sql语句:&quot; + sqlStr);</span><br><span class="line"></span><br><span class="line">    // 插入到数据库</span><br><span class="line">    excelService.insertExcelData(sqlStr);</span><br><span class="line"></span><br><span class="line">    resultMap.put(&quot;status&quot;, 200);</span><br><span class="line">    return resultMap;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>‍</p><p>实际测试发现，导入10W行</p><p>![image.png](Java 多线程导入excel数据&#x2F;image-20210526160723-yzwn6bj.png)</p><p>‍</p><p>mysql数据总数</p><p>![image.png](Java 多线程导入excel数据&#x2F;image-20210526160746-jrxa084.png)</p><p>‍</p><h3 id="多线程导入"><a href="#多线程导入" class="headerlink" title="多线程导入"></a>多线程导入</h3><p>场景：Springboot 单线程导入100w行Excel数据，报GC溢出</p><blockquote><p>GC Overhead Limit Exceeded Error简介</p><p>OutOfMemoryError是java.lang.VirtualMachineError的子类，当JVM资源利用出现问题时抛出，更具体地说，这个错误是由于JVM花费太长时间执行GC且只能回收很少的堆内存时抛出的。根据Oracle官方文档，默认情况下，如果Java进程花费98%以上的时间执行GC，并且每次只有不到2%的堆被恢复，则JVM抛出此错误。换句话说，<strong>这意味着我们的应用程序几乎耗尽了所有可用内存</strong>，垃圾收集器花了太长时间试图清理它，并多次失败。</p><p>在这种情况下，用户会体验到应用程序响应非常缓慢，通常只需要几毫秒就能完成的某些操作，此时则需要更长的时间来完成，这是因为所有的CPU正在进行垃圾收集，因此无法执行其他任务。</p></blockquote><p>![image.png](Java 多线程导入excel数据&#x2F;image-20210527134344-07tmkad.png)</p><p>‍</p><h4 id="改进：生产者消费者模型"><a href="#改进：生产者消费者模型" class="headerlink" title="改进：生产者消费者模型"></a>改进：生产者消费者模型</h4><h5 id="步骤分解"><a href="#步骤分解" class="headerlink" title="步骤分解"></a>步骤分解</h5><ol><li><p>获取上传的文件并保存副本到临时目录</p></li><li><p>确定长度</p><ol><li>文件总长度</li><li>每个线程处理的任务长度</li><li>生产者预计线程数，根据机器性能给定，或者用 文件长度&#x2F;线程任务长度</li><li>消费者预计线程数，根据机器性能给定，或者按比例分配（生产者:消费者 &#x3D; 4:1）</li></ol></li><li><p>数据分片处理</p><ol><li><p>多线程任务一般都是需要进行数据分片</p></li><li><p>任务开始位置：<code>I * 线程任务长度</code></p></li><li><p>任务结束位置：<code>（I+1） * 线程任务长度</code></p></li><li><p>Excel文件处理</p><ol><li><code>sheet.getRow(startPos).getRowNum()</code>获取特定行数进行行循环</li><li><code>Map&lt;Integer, List&lt;String&gt;&gt;</code>定义数据结构保存Excel二维表</li><li><code>map.get(i).add(cell.getRichStringCellValue().getString())</code>进行列循环并保存到数据结构中</li><li>拼接成mysql的<code>insert into</code>语句，并放入生产者队列中</li></ol></li></ol></li><li><p>开启多线程</p><ol><li><code>ExecutorService</code>分别开启生产者和消费者线程</li><li><code>CountDownLatch</code>观察生产者任务（转换mysql语句）是否完成</li><li><code>LinkedBlockingQueue</code>线程安全的无界链队列，保存mysql语句供消费者调用</li></ol></li></ol><p>‍</p><p>实例代码：</p><p>Controller</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/readXLSXMultiIntoDB&quot;)</span></span><br><span class="line"><span class="meta">@ApiOperation(value = &quot;多线程导入xlsx文件到数据库&quot;, notes = &quot;多线程导入xlsx文件到数据库&quot;, httpMethod = &quot;POST&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title function_">readXLSXMultiIntoDB</span><span class="params">(<span class="meta">@RequestParam(&quot;excel&quot;)</span> MultipartFile excel)</span> &#123;</span><br><span class="line">    Map&lt;String, Object&gt; resultMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// TODO 多线程处理EXCEL时，文件要先保存到本地</span></span><br><span class="line">    <span class="comment">// https://blog.csdn.net/bieber007/article/details/109963775</span></span><br><span class="line">    <span class="type">MultipartFile</span> <span class="variable">multipartFile</span> <span class="operator">=</span> excel;</span><br><span class="line">    <span class="type">String</span> <span class="variable">localStorePath</span> <span class="operator">=</span> <span class="string">&quot;/Users/kalosora/Desktop/exceltmp/&quot;</span> + excel.getOriginalFilename();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        multipartFile.transferTo(<span class="keyword">new</span> <span class="title class_">File</span>(localStorePath));</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;保存上传文件失败:&quot;</span> + e.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 打开本地文件</span></span><br><span class="line">    <span class="type">File</span> <span class="variable">localFile</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(localStorePath);</span><br><span class="line">    <span class="type">Workbook</span> <span class="variable">workBook</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="type">Sheet</span> <span class="variable">sheet</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(localFile);</span><br><span class="line">        workBook = <span class="keyword">new</span> <span class="title class_">XSSFWorkbook</span>(is);</span><br><span class="line">        <span class="comment">// 默认读取第一个表格</span></span><br><span class="line">        sheet = workBook.getSheetAt(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        resultMap.put(<span class="string">&quot;status&quot;</span>, -<span class="number">1</span>);</span><br><span class="line">        resultMap.put(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;解析Excel文件失败: &quot;</span> + e.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 模拟已知文档长度，如果计算的话需要50秒，这里节省性能</span></span><br><span class="line">    <span class="type">Integer</span> <span class="variable">fileLength</span> <span class="operator">=</span> <span class="number">1000000</span>;  <span class="comment">//500000，单个线程处理5000，通过测试，耗时335s</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 假设每个线程处理5000数据</span></span><br><span class="line">    <span class="type">Integer</span> <span class="variable">threadLength</span> <span class="operator">=</span> <span class="number">5000</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 计算生产者 &amp; 消费者线程数</span></span><br><span class="line">    <span class="keyword">final</span> <span class="type">Integer</span> <span class="variable">producerThreadCount</span> <span class="operator">=</span> fileLength / threadLength;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">Integer</span> <span class="variable">consumerThreadCount</span> <span class="operator">=</span> producerThreadCount / <span class="number">4</span>; <span class="comment">// 生产者:消费者 4:1</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 任务队列</span></span><br><span class="line">    LinkedBlockingQueue&lt;String&gt; excelQueue = <span class="keyword">new</span> <span class="title class_">LinkedBlockingQueue</span>&lt;&gt;();</span><br><span class="line">    <span class="type">CountDownLatch</span> <span class="variable">latch</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CountDownLatch</span>(producerThreadCount);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 机器性能限制，只开启100个线程</span></span><br><span class="line">    <span class="type">ExecutorService</span> <span class="variable">executorService</span> <span class="operator">=</span> Executors.newFixedThreadPool(<span class="number">100</span>);</span><br><span class="line">    <span class="type">ExecutorService</span> <span class="variable">consumerService</span> <span class="operator">=</span> Executors.newFixedThreadPool(consumerThreadCount);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 启动生产者</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; producerThreadCount; i++) &#123;</span><br><span class="line">        <span class="comment">// 创建线程副本</span></span><br><span class="line">        <span class="type">Integer</span> <span class="variable">LocalI</span> <span class="operator">=</span> i;</span><br><span class="line">        <span class="type">Sheet</span> <span class="variable">localSheet</span> <span class="operator">=</span> sheet;</span><br><span class="line"></span><br><span class="line">        executorService.submit(() -&gt; &#123;</span><br><span class="line">            <span class="type">Integer</span> <span class="variable">startPos</span> <span class="operator">=</span> LocalI * threadLength + <span class="number">1</span>;</span><br><span class="line">            <span class="type">Integer</span> <span class="variable">endPos</span> <span class="operator">=</span> (LocalI + <span class="number">1</span>) * threadLength;</span><br><span class="line">            <span class="type">CountDownLatch</span> <span class="variable">localCountDown</span> <span class="operator">=</span> latch;</span><br><span class="line"></span><br><span class="line">            processXLSXMulti(excelQueue, localCountDown, localSheet, startPos, endPos);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 启动消费者</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; consumerThreadCount; i++) &#123;</span><br><span class="line">        consumerService.submit(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (excelQueue.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="type">String</span> <span class="variable">sqlStr</span> <span class="operator">=</span> excelQueue.poll();</span><br><span class="line">                    <span class="comment">// 插入到数据库</span></span><br><span class="line">                    excelService.insertExcelData(sqlStr);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        latch.await();</span><br><span class="line">        System.out.println(<span class="string">&quot;生产者任务已完成!&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;任务屏障失败:&quot;</span> + e.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 阻塞，等待消费者任务执行完毕</span></span><br><span class="line">    System.out.println(<span class="string">&quot;等待消费者任务 ...&quot;</span>);</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (excelQueue.size() &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            executorService.shutdown();</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    resultMap.put(<span class="string">&quot;status&quot;</span>, <span class="number">200</span>);</span><br><span class="line">    <span class="keyword">return</span> resultMap;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 生产者：读取XLSX数据</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> sheet</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> startPos Excel开始位置</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> endPos   Excel结束为止</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">processXLSXMulti</span><span class="params">(LinkedBlockingQueue&lt;String&gt; excelQueue,</span></span><br><span class="line"><span class="params">                              CountDownLatch localCountDown,</span></span><br><span class="line"><span class="params">                              Sheet sheet,</span></span><br><span class="line"><span class="params">                              Integer startPos,</span></span><br><span class="line"><span class="params">                              Integer endPos)</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 二维集合对应Excel二维表</span></span><br><span class="line">    Map&lt;Integer, List&lt;String&gt;&gt; excelMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取起止行数</span></span><br><span class="line">    <span class="type">Integer</span> <span class="variable">startRowNum</span> <span class="operator">=</span> sheet.getRow(startPos).getRowNum();</span><br><span class="line">    <span class="type">Integer</span> <span class="variable">endRowNum</span> <span class="operator">=</span> sheet.getRow(endPos).getRowNum();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 行循环</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">row</span> <span class="operator">=</span> startRowNum; row &lt;= endRowNum; row++) &#123;</span><br><span class="line">        <span class="type">Row</span> <span class="variable">currentRow</span> <span class="operator">=</span> sheet.getRow(row);</span><br><span class="line">        excelMap.put(count, <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt;());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 列循环</span></span><br><span class="line">        <span class="keyword">for</span> (Cell cell : currentRow) &#123; <span class="comment">// 遍历当前行的所有cell</span></span><br><span class="line">            <span class="keyword">switch</span> (cell.getCellType()) &#123;</span><br><span class="line">                <span class="keyword">case</span> STRING:</span><br><span class="line">                    excelMap.get(count).add(cell.getRichStringCellValue().getString()); <span class="comment">// 如果是字符串则保存</span></span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> _NONE:</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> NUMERIC:</span><br><span class="line">                    excelMap.get(count).add(cell.getNumericCellValue() + <span class="string">&quot;&quot;</span>); <span class="comment">//将数值转换为字符串</span></span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> BOOLEAN:</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> FORMULA:</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> BLANK:</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> ERROR:</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        count++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;[线程&quot;</span> + Thread.currentThread().getId() + <span class="string">&quot;] &quot;</span></span><br><span class="line">            + <span class="string">&quot;EXCEL开始行数: &quot;</span> + startRowNum</span><br><span class="line">            + <span class="string">&quot;，EXCEL结束行数: &quot;</span> + endRowNum</span><br><span class="line">            + <span class="string">&quot;, 列表长度：&quot;</span> + excelMap.size());</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 拼接Mysql SQL语句,当然也可以采用实体类的方式。拼接的方式比较节省空间</span></span><br><span class="line">    <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">    sb.append(<span class="string">&quot;insert into `sample-table` (column1,column2,column3) values &quot;</span>);</span><br><span class="line">    <span class="comment">// 插入到数据库，第0行一般为标题，故忽略</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">0</span>; k &lt; count; k++) &#123;</span><br><span class="line">        List&lt;String&gt; columnList = excelMap.get(k);</span><br><span class="line"></span><br><span class="line">        <span class="type">StringJoiner</span> <span class="variable">joiner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringJoiner</span>(<span class="string">&quot;,&quot;</span>, <span class="string">&quot;(&quot;</span>, <span class="string">&quot;),&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (String column : columnList) &#123;</span><br><span class="line">            column = <span class="string">&quot;&#x27;&quot;</span> + column + <span class="string">&quot;&#x27;&quot;</span>;</span><br><span class="line">            joiner.add(column);</span><br><span class="line">        &#125;</span><br><span class="line">        sb.append(joiner);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">String</span> <span class="variable">sqlStr</span> <span class="operator">=</span> sb.toString();</span><br><span class="line">    sqlStr = sqlStr.substring(<span class="number">0</span>, sqlStr.lastIndexOf(<span class="string">&quot;,&quot;</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 任务入队</span></span><br><span class="line">    excelQueue.offer(sqlStr);</span><br><span class="line">    localCountDown.countDown();</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;[线程&quot;</span> + Thread.currentThread().getId() + <span class="string">&quot;] 已完成&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>‍</p><p>Service</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExcelService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> JdbcTemplate jdbcTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ExcelService</span><span class="params">(JdbcTemplate jdbcTemplate)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.jdbcTemplate = jdbcTemplate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insertExcelData</span><span class="params">(String sqlStr)</span></span><br><span class="line">    &#123;</span><br><span class="line">        jdbcTemplate.update(sqlStr);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>‍</p><p>进一步优化的方案</p><blockquote><p>提升Excel导入速度的方法：</p><ul><li>使用更快的 Excel 读取框架(推荐使用阿里 EasyExcel)</li><li>对于需要与数据库交互的校验、按照业务逻辑适当的使用缓存。用空间换时间</li><li>使用 values(),(),() 拼接长 SQL 一次插入多行数据</li><li>使用多线程插入数据，利用掉网络IO等待时间(推荐使用并行流，简单易用)</li><li>避免在循环中打印无用的日志</li></ul><p><a href="https://zhuanlan.zhihu.com/p/258525453">https://zhuanlan.zhihu.com/p/258525453</a></p></blockquote><p>‍</p><h2 id="导出到Excel"><a href="#导出到Excel" class="headerlink" title="导出到Excel"></a>导出到Excel</h2><p>从plsql中导出100w条数据，耗时745秒</p><p>多线程目标：导出100w条数据，至少优化到400秒以下</p><p>![image.png](Java 多线程导入excel数据&#x2F;image-20210527133017-h2hde4n.png)</p><p>有空再做吧…</p><p>‍</p><p>‍</p><h2 id="参考来源"><a href="#参考来源" class="headerlink" title="参考来源"></a>参考来源</h2><p><a href="https://www.zhihu.com/question/23258804">java多线程进行大批量EXcel数据导入实现方案</a></p><p><a href="https://blog.csdn.net/holmofy/article/details/82532311">java POI详解</a></p><p><a href="https://blog.csdn.net/joycesunny/article/details/106246302">java POI 实例</a></p><p><a href="https://github.com/alibaba/easyexcel">代替POI的EasyExcel</a></p><p><a href="https://www.iocoder.cn/Spring-Boot/battcn/v2-orm-jdbc//">Spring Jdbc Template</a></p><p>‍</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java8-11的新特性</title>
      <link href="/2021/04/07/Java8-11%E7%9A%84%E6%96%B0%E7%89%B9%E6%80%A7/"/>
      <url>/2021/04/07/Java8-11%E7%9A%84%E6%96%B0%E7%89%B9%E6%80%A7/</url>
      
        <content type="html"><![CDATA[<h1 id="Java8-11的新特性"><a href="#Java8-11的新特性" class="headerlink" title="Java8-11的新特性"></a>Java8-11的新特性</h1><h2 id="Java8"><a href="#Java8" class="headerlink" title="Java8"></a>Java8</h2><h3 id="Lambda-Functional-Interface"><a href="#Lambda-Functional-Interface" class="headerlink" title="Lambda &amp; Functional Interface"></a>Lambda &amp; Functional Interface</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LambdaExamples</span> &#123;</span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">100</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>误区：</p><ul><li>认为的：通过匿名函数生成Runnable对象，传递给Thread</li><li>事实上：内部优化直接调用了匿名函数（invokedynamic指令)</li></ul><h3 id="方法引用-操作符"><a href="#方法引用-操作符" class="headerlink" title="方法引用::操作符"></a>方法引用<code>::</code>操作符</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MethodReference</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">var</span> <span class="variable">val</span> <span class="operator">=</span> List.of(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>).stream()</span><br><span class="line">                .map(Object::toString)</span><br><span class="line">                .map(Integer::<span class="keyword">new</span>)</span><br><span class="line">                .reduce((a,b)-&gt;a+b);</span><br><span class="line">            </span><br><span class="line">        System.out.println(val);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Stream"><a href="#Stream" class="headerlink" title="Stream"></a>Stream</h3><p>一个Monad。 函数式、流计算重磅炸弹，<strong>见之前讲流和Monad部分</strong> 。</p><h3 id="Optional"><a href="#Optional" class="headerlink" title="Optional"></a>Optional<T></T></h3><p>一个Monad。 流计算必备工具，减少空值检查。另一个还没有支持，但比较重要的Monad是Try。这个在实现AOP框架的程序中，我们已经使用到了。<strong>见之前讲流和Monad部分</strong></p><h3 id="接口的方法-static-default-private"><a href="#接口的方法-static-default-private" class="headerlink" title="接口的方法(static, default, private)"></a>接口的方法(static, default, private)</h3><ul><li>static(java 8)</li><li>default(java 8)</li><li>private(java 9)</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Stream</span>&lt;T&gt; <span class="keyword">extends</span> <span class="title class_">BaseStream</span>&lt;T, Stream&lt;T&gt;&gt; &#123;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 每个Stream Monad都有这个方法</span></span><br><span class="line">   <span class="keyword">default</span> Stream&lt;T&gt; <span class="title function_">takeWhile</span><span class="params">(Predicate&lt;? <span class="built_in">super</span> T&gt; predicate)</span> &#123;</span><br><span class="line">   ...</span><br><span class="line">       foo(); <span class="comment">// 可以调用</span></span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="comment">// 可以通过Stream.empty()构造空的流</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span>&lt;T&gt; Stream&lt;T&gt; <span class="title function_">empty</span><span class="params">()</span> &#123;</span><br><span class="line">    ...   </span><br><span class="line">   &#125;</span><br><span class="line">  </span><br><span class="line">   <span class="comment">// 不是源代码中的程序</span></span><br><span class="line">   <span class="keyword">private</span> <span class="title function_">foo</span><span class="params">()</span>&#123;&#125;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Java-8-Nashorn-JavaScript"><a href="#Java-8-Nashorn-JavaScript" class="headerlink" title="Java 8 Nashorn JavaScript"></a>Java 8 Nashorn JavaScript</h3><p>在Java8中增加，在Java11中标记为Deprecated， 在Java15中移出的新特性。支持javascriptES5语法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test_engine</span><span class="params">()</span> <span class="keyword">throws</span> ScriptException &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">var</span> <span class="variable">jscode</span> <span class="operator">=</span> <span class="string">&quot; [1,2,3].map(function(x)&#123;return x + 1;&#125;).join(&#x27;-&#x27;);&quot;</span>;</span><br><span class="line">    <span class="type">ScriptEngineManager</span> <span class="variable">scriptEngineManager</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ScriptEngineManager</span>();</span><br><span class="line">    <span class="type">ScriptEngine</span> <span class="variable">nashorn</span> <span class="operator">=</span> scriptEngineManager.getEngineByName(<span class="string">&quot;nashorn&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> nashorn.eval(jscode);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    System.out.println(result);</span><br><span class="line">    <span class="comment">// 2-3-4</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>脚本这么多专门选JS没有优势。</strong></p><h3 id="本地化日期处理升级"><a href="#本地化日期处理升级" class="headerlink" title="本地化日期处理升级"></a>本地化日期处理升级</h3><p>提供了Local和Zoned两种处理日期的方式，在新的API中不再允许mutable的操作（非线程安全）；另外对时区采取更好的处理方法：如果用户的系统不考虑国际化，那么就用Local的日期，如果考虑国际化，可以构造带时区的DateTime。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test_date</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">// 2022年2月22日</span></span><br><span class="line">    <span class="type">var</span> <span class="variable">date</span> <span class="operator">=</span> LocalDate.of(<span class="number">2022</span>, <span class="number">2</span>, <span class="number">22</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 10:55:59</span></span><br><span class="line">    <span class="type">var</span> <span class="variable">time</span> <span class="operator">=</span> LocalTime.of(<span class="number">10</span>, <span class="number">55</span>, <span class="number">59</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 当前时间</span></span><br><span class="line">    <span class="type">var</span> <span class="variable">datetime</span> <span class="operator">=</span> LocalDateTime.of(date, time);</span><br><span class="line"></span><br><span class="line">    <span class="type">var</span> <span class="variable">zoneDT</span> <span class="operator">=</span> ZonedDateTime.of(datetime, ZoneId.of(<span class="string">&quot;Asia/Shanghai&quot;</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="内置了Base64工具"><a href="#内置了Base64工具" class="headerlink" title="内置了Base64工具"></a>内置了Base64工具</h3><p>tips： 对0~255之间的字符，Base64编码是以4个可见字符去描述3个字符。会增加数据的体积，但是因为所有字符都可以读，用Base64编码描述的字符串，在URL、XML中都不会被转义。</p><p>Base64.Decoder和Base64.Encoder类。</p><h2 id="Java9新特性"><a href="#Java9新特性" class="headerlink" title="Java9新特性"></a>Java9新特性</h2><h3 id="模块系统"><a href="#模块系统" class="headerlink" title="模块系统"></a>模块系统</h3><p>因为和底层原理知识结合紧密，在ClassLoader部分介绍。</p><h3 id="交互式编程环境-JShell"><a href="#交互式编程环境-JShell" class="headerlink" title="交互式编程环境(JShell)"></a>交互式编程环境(JShell)</h3><p><img src="/2021/04/07/Java8-11%E7%9A%84%E6%96%B0%E7%89%B9%E6%80%A7/836941f89ea9634e9e7ee5506d989903-20210407221013-6a1s7eu.png" alt="image-20210219120607478"></p><p>除了上图中的能力，也提供API，可以动态的eval程序。</p><h3 id="新的HTTP-2-0-Clinet"><a href="#新的HTTP-2-0-Clinet" class="headerlink" title="新的HTTP 2.0 Clinet"></a>新的HTTP 2.0 Clinet</h3><p>主要针对旧Client，提供Buidler，方便用户设置header和参数。</p><p>另外支持HTTP2.0，HTTP2.0兼容HTTP1.1的能力，主要是从性能角度进行了调优。理解HTTP2.0主要是这几个特性：</p><ul><li>多个HTTP 请求&#x2F;返回在一个TCP请求上多路复用（客户端要负责实现多路复用）</li><li>头部压缩算法（客户端要负责解压）</li><li>Server Push：服务器可能会给客户端额外的文件（浏览器要负责识别，并缓存这些文件，客户端不一定要实现）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"> <span class="type">HttpClient</span> <span class="variable">httpClient</span> </span><br><span class="line">                <span class="operator">=</span> HttpClient.newHttpClient(); </span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="type">HttpRequest</span> <span class="variable">httpRequest</span> </span><br><span class="line">    <span class="operator">=</span> HttpRequest </span><br><span class="line">    .newBuilder() </span><br><span class="line">    .headers(<span class="string">&quot;x-key&quot;</span>, <span class="string">&quot;123456&quot;</span>, <span class="string">&quot;x-name&quot;</span>, <span class="string">&quot;something&quot;</span>)</span><br><span class="line">    .uri(<span class="keyword">new</span> <span class="title class_">URI</span>(<span class="string">&quot;https://www.baidu.com&quot;</span>)) </span><br><span class="line">    .GET() </span><br><span class="line">    .build(); </span><br><span class="line"></span><br><span class="line">HttpResponse&lt;String&gt; response </span><br><span class="line">    = httpClient.send( </span><br><span class="line">    httpRequest, </span><br><span class="line">    HttpResponse.BodyHandler.asString()); </span><br><span class="line"></span><br><span class="line">System.out.println(response.statusCode());</span><br><span class="line">System.out.println(response.body());</span><br></pre></td></tr></table></figure><p>‍</p><h3 id="改进了Javadoc"><a href="#改进了Javadoc" class="headerlink" title="改进了Javadoc"></a>改进了Javadoc</h3><p>大家平时读的很多Java的文档（特别是官方的文档），就是用Javadoc生成的。 所以这也是Java文档——比较难读的原因之一。 写程序的人注释往往是为了让内部人员读懂，而文档是面向外部人员。</p><p>例如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">javadoc -d foo -html5 MyHelloWorld.java</span><br></pre></td></tr></table></figure><p>可以生成符合HTML5标准的网页。</p><h3 id="支持multirelease-jar包"><a href="#支持multirelease-jar包" class="headerlink" title="支持multirelease jar包"></a>支持multirelease jar包</h3><p>项目目录结构可以这样安排，不同的版本的程序在不同的目录下。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">|-java</span><br><span class="line">|   └──java8</span><br><span class="line">|       └── hello</span><br><span class="line">|           └── xxx.java</span><br><span class="line">|   └──java9</span><br><span class="line">|       └── hello</span><br><span class="line">|           └── xxx.java</span><br></pre></td></tr></table></figure><p>然后可以通过<code>javac</code>** **编译成不同版本的class文件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">javac --release 9 java8/hello/xxx.java</span><br><span class="line">javac --release 8 java9/hello/xxx.java</span><br></pre></td></tr></table></figure><p>最后用<code>jar</code>** <strong>可以产生不同版本的</strong>​**<code>jar</code>** **包：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jar -c -f xxx.jar -C java8 . --release 9 -C java9.</span><br></pre></td></tr></table></figure><p>这样<code>xxx.jar</code>** **中会同时有java8和java9的程序。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -cp test.jar hello <span class="comment">// 不同java版本访问不同的类</span></span><br></pre></td></tr></table></figure><p>这个功能的意义是什么？</p><p>Java升级太快了，多版本同时发布，让程序的提供者可以兼容不同用户的需求。</p><h3 id="集合的工厂方法"><a href="#集合的工厂方法" class="headerlink" title="集合的工厂方法"></a>集合的工厂方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">var</span> <span class="variable">set</span> <span class="operator">=</span> Set.of(<span class="string">&quot;Apple&quot;</span>, <span class="string">&quot;Google&quot;</span>);</span><br><span class="line"><span class="type">var</span> <span class="variable">list</span> <span class="operator">=</span> List.of(<span class="string">&quot;...&quot;</span>, <span class="string">&quot;abc&quot;</span>, <span class="number">1</span>); <span class="comment">// 报错，思考为什么？</span></span><br><span class="line"><span class="type">var</span> <span class="variable">map</span> <span class="operator">=</span> Map.of(<span class="string">&quot;String&quot;</span>, <span class="number">5</span>, <span class="string">&quot;Integer&quot;</span>, <span class="number">6</span>); </span><br></pre></td></tr></table></figure><h3 id="增加ProcessHandler"><a href="#增加ProcessHandler" class="headerlink" title="增加ProcessHandler"></a>增加ProcessHandler</h3><p>增加了一个ProcessHandler用于查看某个特定进程的信息：启动时间、关联参数等等。目前是加强对进程的支持。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ProcessBuilder</span> <span class="variable">builder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ProcessBuilder</span>(<span class="string">&quot;ls -l&quot;</span>);</span><br><span class="line"><span class="type">Process</span> <span class="variable">p</span> <span class="operator">=</span> builder.start();</span><br><span class="line">ProcessHandle.<span class="type">Info</span> <span class="variable">info</span> <span class="operator">=</span> p.info();</span><br><span class="line"></span><br><span class="line"><span class="comment">// start time</span></span><br><span class="line">info.startInstance();</span><br><span class="line"></span><br><span class="line"><span class="comment">// arguments</span></span><br><span class="line">info.arguments();</span><br></pre></td></tr></table></figure><h3 id="Stream-API增加了方法"><a href="#Stream-API增加了方法" class="headerlink" title="Stream API增加了方法"></a>Stream API增加了方法</h3><p>为了方便操作，提供了更多的Stream API。</p><ul><li>takeWhile<br>字面意思：take while x !&#x3D; 7 is hold ， 中文意思：在x !&#x3D; 7的时候，拿，否则停下来</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Stream.of(<span class="number">2</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">7</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">0</span>).takeWhile(x -&gt; x != <span class="number">7</span>)</span><br><span class="line">   .collect(Collectors.toList());</span><br><span class="line"><span class="comment">// [2,1,3]</span></span><br></pre></td></tr></table></figure><ul><li>dropWhile<br>字面意思： drop while x!&#x3D;7 is hold， 中文意思：在x!&#x3D;7的时候，丢弃，否则停下来</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Stream.of(<span class="number">2</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">7</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">0</span>).dropWhile(x -&gt; x!=<span class="number">7</span>)</span><br><span class="line">  .collect(Collectors.toList());</span><br><span class="line"><span class="comment">//[7, 4, 6, 8, 0]</span></span><br></pre></td></tr></table></figure><ul><li>iterate</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"> Stream.iterate(</span><br><span class="line">     <span class="number">10</span>,  <span class="comment">// 初始值</span></span><br><span class="line">     x -&gt; x &lt; <span class="number">100</span>, <span class="comment">// 终结断言</span></span><br><span class="line">     x-&gt;x+<span class="number">2</span> <span class="comment">// 递推函数</span></span><br><span class="line"> ).collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line"><span class="comment">// [10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98]</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>另外一个例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">jshell&gt; Stream.iterate(<span class="string">&quot;i&quot;</span>, x -&gt; x.length() &lt; <span class="number">20</span>, x-&gt;x+<span class="string">&quot;i&quot;</span>).collect(Collectors.toList());</span><br><span class="line"><span class="comment">//[i, ii, iii, iiii, iiiii, iiiiii, iiiiiii, iiiiiiii, iiiiiiiii, iiiiiiiiii, iiiiiiiiiii, iiiiiiiiiiii, iiiiiiiiiiiii, iiiiiiiiiiiiii, iiiiiiiiiiiiiii, iiiiiiiiiiiiiiii, iiiiiiiiiiiiiiiii, iiiiiiiiiiiiiiiiii, iiiiiiiiiiiiiiiiiii]</span></span><br></pre></td></tr></table></figure><ul><li>ofNullable</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Stream.ofNullable(<span class="literal">null</span>); <span class="comment">// Stream.empty()</span></span><br></pre></td></tr></table></figure><h3 id="钻石操作符语法优化"><a href="#钻石操作符语法优化" class="headerlink" title="&lt;&gt;钻石操作符语法优化"></a>&lt;&gt;钻石操作符语法优化</h3><p>允许匿名类使用钻石操作符。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Iterable&lt;Integer&gt; it = <span class="keyword">new</span> <span class="title class_">Iterable</span>&lt;&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Iterator&lt;Integer&gt; <span class="title function_">iterator</span><span class="params">()</span> &#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="CompletableFuture改进"><a href="#CompletableFuture改进" class="headerlink" title="CompletableFuture改进"></a>CompletableFuture改进</h3><p>CompletableFuture是java异步计算能力的核心，代表一个需要在未来被计算出来的的值。</p><p>在 Java9中针对已有能力，对CompletableFuture进行了提升。</p><h4 id="增加completeOnTimeout方法"><a href="#增加completeOnTimeout方法" class="headerlink" title="增加completeOnTimeout方法"></a>增加completeOnTimeout方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> <span class="keyword">throws</span> ExecutionException, InterruptedException &#123;</span><br><span class="line">    <span class="type">var</span> <span class="variable">future</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CompletableFuture</span>&lt;&gt;();</span><br><span class="line">    Executors.newCachedThreadPool().submit(() -&gt; &#123;</span><br><span class="line">        <span class="comment">//Thread.sleep(1000);</span></span><br><span class="line">        <span class="comment">// future.complete(&quot;Hello&quot;);</span></span><br><span class="line">        <span class="comment">// 等价于 </span></span><br><span class="line">        <span class="comment">// completeOnTimeout是Java9新语法</span></span><br><span class="line">        future.completeOnTimeout(<span class="string">&quot;Hello&quot;</span>, <span class="number">1000</span>, TimeUnit.MILLISECONDS);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">// sync. method blocking...</span></span><br><span class="line">    <span class="type">var</span> <span class="variable">value</span> <span class="operator">=</span> future.get();</span><br><span class="line">    System.out.println(value);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="增加直接成功-失败的future工厂方法"><a href="#增加直接成功-失败的future工厂方法" class="headerlink" title="增加直接成功&#x2F;失败的future工厂方法"></a>增加直接成功&#x2F;失败的future工厂方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span> <span class="keyword">throws</span> ExecutionException, InterruptedException &#123;</span><br><span class="line">    <span class="type">var</span> <span class="variable">successFuture</span> <span class="operator">=</span> CompletableFuture.completedFuture(<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line">    <span class="type">var</span> <span class="variable">failFuture</span> <span class="operator">=</span> CompletableFuture.failedFuture(<span class="keyword">new</span> <span class="title class_">InterruptedException</span>());</span><br><span class="line"></span><br><span class="line">    System.out.println(successFuture.get()); <span class="comment">// hello</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(failFuture.isCompletedExceptionally()) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;error&quot;</span>); <span class="comment">// print</span></span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(failFuture.get()); <span class="comment">// Exception</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>更多参考并发部分有一节对Future的专项突破课程</strong></p><h3 id="try-with-resources的改进"><a href="#try-with-resources的改进" class="headerlink" title="try-with-resources的改进"></a>try-with-resources的改进</h3><p>Java中的一部分资源对象会继承于Closeable接口，这就可以使用<code>try-with-resources</code>** **能力。例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">InputStream</span> <span class="keyword">implements</span> <span class="title class_">Closeable</span> &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果要使用的话：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> <span class="keyword">throws</span> FileNotFoundException, IOException &#123;</span><br><span class="line">    <span class="type">var</span> <span class="variable">fin</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;somefile&quot;</span>);</span><br><span class="line">    <span class="keyword">try</span>(fin) &#123; <span class="comment">// AutoClose</span></span><br><span class="line">        fin.read();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面直接对某个实现了Closeable的对象进行try，并且主动触发close能力， 是Java9的一个优化。</p><h2 id="Java-10"><a href="#Java-10" class="headerlink" title="Java 10"></a>Java 10</h2><h3 id="局部变量类型推断"><a href="#局部变量类型推断" class="headerlink" title="局部变量类型推断"></a>局部变量类型推断</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">var</span> <span class="variable">list</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;Integer&gt;();</span><br><span class="line"><span class="comment">// list is LinkedList&lt;Integer&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="type">var</span> <span class="variable">o</span> <span class="operator">=</span> Stream.of(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>);</span><br><span class="line"><span class="comment">// o is Stream&lt;Integer&gt;</span></span><br></pre></td></tr></table></figure><h3 id="JDK代码仓库整理"><a href="#JDK代码仓库整理" class="headerlink" title="JDK代码仓库整理"></a>JDK代码仓库整理</h3><p>所有JDK代码不再使用8个仓库存储：root、corba、hotspot、jaxp、jaxws、jdk、langtools、nashorn。</p><p>统一成为1个仓库。</p><p>主要是解决原子提交的问题：1个功能可能需要更新多个代码仓库。</p><h3 id="G1增加并行能力"><a href="#G1增加并行能力" class="headerlink" title="G1增加并行能力"></a>G1增加并行能力</h3><p>在mark-sweep-compact的GC算法上，再增加<strong>并行</strong> 能力。</p><p>见JVM GC部分</p><h3 id="优化：应用程序数据共享（Application-Data-Sharing"><a href="#优化：应用程序数据共享（Application-Data-Sharing" class="headerlink" title="优化：应用程序数据共享（Application Data Sharing)"></a>优化：应用程序数据共享（Application Data Sharing)</h3><p>ADS： 允许多个JVM实例共享共同用到的类，这些类以共享内存的形式存在。这样对于运行了多个JVM的机器，可以节省内存空间以及类的加载速度。</p><h3 id="计划移除JNI头生成工具"><a href="#计划移除JNI头生成工具" class="headerlink" title="计划移除JNI头生成工具"></a>计划移除JNI头生成工具</h3><p>JNI（Java Native Interface)是Java程序和Native(C, C++)程序沟通的接口。 一个Java类，如果要Native调用，通常是在Android开发当中，需要生成一个C&#x2F;C++的头文件。之前可以用javah来生成，现在用javah工具生成的时候，会有一行warning。</p><p>以后JNI的能力会被Panama项目替代，一个专门为非java语言提供接口的库。</p><h3 id="增加实验性的Graal编译器"><a href="#增加实验性的Graal编译器" class="headerlink" title="增加实验性的Graal编译器"></a>增加实验性的Graal编译器</h3><p>可以配置参数开启：</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="deletion">-XX：+ UnlockExperimentalVMOptions -XX：+ UseJVMCICompiler</span></span><br></pre></td></tr></table></figure><p>Graal是一款同时支持JIT和AOT的编译器。</p><ul><li>JIT(Just in Time)一边编译一边执行，执行完第一次之后，下一次不需要编译</li><li>AOT(Ahead of Time)，类似C&#x2F;C++那样，先编译成机器码，再执行。 注意，是机器码，越过了JVM的bytecode。</li></ul><p>目前还是实验阶段，不建议用作生产。已经发现了不少的Bug，等待进一步的修复。</p><h2 id="Java-11"><a href="#Java-11" class="headerlink" title="Java 11"></a>Java 11</h2><h3 id="引入NestedMembers概念"><a href="#引入NestedMembers概念" class="headerlink" title="引入NestedMembers概念"></a>引入NestedMembers概念</h3><p>嵌套类和它的父亲作为一组NestedMembers，可以互相访问元数据。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Nested</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">A</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;123&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">B</span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">bar</span><span class="params">()</span> <span class="keyword">throws</span> NoSuchFieldException &#123;</span><br><span class="line">            System.out.println(A.class.getDeclaredField(<span class="string">&quot;name&quot;</span>));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> <span class="keyword">throws</span> NoSuchFieldException &#123;</span><br><span class="line">        <span class="type">var</span> <span class="variable">b</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">B</span>();</span><br><span class="line">        b.bar();</span><br><span class="line">        <span class="comment">// name </span></span><br><span class="line"></span><br><span class="line">        System.out.println(Arrays.toString(A.class.getNestMembers()));</span><br><span class="line">        <span class="comment">// [Nested, A, B]</span></span><br><span class="line">    </span><br><span class="line">        System.out.println(A.class.getNestHost());</span><br><span class="line">        <span class="comment">// Nested</span></span><br><span class="line">    </span><br><span class="line">        System.out.println(Arrays.toString(B.class.getNestMembers()));</span><br><span class="line">        <span class="comment">// [Nested, A, B]</span></span><br><span class="line">    </span><br><span class="line">        System.out.println(B.class.getNestHost());</span><br><span class="line">        <span class="comment">// Nested</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="增加无操作GC回收器-Epsilon"><a href="#增加无操作GC回收器-Epsilon" class="headerlink" title="增加无操作GC回收器:Epsilon"></a>增加无操作GC回收器:Epsilon</h3><p>Epsilon不会进行垃圾回收操作，是的，你没有看错， 它不进行GC。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-<span class="variable constant_">XX</span><span class="symbol">:+UseEpsilonGC</span></span><br></pre></td></tr></table></figure><p>Epsilon虽然不GC，但是仍然承担着内存分配的工作。（Java 的 GC也是Java的内存管理工具，更多见GC部分）</p><p>有点：</p><ul><li>对于开发者明确知道不需要GC的程序有助于减少延迟</li><li>对于性能测试、压力测试场景，可以忽略GC带来的延迟</li></ul><h3 id="Lambda优化：允许使用-var定义匿名函数形参"><a href="#Lambda优化：允许使用-var定义匿名函数形参" class="headerlink" title="Lambda优化：允许使用 var定义匿名函数形参"></a>Lambda优化：允许使用 var定义匿名函数形参</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@interface</span> My&#123;&#125;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span>&#123;</span><br><span class="line">    Predicate&lt;String&gt; predicate = (<span class="meta">@My</span> <span class="keyword">var</span> a) -&gt; <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="优化：增加字符串能处理函数"><a href="#优化：增加字符串能处理函数" class="headerlink" title="优化：增加字符串能处理函数"></a>优化：增加字符串能处理函数</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot; &quot;</span>.isBlank();                <span class="comment">// true</span></span><br><span class="line"><span class="string">&quot; Foo Bar &quot;</span>.strip();          <span class="comment">// &quot;Foo Bar&quot;</span></span><br><span class="line"><span class="string">&quot; Foo Bar &quot;</span>.stripTrailing();  <span class="comment">// &quot; Foo Bar&quot;</span></span><br><span class="line"><span class="string">&quot; Foo Bar &quot;</span>.stripLeading();   <span class="comment">// &quot;Foo Bar &quot;</span></span><br><span class="line"><span class="string">&quot;Java&quot;</span>.repeat(<span class="number">3</span>);             <span class="comment">// &quot;JavaJavaJava&quot;</span></span><br><span class="line"><span class="string">&quot;A\nB\nC&quot;</span>.lines().count();    <span class="comment">// 3</span></span><br></pre></td></tr></table></figure><p>‍</p><p>‍</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java Core </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java反射 &amp; 注解学习总结</title>
      <link href="/2021/04/06/Java%E5%8F%8D%E5%B0%84/"/>
      <url>/2021/04/06/Java%E5%8F%8D%E5%B0%84/</url>
      
        <content type="html"><![CDATA[<h1 id="Java反射-注解学习总结"><a href="#Java反射-注解学习总结" class="headerlink" title="Java反射 &amp; 注解学习总结"></a>Java反射 &amp; 注解学习总结</h1><h2 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h2><h3 id="概念-作用"><a href="#概念-作用" class="headerlink" title="概念 &amp; 作用"></a>概念 &amp; 作用</h3><p>反射(reflection)：运行时查看<code>元数据</code>，反观察、修改程序内部结构。</p><ul><li><p>元数据（MetaData），指运行时的数据，如模块、类、函数、注解、源代码</p></li><li><p>运行时修改代码：一般指修改Bytecode，byte[]，用工具<code>Javasist</code></p></li></ul><p>【注意】如果在运行时分析泛型类的实例，将不会得到太多的信息，因为它们已经被擦除了。</p><p>‍</p><h3 id="反射实例"><a href="#反射实例" class="headerlink" title="反射实例"></a>反射实例</h3><p>常用方法</p><ul><li>Class.forName()：通过类全限定名获取一个class，要传入全路径</li><li>getClass()：获取一个对象的运行时类</li><li>[class].getConstructor().newInstance()：通过构造器创建一个类</li><li>[class].getDeclaredFields()：获取所有属性，包括private</li><li>[class]..getDeclaredMethods()：获取所有方法</li><li>[class].getClassLoader()：获取类加载器</li><li>method.invoke([class])：调用一个类中的所有方法</li></ul><h4 id="获取类的属性、方法"><a href="#获取类的属性、方法" class="headerlink" title="获取类的属性、方法"></a>获取类的属性、方法</h4><p>实例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchMethodException, IllegalAccessException, InvocationTargetException, InstantiationException &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建一个类</span></span><br><span class="line">    <span class="type">var</span> <span class="variable">list</span> <span class="operator">=</span> Arrays.asList(<span class="string">&quot;List&quot;</span>, <span class="string">&quot;Tree&quot;</span>, <span class="string">&quot;Array&quot;</span>);</span><br><span class="line">    <span class="type">var</span> <span class="variable">randomGen</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RandomStringGenerator</span>(list);</span><br><span class="line">    <span class="type">var</span> <span class="variable">clazz</span> <span class="operator">=</span> randomGen.getClass();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取类名</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    System.out.println(<span class="string">&quot;class name:&quot;</span> + clazz.getName());</span><br><span class="line">    System.out.println();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取所有属性</span></span><br><span class="line"><span class="comment">     *    getField() 只能获取public的，包括从父类继承来的字段</span></span><br><span class="line"><span class="comment">     *    getDeclaredField() 可以获取当前类所有的字段，包括private的，但是不能获取继承来的字段</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">var</span> <span class="variable">fields</span> <span class="operator">=</span> clazz.getDeclaredFields();</span><br><span class="line">    System.out.println(<span class="string">&quot;All fields are as below: &quot;</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> field : fields)</span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;field name: &quot;</span> + field.getName());</span><br><span class="line">        System.out.println(<span class="string">&quot;field type: &quot;</span> + field.getGenericType());</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取所有方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">var</span> <span class="variable">methods</span> <span class="operator">=</span> clazz.getDeclaredMethods();</span><br><span class="line">    System.out.println(<span class="string">&quot;All methods are as below: &quot;</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> method : methods)</span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;method sign: &quot;</span></span><br><span class="line">                + Modifier.toString(method.getModifiers()) + <span class="string">&quot; &quot;</span></span><br><span class="line">                + method.getReturnType() + <span class="string">&quot; &quot;</span></span><br><span class="line">                + method.getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>‍</p><h4 id="反射创建对象-调用方法"><a href="#反射创建对象-调用方法" class="headerlink" title="反射创建对象 &amp; 调用方法"></a>反射创建对象 &amp; 调用方法</h4><p>实例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchMethodException, IllegalAccessException, InvocationTargetException, InstantiationException &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">var</span> <span class="variable">list</span> <span class="operator">=</span> Arrays.asList(<span class="string">&quot;List&quot;</span>, <span class="string">&quot;Tree&quot;</span>, <span class="string">&quot;Array&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 通过反射创建实例，带参数的构造器</span></span><br><span class="line">    <span class="type">var</span> <span class="variable">clazz</span> <span class="operator">=</span> (RandomStringGenerator)Class.forName(<span class="string">&quot;com.javacoding.collection.RandomStringGenerator&quot;</span>)</span><br><span class="line">            .getConstructor(List.class).newInstance(list);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取main方法，并调用</span></span><br><span class="line">    <span class="type">var</span> <span class="variable">methods</span> <span class="operator">=</span> Arrays.stream(clazz.getClass().getMethods())</span><br><span class="line">            .filter(x -&gt; x.getName().equals(<span class="string">&quot;main&quot;</span>))</span><br><span class="line">            .collect(Collectors.toList());</span><br><span class="line">    <span class="comment">// 设置传参类型</span></span><br><span class="line">    methods.get(<span class="number">0</span>).invoke(<span class="literal">null</span>, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;test1&quot;</span>,<span class="string">&quot;test2&quot;</span>,<span class="string">&quot;test3&quot;</span>&#125;&#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 调用main方法不能用如下的方法：</span></span><br><span class="line">    <span class="comment">//methods.get(0).invoke(String[].class);</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里注意一下 <code>main</code> 方法的调用</p><blockquote><p>java1.4是没有可变参数的，即Method.invoke(Obeject objecr ,Object obj[]{“xx”,“yy”});用数组传递多个参数 。<br>java1.5有了可变参数，即Method.invoke(Objet objecr,Object…args);用可变参数传递多个参数。</p><p>由于兼容性问题，在JDK1.4没有引入可变参数Object…类型，所以使用数组来表示，invoke函数接收到String数组后会进行拆分，得到两个String变量，但是没有main函数接受 两个String值，所以不行。</p><p>而且只要参数是new Object[]{“xxx”,”yyy”}，javac 为了兼容1.4，只把它当作 jdk1.4 的语法进行理解，而不把它当作 jdk1.5 的语法解释，也就是说不能传递new String[]{};。</p><p>解决方法：<br>(1)、mainMethod.invoke(null,new Object[]{new String[]{“20190212”}});该方法还是会按1.4处理，会将参数打散，但没关系，里面就是对的参数new String[]{“xxx”}。</p><p>(2)、mainMethod.invoke(null,(Object)new String[]{“20190212”}); 不会打散，因为强转为Object了，编译器会认为这不是一个数组，此时是一个完整的参数。但注意他本质还是一个数组，作用仅仅是骗过编译器而已。</p></blockquote><p>‍</p><h3 id="实际应用-AOP"><a href="#实际应用-AOP" class="headerlink" title="实际应用 - AOP"></a>实际应用 - AOP</h3><ul><li><p>实现AOP，面向切面编程(即Aspect Oriented Programming)的框架</p><ul><li><p>关注点分离原则（SoC，即Seperation of Concern），强调把程序分成多个部分，每个部分负责独立的功能</p></li><li><p>程序有一个主关注点 + 多个其他关注点</p><ul><li>什么时候触发：before、after、around</li><li>触发什么：调用对象</li></ul><blockquote><p>举例：订单系统中的核心能力（下单、支付）；其他能力（日志、通知、抽奖等等）</p></blockquote><p><img src="/2021/04/06/Java%E5%8F%8D%E5%B0%84/image-20210406204850-i86ssqz.png" alt="image.png"></p></li><li><p>实现1：代理模式（Java中的Proxy类）</p><ul><li>代理的作用，相当于是把多个 <code>Aspect</code> 和 一个核心方法，在运行时融合起来</li><li><img src="/2021/04/06/Java%E5%8F%8D%E5%B0%84/image-20210406204913-gez0ay1.png" alt="image.png"></li></ul></li><li><p>实现2：函数式：高阶编程</p><ul><li>f：核心方法</li><li>g：方面包装方法</li><li>x：核心输入方法</li><li>最后调用方法：h &#x3D; fg(x)</li></ul></li><li><p>实现3：Javassist库动态添加方法</p><ul><li>AspectJ等框架会使用</li></ul></li></ul></li><li><p>实现注解</p></li></ul><p>‍</p><h4 id="手写AOP实例"><a href="#手写AOP实例" class="headerlink" title="手写AOP实例"></a>手写AOP实例</h4><p>Java 的代理 <code>Proxy</code>类</p><p><img src="/2021/04/06/Java%E5%8F%8D%E5%B0%84/image-20210406205011-6sfjbdm.png" alt="image.png"></p><blockquote><p>Proxy.newInstance(classloader,  interfaces, InvocationHandler);</p></blockquote><ul><li>classloader：用于创建InvocationHander和代理对象的ClassLoader</li><li>interfaces： 代理哪些接口</li><li>InvocationHandler： 代理方法触发后的实际执行者</li></ul><p>本质上，Proxy是把多个模块化的 <code>Aspect</code> 和 一个核心方法，在运行时融合起来，当成是一个综合实现多个功能的类。</p><p>‍</p><p>1.创建业务接口IOrder</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 订单支付接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">IOrder</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">pay</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>‍</p><p>2.创建业务实现类Order</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 订单支付实现</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Order</span> <span class="keyword">implements</span> <span class="title class_">IOrder</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="variable">state</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">pay</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 模拟支付时间间隔</span></span><br><span class="line">        Thread.sleep(<span class="number">50</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 支付完毕</span></span><br><span class="line">        <span class="built_in">this</span>.state = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;order state:&quot;</span> + state);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>‍</p><p>3.创建切面接口Aspect，内置静态方法，用于创建Proxy</p><p>该类只能针对接口做的代理</p><blockquote><p>Proxy.newInstance(classloader,  interfaces, InvocationHandler);</p></blockquote><ul><li>classloader：用于创建InvocationHandler和代理对象的ClassLoader</li><li>interfaces： 代理哪些接口</li><li>InvocationHandler： 代理方法触发后的实际执行者</li></ul><p>‍</p><p>思考：</p><ul><li><p>为什么需要InvocationHandler?</p><ul><li>用来衔接、融合代理对象和Aspect对象</li></ul></li><li><p>为什么需要传入Interfaces?</p><ul><li>接口可能会有多个，被代理的接口会被拦截</li></ul></li><li><p>为什么需要ClassLoader?</p><ul><li>可能会有多个ClassLoader做不同的事情，必须要指定</li></ul></li></ul><p>‍</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * AOP接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Aspect</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">before</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">after</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 提供静态方法</span></span><br><span class="line">    <span class="keyword">static</span> &lt;T&gt; T <span class="title function_">getProxy</span><span class="params">(Class&lt;T&gt; cls, String... aspects)</span> <span class="keyword">throws</span> NoSuchMethodException, IllegalAccessException, InvocationTargetException, InstantiationException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">var</span> <span class="variable">aspectInsts</span> <span class="operator">=</span> Arrays.stream(aspects).map(name -&gt; Try.ofFailable(() -&gt; &#123;</span><br><span class="line">            <span class="type">var</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(name);</span><br><span class="line">            <span class="keyword">return</span> (Aspect) clazz.getConstructor().newInstance();</span><br><span class="line">        &#125;))</span><br><span class="line">                .filter(aspect -&gt; aspect.isSuccess())</span><br><span class="line">                .collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line">        <span class="type">var</span> <span class="variable">inst</span> <span class="operator">=</span> cls.getConstructor().newInstance();</span><br><span class="line">        <span class="keyword">return</span> (T) Proxy.newProxyInstance(cls.getClassLoader(),</span><br><span class="line">                cls.getInterfaces(),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvocationHandler</span>() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line"></span><br><span class="line">                        <span class="keyword">for</span> (<span class="keyword">var</span> aspect : aspectInsts) &#123;</span><br><span class="line">                            aspect.get().before();</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                        <span class="type">var</span> <span class="variable">result</span> <span class="operator">=</span> method.invoke(inst);</span><br><span class="line"></span><br><span class="line">                        <span class="keyword">for</span> (<span class="keyword">var</span> aspect : aspectInsts) &#123;</span><br><span class="line">                            aspect.get().after();</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                        <span class="keyword">return</span> result;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>‍</p><p>4.创建一个切面实例，计算方法的执行时间</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * AOP实现：用于监控程序运行时间</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TimeUsageAspect</span> <span class="keyword">implements</span> <span class="title class_">Aspect</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">long</span> start;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">()</span> &#123;</span><br><span class="line">        start = System.currentTimeMillis();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">after</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">var</span> <span class="variable">usage</span> <span class="operator">=</span> System.currentTimeMillis() - start;</span><br><span class="line"></span><br><span class="line">        System.out.format(<span class="string">&quot;time usage : %dms\n&quot;</span>,usage);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>‍</p><p>5.新建测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * AOP测试实例</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProxyExampleTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test_Proxy</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException, InvocationTargetException, NoSuchMethodException, InstantiationException, IllegalAccessException &#123;</span><br><span class="line">        <span class="type">IOrder</span> <span class="variable">order</span> <span class="operator">=</span> Aspect.getProxy(Order.class,<span class="string">&quot;com.javacoding.proxy.TimeUsageAspect&quot;</span>);</span><br><span class="line">        order.pay();</span><br><span class="line">        order.show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>‍</p><p>【注意1】静态方法返回值为泛型的时候为什么static后要加<code>&lt;T&gt;</code>?</p><blockquote><p>这个是java声明泛型方法的固定格式，在方法的返回值声明之前的位置，<T>定义该方法所拥有的泛型标识符，个数可以是多个，比如</T></p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public static&lt;<span class="built_in">T1</span>,<span class="built_in">T2</span>,<span class="built_in">T3</span>&gt; Response&lt;<span class="built_in">T1</span>&gt; test(<span class="built_in">T2</span> <span class="built_in">t2</span>,<span class="built_in">T3</span> <span class="built_in">t3</span>)&#123;  &#125;</span><br></pre></td></tr></table></figure><p>这样，在方法的返回值或者入参的地方，就可以使用“T”这个泛型。<br>泛型标识符的名字可以是任意符合java规范的变量名，比如Map就使用&lt;K,V&gt;作为它的key和value的泛型标识符。</p></blockquote><p>【注意2】<code>String...</code>为可变参数，可以传入一个或多个<code>String</code>，在编译时会自动封装为String数组</p><p>‍</p><h2 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h2><p>注解就像一个标签，是贴在程序代码上供另一个程序读取的。其实也可以理解为一些外部的通用功能，在运行时融合到业务类中，但是传递参数的时候变得更加容易。本质还是为了解耦和提供类能力的扩展。</p><p>一般而言，注解多由第三方库提供，通过动态代理<code>proxy</code>和反射实现，或者是<code>Javassist</code>动态修改类来达到目的。</p><p>基本流程：程序读取注解 -&gt; 找到注解 -&gt; 找到类并实例化</p><p><img src="/2021/04/06/Java%E5%8F%8D%E5%B0%84/image-20210408115531-7w0gzvf.png" alt="image.png"></p><p>‍</p><h3 id="基本使用方法"><a href="#基本使用方法" class="headerlink" title="基本使用方法"></a>基本使用方法</h3><p>注解声明，此时注解没有作用域，仅仅是一个定义。</p><p>按如下的定义，可以这样调用注解<code>@Aspect(name = UsageAspect.class)</code> ，相当于是给name()方法赋值，传入了一个名为 <code>UsageAspect</code> 的类，这个类可以通过反射获取。</p><p>同理，<code>@Aspect(value = &quot;测试&quot;)</code>可以给value()方法传入一个字符串。这些属性可以通过反射获取</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Aspect &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 接收一个class类</span></span><br><span class="line">    <span class="keyword">public</span> Class <span class="title function_">name</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 接受一个值</span></span><br><span class="line">    <span class="comment">//public String value();</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>【注意】本质上<code>@interface</code>相当于继承了一个<code>Annotation</code>接口，而注解里的方法被编译为<code>Abstract</code>方法</p><p>‍</p><h4 id="元注解"><a href="#元注解" class="headerlink" title="元注解"></a>元注解</h4><p><code>@Retention</code></p><p>声明注解的存活周期</p><p>一般开发都是通过反射获取注解，故使用<code>@Retention(RetentionPolicy.RUNTIME)</code></p><ul><li>Retention英文意思有保留、保持的意思，它表示注解存在阶段是保留在源码（编译期），字节码（类加载）或者运行期（JVM中运行）。在@Retention注解中使用枚举RetentionPolicy来表示注解保留时期</li><li>@Retention(RetentionPolicy.SOURCE)，注解仅存在于源码中，在class字节码文件中不包含</li><li>@Retention(RetentionPolicy.CLASS)， 默认的保留策略，注解会在class字节码文件中存在，但运行时无法获得</li><li>@Retention(RetentionPolicy.RUNTIME)， 注解会在class字节码文件中存在，在运行时可以通过反射获取到</li></ul><p>‍</p><p><code>@Target</code></p><p>声明注解的作用范围</p><p>常用<code>@Target(ElementType.TYPE)</code></p><ul><li>Target的英文意思是目标，这也很容易理解，使用@Target元注解表示我们的注解作用的范围就比较具体了，可以是类，方法，方法参数变量等，同样也是通过枚举类ElementType表达作用类型</li><li>@Target(ElementType.TYPE) 作用接口、类、枚举、注解</li><li>@Target(ElementType.FIELD) 作用属性字段、枚举的常量</li><li>@Target(ElementType.METHOD) 作用方法</li><li>@Target(ElementType.PARAMETER) 作用方法参数</li><li>@Target(ElementType.CONSTRUCTOR) 作用构造函数</li><li>@Target(ElementType.LOCAL_VARIABLE)作用局部变量</li><li>@Target(ElementType.ANNOTATION_TYPE)作用于注解（@Retention注解中就使用该属性）</li><li>@Target(ElementType.PACKAGE) 作用于包</li></ul><p>‍</p><p>其他的3个元注解，用到再写</p><ul><li>@Document</li><li>@Inherited</li><li>@Repeatable</li></ul><p>‍</p><h3 id="注解实例"><a href="#注解实例" class="headerlink" title="注解实例"></a>注解实例</h3><h4 id="实例：注解实现AOP"><a href="#实例：注解实现AOP" class="headerlink" title="实例：注解实现AOP"></a>实例：注解实现AOP</h4><p>1.定义注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span>  <span class="comment">// 注解存活时间</span></span><br><span class="line"><span class="meta">@Target(ElementType.TYPE)</span>  <span class="comment">// 指可以用于类型上</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Aspect &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Class <span class="title function_">type</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>‍</p><p>2.定义切面接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">IAspect</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">before</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">after</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>‍</p><p>3.定义切面实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * AOP实现：用于监控程序运行时间</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TimeUsageAspect</span> <span class="keyword">implements</span> <span class="title class_">IAspect</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">long</span> start;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">()</span> &#123;</span><br><span class="line">        start = System.currentTimeMillis();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">after</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">var</span> <span class="variable">usage</span> <span class="operator">=</span> System.currentTimeMillis() - start;</span><br><span class="line"></span><br><span class="line">        System.out.format(<span class="string">&quot;time usage : %dms\n&quot;</span>,usage);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>‍</p><p>4.定义业务接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 订单支付接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">IOrder</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">pay</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>‍</p><p>5.定义业务实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 订单支付实现</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Aspect(type=TimeUsageAspect.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Order</span> <span class="keyword">implements</span> <span class="title class_">IOrder</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="variable">state</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">pay</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 模拟支付时间间隔</span></span><br><span class="line">        Thread.sleep(<span class="number">50</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 支付完毕</span></span><br><span class="line">        <span class="built_in">this</span>.state = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;order state:&quot;</span> + state);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>‍</p><p>6.定义工厂方法 &amp; 单元测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 订单支付实现</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Aspect(type=TimeUsageAspect.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Order</span> <span class="keyword">implements</span> <span class="title class_">IOrder</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="variable">state</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">pay</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 模拟支付时间间隔</span></span><br><span class="line">        Thread.sleep(<span class="number">50</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 支付完毕</span></span><br><span class="line">        <span class="built_in">this</span>.state = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;order state:&quot;</span> + state);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>‍</p><h4 id="实例：注解实现属性注入"><a href="#实例：注解实现属性注入" class="headerlink" title="实例：注解实现属性注入"></a>实例：注解实现属性注入</h4><p>1.定义一个注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Target(&#123;ElementType.FIELD&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Injection &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">value</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>‍</p><p>2.定义一个实体类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Hero</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Injection(value = &quot;Ashe&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Injection(value = &quot;600&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String range;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Injection(value = &quot;100&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String DPS;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Hero&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, range=&#x27;&quot;</span> + range + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, DPS=&#x27;&quot;</span> + DPS + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>‍</p><p>3.定义一个静态工厂，负责属性注入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InjectionFactory</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; Object <span class="title function_">inject</span><span class="params">(Class&lt;T&gt; cls,Class&lt;? extends Injection&gt; annotation)</span> <span class="keyword">throws</span> IllegalAccessException, NoSuchMethodException, InvocationTargetException, InstantiationException &#123;</span><br><span class="line">        <span class="type">var</span> <span class="variable">fields</span> <span class="operator">=</span> cls.getDeclaredFields();</span><br><span class="line"></span><br><span class="line">        <span class="type">var</span> <span class="variable">obj</span> <span class="operator">=</span> cls.getConstructor().newInstance();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> field : fields) &#123;</span><br><span class="line">            <span class="keyword">if</span> (field.isAnnotationPresent(annotation)) &#123;</span><br><span class="line">                <span class="comment">// 允许访问私有属性</span></span><br><span class="line">                field.setAccessible(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">                <span class="type">var</span> <span class="variable">value</span> <span class="operator">=</span> field.getAnnotation(annotation).value();</span><br><span class="line">                field.set(obj, value);</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;属性注入完成！&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>‍</p><p>4.测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestInjection</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test_injection</span><span class="params">()</span> <span class="keyword">throws</span> InvocationTargetException, NoSuchMethodException, InstantiationException, IllegalAccessException &#123;</span><br><span class="line">        <span class="type">var</span> <span class="variable">obj</span> <span class="operator">=</span> (Hero) InjectionFactory.inject(Hero.class,Injection.class);</span><br><span class="line"></span><br><span class="line">        System.out.println(obj.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>‍</p><p>CGLib&#x2F;Javassist 实现动态修改字节码</p><p><img src="/2021/04/06/Java%E5%8F%8D%E5%B0%84/image-20210409135446-wlxp4t1.png" alt="image.png"></p><p>‍</p><h3 id="元编程"><a href="#元编程" class="headerlink" title="元编程"></a>元编程</h3><p>#TODO# 元编程</p><p>‍</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java Core </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java 函数式编程学习总结</title>
      <link href="/2021/03/19/%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
      <url>/2021/03/19/%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h1 id="函数式编程学习总结"><a href="#函数式编程学习总结" class="headerlink" title="函数式编程学习总结"></a>函数式编程学习总结</h1><h2 id="为什么需要函数式编程"><a href="#为什么需要函数式编程" class="headerlink" title="为什么需要函数式编程"></a>为什么需要函数式编程</h2><p>java的抽象级别不够，在处理大型数据集合的时候，java欠缺高效的并行操作。</p><p><code>OOP</code>（Object Oriented Programming，面向对象编程）是对数据进行抽象，而<code>FP</code>（Functional Programming，函数式编程）是对行为进行抽象。</p><p>在现实世界中，<strong>数据和行为并存</strong>，程序也是如此，因此两种编程方式都要学习。</p><p>函数式编程这种新的抽象方式还有其他好处：程序员能够编写出更容易阅读的代码——这种代码更多的表达了业务逻辑的意图，而不是它的实现机制。</p><h2 id="Lambda表达式"><a href="#Lambda表达式" class="headerlink" title="Lambda表达式"></a>Lambda表达式</h2><p>形如：</p><ul><li>() -&gt; {实现逻辑};</li></ul><p>lambda表达式实例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test_lambda1</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">Runnable</span> <span class="variable">noArguments</span> <span class="operator">=</span> () -&gt; System.out.println(<span class="string">&quot;Hello world&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">Runnable</span> <span class="variable">noArgumentMulti</span> <span class="operator">=</span> () -&gt; &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;World&quot;</span>);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="type">Thread</span> <span class="variable">thread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(noArgumentMulti);</span><br><span class="line">    thread.start();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>‍</p><p><strong>方法引用（Function Reference）</strong></p><p>语法为：<code>Classname::methodName</code> ，其中 <code>::</code> 操作符被称为方法引用操作符。</p><p>凡是能够使用lambda标准表达式<code>x -&gt; x.method()</code>的情况下，都能够使用方法引用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">var</span> <span class="variable">result</span> <span class="operator">=</span> Stream.of(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>)</span><br><span class="line">            .map(x -&gt; x + <span class="number">2</span>)</span><br><span class="line">            .reduce(<span class="number">0</span>,Math::max);</span><br><span class="line"></span><br><span class="line">    System.out.println(result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="重要的函数接口"><a href="#重要的函数接口" class="headerlink" title="重要的函数接口"></a>重要的函数接口</h2><p>函数式编程最重要的是 <code>方法签名</code> ，它声明了函数的入参和出参，是函数式编程的基石。</p><ul><li>Predicate<T></T></li><li>Consumer</li><li>Function&lt;T,R&gt;</li><li>Supplier</li><li>UnaryOperator</li><li>BinaryOperator</li><li><code>@FunctionalInterface</code></li></ul><p>#TODO#</p><h2 id="流"><a href="#流" class="headerlink" title="流"></a>流</h2><h3 id="什么是流"><a href="#什么是流" class="headerlink" title="什么是流"></a>什么是流</h3><p>流指随着时间产生的数据序列</p><p>java8 Stream：指为一组序列提供顺序、并行的计算</p><ul><li>支持函数式编程</li><li>提供管道运算能力</li><li>提供并发并行（parallel）计算能力</li><li>提供大量操作</li></ul><blockquote><p>Stream是用函数式编程方式在集合上进行复杂操作的工具</p></blockquote><p>‍</p><h3 id="惰性求值"><a href="#惰性求值" class="headerlink" title="惰性求值"></a>惰性求值</h3><p>惰性求值（lazy evaluation）：最终不产生新集合（或新返回值），指描述Stream的方法，叫惰性求值方法。</p><p>实例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">var</span> <span class="variable">list</span> <span class="operator">=</span> Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 仅描述Stream，返回的仍是Stream</span></span><br><span class="line">    <span class="type">var</span> <span class="variable">result</span> <span class="operator">=</span> list.stream().filter(x -&gt; x &gt;= <span class="number">3</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>‍</p><p>及早求值：最终会从Stream产生值的方法，叫做及早求值。</p><p>这种最终产生值的方法，称为<code>终结操作/方法</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">var</span> <span class="variable">list</span> <span class="operator">=</span> Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 仅描述Stream，返回的仍是Stream</span></span><br><span class="line">    <span class="type">var</span> <span class="variable">result</span> <span class="operator">=</span> list.stream().filter(x -&gt; x &gt;= <span class="number">3</span>)</span><br><span class="line">            .count();</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>‍</p><p>判断方法：</p><p>如果返回值是Stream（Pipe Line），则是惰性求值；如果返回值是另一个值或者空，则为及早求值。</p><blockquote><p>整个过程和<code>建造者模式</code>有共通之处。建造者模式使用一系列操作设置属性和配置，最后用一个 build 方法，这时对象才被真正创建。</p></blockquote><p>‍</p><h3 id="of-与-Optional"><a href="#of-与-Optional" class="headerlink" title="of 与 Optional"></a>of 与 Optional</h3><p>在面向对象的编程中，对象是一等公民，一般通过 <code>new</code> 关键字来创建对象，基本类型也都有对应的包装类。</p><p>在函数式编程中，函数是一等公民，需要一个专属的返回值和创建流的方法。</p><ul><li><p>of 用于构造自己的流，是流的<code>工厂方法</code></p></li><li><p>Optional 是流中专属的返回值，用来替换 <code>null</code> 值</p><ul><li>把Stream中的返回值进行装箱，防止各种异常的产生，使流计算更加安全</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test_reduce</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">var</span> <span class="variable">result</span> <span class="operator">=</span> Stream.of(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)</span><br><span class="line">            .reduce((x, y) -&gt; &#123;</span><br><span class="line">                <span class="keyword">return</span> x + y;</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">    System.out.println(result.get());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>【注意】可以通过 <code>orElse</code> 方法，避免返回 <code>Optional</code></p><h3 id="常用的流操作"><a href="#常用的流操作" class="headerlink" title="常用的流操作"></a>常用的流操作</h3><p>【注意】以下例子均为最简单实例，均可以在方法中调用自定义的函数。</p><h4 id="collect"><a href="#collect" class="headerlink" title="collect"></a>collect</h4><p>collect方法有stream里的值生成一个列表，是一个<code>及早求值操作</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">var</span> <span class="variable">list</span> <span class="operator">=</span> Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">var</span> <span class="variable">result</span> <span class="operator">=</span> list.stream().filter(x -&gt; x &gt; <span class="number">3</span>)</span><br><span class="line">            .collect(Collectors.toList());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="map"><a href="#map" class="headerlink" title="map"></a>map</h4><p>如果有一个函数可以将一种类型的值转换为另一种类型，map操作就可以使用该函数，将一个流中的值转换成一个新的流。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">var</span> <span class="variable">result</span> <span class="operator">=</span> Stream.of(<span class="string">&quot;ashe&quot;</span>, <span class="string">&quot;zed&quot;</span>, <span class="string">&quot;yasuo&quot;</span>)</span><br><span class="line">            .map(x -&gt; x.toUpperCase())</span><br><span class="line">            .collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line">    System.out.println(result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>‍</p><h4 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h4><p>遍历数据并检查&#x2F;过滤其中元素时，可以尝试使用该方法。见 <code>collect</code> 中的例子组合使用</p><p>‍</p><h4 id="flatmap"><a href="#flatmap" class="headerlink" title="flatmap"></a>flatmap</h4><p>flatmap方法可以用stream替换值，然后将多个stream连接成一个。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test_flapmap</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">var</span> <span class="variable">list1</span> <span class="operator">=</span> Arrays.asList(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">    <span class="type">var</span> <span class="variable">list2</span> <span class="operator">=</span> Arrays.asList(<span class="number">3</span>, <span class="number">4</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">var</span> <span class="variable">togetherList</span> <span class="operator">=</span> Stream.of(list1, list2)</span><br><span class="line">            .flatMap(x -&gt; x.stream())</span><br><span class="line">            .collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line">    System.out.println(togetherList);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>‍</p><h4 id="max-min"><a href="#max-min" class="headerlink" title="max &amp; min"></a>max &amp; min</h4><p>求最值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test_max</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">var</span> <span class="variable">list</span> <span class="operator">=</span> Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">var</span> <span class="variable">result</span> <span class="operator">=</span> list.stream()</span><br><span class="line">            .max(Comparator.comparing(x -&gt; x))</span><br><span class="line">            .orElse(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    System.out.println(result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>‍</p><h4 id="reduce"><a href="#reduce" class="headerlink" title="reduce"></a>reduce</h4><p>该方法可以从一组值中生成一个值，如累加等</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test_reduce</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">var</span> <span class="variable">list</span> <span class="operator">=</span> Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">var</span> <span class="variable">result</span> <span class="operator">=</span> list.stream()</span><br><span class="line">            .reduce(<span class="number">0</span>, (x, y) -&gt; &#123;</span><br><span class="line">                <span class="keyword">return</span> x + y;</span><br><span class="line">            &#125;);</span><br><span class="line">    System.out.println(result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>‍</p><h4 id="sorted"><a href="#sorted" class="headerlink" title="sorted"></a>sorted</h4><p>使用sorted方法能够使流中的数据按从小到大的顺序排列；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">var</span> <span class="variable">result</span> <span class="operator">=</span> Stream.of(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">3</span>,<span class="number">6</span>,<span class="number">11</span>)</span><br><span class="line">            .sorted()</span><br><span class="line">            .collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line">    System.out.println(result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>‍</p><h4 id="unordered"><a href="#unordered" class="headerlink" title="unordered"></a>unordered</h4><p>有一些流的操作会使数据自动排序。一些操作在有序的流上开销会更大，而使用该方法能消除这种自动排序的操作。</p><p>【注意】以下实例中的map并不会引起数据的自动排序，实例并不是十分准确。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">var</span> <span class="variable">result</span> <span class="operator">=</span> Stream.of(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">3</span>,<span class="number">6</span>,<span class="number">11</span>)</span><br><span class="line">            .map(x -&gt; x -<span class="number">1</span>)</span><br><span class="line">            .unordered()</span><br><span class="line">            .collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line">    System.out.println(result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>‍</p><h4 id="partitioningBy"><a href="#partitioningBy" class="headerlink" title="partitioningBy"></a>partitioningBy</h4><p>该方法用于将流分解为两个集合，一部分为符合条件的集合，另一部分为不符合条件的集合。</p><p>要注意的是partitioningBy里面的返回值必须为boolean类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">var</span> <span class="variable">result</span> <span class="operator">=</span> Stream.of(<span class="string">&quot;Ashe&quot;</span>, <span class="string">&quot;Ashen one&quot;</span>, <span class="string">&quot;Zed&quot;</span>, <span class="string">&quot;Yasuo&quot;</span>)</span><br><span class="line">            .collect(Collectors.partitioningBy(x -&gt; x.substring(<span class="number">1</span>, <span class="number">2</span>).equals(<span class="string">&quot;A&quot;</span>)));</span><br><span class="line"></span><br><span class="line">    System.out.println(result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>‍</p><h4 id="groupingBy"><a href="#groupingBy" class="headerlink" title="groupingBy"></a>groupingBy</h4><p>该方法用于将数据分割为多个list</p><blockquote><p>该方法与SQL中的group by操作蕾丝，只是在Stream类库中将其实现了</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test_groupingBy</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">var</span> <span class="variable">map</span> <span class="operator">=</span> Stream.of(<span class="string">&quot;Ashe&quot;</span>, <span class="string">&quot;Zed&quot;</span>, <span class="string">&quot;Yasuo&quot;</span>)</span><br><span class="line">            .collect(groupingBy(x -&gt; x));</span><br><span class="line"></span><br><span class="line">    System.out.println(map.toString());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>‍</p><h4 id="并行处理"><a href="#并行处理" class="headerlink" title="并行处理"></a>并行处理</h4><p>以并行计算为例</p><p><img src="/2021/03/19/%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/image-20210329230548-gcdvnrt.png" alt="image.png"></p><p>‍</p><p>coding实例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 流并行计算实例</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test_parallel</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取随机数生成器</span></span><br><span class="line">        <span class="type">var</span> <span class="variable">r</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 从数组中获取最大值</span></span><br><span class="line">        <span class="type">var</span> <span class="variable">list</span> <span class="operator">=</span> IntStream.range(<span class="number">0</span>, <span class="number">80_000_000</span>)</span><br><span class="line">                .map(x -&gt; r.nextInt(<span class="number">80_000_000</span>))</span><br><span class="line">                .boxed()</span><br><span class="line">                .collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 串行计算</span></span><br><span class="line">        <span class="type">var</span> <span class="variable">seqStartTime</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">&quot;Seq Max value:&quot;</span> + list.stream().reduce(<span class="number">0</span>, Math::max));</span><br><span class="line">        System.out.println(<span class="string">&quot;Seq Time:&quot;</span> + (System.currentTimeMillis() - seqStartTime));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 并行计算</span></span><br><span class="line">        <span class="type">var</span> <span class="variable">parStartTime</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">&quot;Parallel Max value:&quot;</span> + list.parallelStream().reduce(<span class="number">0</span>, Math::max));</span><br><span class="line">        System.out.println(<span class="string">&quot;Parallel Time:&quot;</span> + (System.currentTimeMillis() - parStartTime));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>结果：</p><p><img src="/2021/03/19/%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/image-20210329232442-3s8hs05.png" alt="image.png"></p><p>‍</p><p>并行流性能的因素</p><p>1.性能指标</p><ul><li>数据分块的大小：当数据足够大，每个数据处理管道花费的时间足够多时，并行化处理才有意义</li><li>装箱：处理基本类型比处理装箱类型要快，如果调用了<code>box</code>方法，则会触发自动装箱，进而导致性能会下降</li><li>cpu核数：拥有的可用核数越多，性能提升的幅度越大。可以通过方法<code>Runtime.getRuntime().availableProcessors()</code> 来获取可用核数</li><li>单元处理开销：花费在每个元素上的时间越长，并行操作带来的性能提升越明显</li></ul><p>2.可以根据性能的好坏，将容器中的通用数据结构分成三组</p><ul><li><p>性能好：ArrayList、数组</p><ul><li>支持随机读取，可以很好地被分割</li></ul></li><li><p>性能一般：HashSet、TreeSet</p><ul><li>不易公平的被分解，但是大多数时候是可能的</li></ul></li><li><p>性能差：LinkedList、Stream.lierate、BufferedReader.lines</p><ul><li>长度未知、不支持随机读取、难以预测分割的位置</li></ul></li></ul><p>3.如果能避开有状态的操作，选用无状态的操作，能够获得更好的性能</p><ul><li><p>无状态操作（stateless）</p><ul><li>filter</li><li>flatmap</li><li>map</li></ul></li><li><p>有状态操作（stateful）</p><ul><li>sorted</li><li>distinct</li><li>limit</li><li>skip</li></ul></li></ul><p>4.在函数式编程的时候，多使用纯函数（pure function）</p><ul><li><p>纯函数指无副作用的函数，即纯计算的但一操作，不涉及其他操作的函数</p></li><li><p>非纯函数实例</p></li></ul><p>5.函数式编程性质总结</p><ul><li>一般使用纯函数（pure function），要求输入的数据不可变（immutable），仅仅对输入的数据做拷贝</li><li>惰性求值（lazy）</li><li>安全（Monad - safety）</li></ul><p>这里的c属于外部变量，但是却在函数内部发生了计算，同时调用了I&#x2F;O的操作，一旦发生异常，需要同时排查变量ab、变量c、IO设备。</p><p><img src="/2021/03/19/%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/image-20210329225506-415y24x.png" alt="image.png"></p><p>‍</p><h4 id="串行处理"><a href="#串行处理" class="headerlink" title="串行处理"></a>串行处理</h4><p>强制流串行处理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">var</span> <span class="variable">result</span> <span class="operator">=</span> Stream.of(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>).sequential()</span><br><span class="line">            .map(x -&gt; x / <span class="number">2</span>)</span><br><span class="line">            .reduce(Math::max)</span><br><span class="line">            .orElse(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    System.out.println(result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当 sequential 方法和 parallel 方法同时使用时，只有一个会生效。以最后一个调用的方法为准。</p><p>‍</p><h4 id="整合操作"><a href="#整合操作" class="headerlink" title="整合操作"></a>整合操作</h4><p>map -&gt; filter -&gt; reduce</p><p><img src="/2021/03/19/%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/image-20210329223216-cvocr8i.png" alt="image.png"></p><p>‍</p><h3 id="业务场景实例"><a href="#业务场景实例" class="headerlink" title="业务场景实例"></a>业务场景实例</h3><p>实例一：</p><p>新旧写法的比较</p><p><img src="/2021/03/19/%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/image-20210319160339-dnaavlo.png" alt="image.png"></p><p>‍</p><p>实例二：</p><p><img src="/2021/03/19/%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/image-20210319160415-edgolwa.png" alt="image.png"></p><p>‍</p><p>实例三：</p><p>并行计算最大值的区别</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">var</span> <span class="variable">result</span> <span class="operator">=</span> list.parallelStream().max((a, b) -&gt; a - b).orElse(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">var</span> <span class="variable">result</span> <span class="operator">=</span> list.parallelStream().reduce(<span class="number">0</span>,Math::max);</span><br></pre></td></tr></table></figure><p>区别：</p><blockquote><p>parallel()是把一个Stream变成parallelStream</p><p>parallelStream是把一个非stream(如 List）变成 parallelStream</p><p>Stream还是ParallelStream的max方法都是用reduce实现。</p><p>parallelStream的reduce方法有3个参数：(identity, accumulator, combiner)</p><ul><li>identity 初始值</li><li>accumulator 单个线程如何累计，max就是一直算最大值</li><li>combiner就是如何合并多个线程计算的结果s</li></ul></blockquote><p>‍</p><h2 id="参考书籍"><a href="#参考书籍" class="headerlink" title="参考书籍"></a>参考书籍</h2><p>《Java8 函数式编程》</p><p>《函数式编程思想》</p><p>‍</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java Core </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java 函数式编程入门</title>
      <link href="/2021/03/01/Java%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B%E5%85%A5%E9%97%A8/"/>
      <url>/2021/03/01/Java%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="Java-函数式编程入门"><a href="#Java-函数式编程入门" class="headerlink" title="Java 函数式编程入门"></a>Java 函数式编程入门</h1><p><img src="http://www.ruanyifeng.com/blogimg/asset/2017/bg2017022201.jpg" alt="image"></p><p>基本特征</p><blockquote><ul><li>与面向对象编程（Object-oriented programming）和过程式编程（Procedural programming）并列的编程范式。</li><li>最主要的特征是，函数是<a href="https://llh911001.gitbooks.io/mostly-adequate-guide-chinese/content/ch2.html">第一等公民</a>。</li><li>强调将计算过程分解成可复用的函数，典型例子就是<code>map</code>方法和<code>reduce</code>方法组合而成<a href="https://zh.wikipedia.org/wiki/MapReduce">MapReduce 算法</a>。</li><li>只有<a href="https://zh.wikipedia.org/wiki/%E7%BA%AF%E5%87%BD%E6%95%B0">纯的</a>、没有<a href="https://zh.wikipedia.org/wiki/%E5%87%BD%E6%95%B0%E5%89%AF%E4%BD%9C%E7%94%A8">副作用</a>的函数，才是合格的函数。</li></ul></blockquote><h2 id="一、范畴论"><a href="#一、范畴论" class="headerlink" title="一、范畴论"></a>一、范畴论</h2><p>函数式编程的起源，是一门叫做范畴论（Category Theory）的数学分支。</p><p><img src="http://www.ruanyifeng.com/blogimg/asset/2017/bg2017022205.jpg" alt="image"></p><p>理解函数式编程的关键，就是理解范畴论。它是一门很复杂的数学，认为世界上所有的概念体系，都可以抽象成一个个的”范畴”（category）。</p><h3 id="1-1-范畴的概念"><a href="#1-1-范畴的概念" class="headerlink" title="1.1 范畴的概念"></a>1.1 范畴的概念</h3><p>什么是范畴呢？</p><p><a href="https://en.wikipedia.org/wiki/Category_(mathematics)">维基百科</a>的一句话定义如下。</p><blockquote><p>“范畴就是使用箭头连接的物体。”（In mathematics, a category is an algebraic structure that comprises “objects” that are linked by “arrows”. ）</p></blockquote><p>也就是说，彼此之间存在某种关系的概念、事物、对象等等，都构成”范畴”。随便什么东西，只要能找出它们之间的关系，就能定义一个”范畴”。</p><p><img src="http://www.ruanyifeng.com/blogimg/asset/2017/bg2017022210.jpg" alt="image"></p><p>上图中，各个点与它们之间的箭头，就构成一个范畴。</p><p>箭头表示范畴成员之间的关系，正式的名称叫做”态射”（morphism）。范畴论认为，同一个范畴的所有成员，就是不同状态的”变形”（transformation）。通过”态射”，一个成员可以变形成另一个成员。</p><h3 id="1-2-数学模型"><a href="#1-2-数学模型" class="headerlink" title="1.2 数学模型"></a>1.2 数学模型</h3><p>既然”范畴”是满足某种变形关系的所有对象，就可以总结出它的数学模型。</p><blockquote><ul><li>所有成员是一个集合</li><li>变形关系是函数</li></ul></blockquote><p>也就是说，范畴论是集合论更上层的抽象，简单的理解就是”集合 + 函数”。</p><p>理论上通过函数，就可以从范畴的一个成员，算出其他所有成员。</p><h3 id="1-3-范畴与容器"><a href="#1-3-范畴与容器" class="headerlink" title="1.3 范畴与容器"></a>1.3 范畴与容器</h3><p>我们可以把”范畴”想象成是一个容器，里面包含两样东西。</p><blockquote><ul><li>值（value）</li><li>值的变形关系，也就是函数。</li></ul></blockquote><p>下面我们使用代码，定义一个简单的范畴。</p><blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Category</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">val</span>) &#123; </span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">val</span> = val; </span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">addOne</span>(<span class="params">x</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> x + <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><p>上面代码中，<code>Category</code>是一个类，也是一个容器，里面包含一个值（<code>this.val</code>）和一种变形关系（<code>addOne</code>）。你可能已经看出来了，这里的范畴，就是所有彼此之间相差<code>1</code>的数字。</p><p>注意，本文后面的部分，凡是提到”容器”的地方，全部都是指”范畴”。</p><h3 id="1-4-范畴论与函数式编程的关系"><a href="#1-4-范畴论与函数式编程的关系" class="headerlink" title="1.4 范畴论与函数式编程的关系"></a>1.4 范畴论与函数式编程的关系</h3><p>范畴论使用函数，表达范畴之间的关系。</p><p>伴随着范畴论的发展，就发展出一整套函数的运算方法。这套方法起初只用于数学运算，后来有人将它在计算机上实现了，就变成了今天的”函数式编程”。</p><p><strong>本质上，函数式编程只是范畴论的运算方法，跟数理逻辑、微积分、行列式是同一类东西，都是数学方法，只是碰巧它能用来写程序。</strong></p><p>所以，你明白了吗，为什么函数式编程要求函数必须是纯的，不能有副作用？因为它是一种数学运算，原始目的就是求值，不做其他事情，否则就无法满足函数运算法则了。</p><p>总之，在函数式编程中，函数就是一个管道（pipe）。这头进去一个值，那头就会出来一个新的值，没有其他作用。</p><h2 id="二、函数的合成与柯里化"><a href="#二、函数的合成与柯里化" class="headerlink" title="二、函数的合成与柯里化"></a>二、函数的合成与柯里化</h2><p>函数式编程有两个最基本的运算：合成和柯里化。</p><h3 id="2-1-函数的合成"><a href="#2-1-函数的合成" class="headerlink" title="2.1 函数的合成"></a>2.1 函数的合成</h3><p>如果一个值要经过多个函数，才能变成另外一个值，就可以把所有中间步骤合并成一个函数，这叫做”函数的合成”（compose）。</p><p><img src="http://www.ruanyifeng.com/blogimg/asset/2017/bg2017022204.png" alt="image"></p><p>上图中，<code>X</code>和<code>Y</code>之间的变形关系是函数<code>f</code>，<code>Y</code>和<code>Z</code>之间的变形关系是函数<code>g</code>，那么<code>X</code>和<code>Z</code>之间的关系，就是<code>g</code>和<code>f</code>的合成函数<code>g·f</code>。</p><p>下面就是代码实现了，我使用的是 JavaScript 语言。注意，本文所有示例代码都是简化过的，完整的 Demo 请看《参考链接》部分。</p><p>合成两个函数的简单代码如下。</p><blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">const</span> compose = <span class="keyword">function</span> (<span class="params">f, g</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params">x</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">f</span>(<span class="title function_">g</span>(x));</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><p>函数的合成还必须满足结合律。</p><p><img src="http://www.ruanyifeng.com/blogimg/asset/2017/bg2017022209.png" alt="image"></p><blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="title function_">compose</span>(f, <span class="title function_">compose</span>(g, h))</span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"><span class="title function_">compose</span>(<span class="title function_">compose</span>(f, g), h)</span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"><span class="title function_">compose</span>(f, g, h)</span><br></pre></td></tr></table></figure></blockquote><p>合成也是函数必须是纯的一个原因。因为一个不纯的函数，怎么跟其他函数合成？怎么保证各种合成以后，它会达到预期的行为？</p><p>前面说过，函数就像数据的管道（pipe）。那么，函数合成就是将这些管道连了起来，让数据一口气从多个管道中穿过。</p><h3 id="2-2-柯里化"><a href="#2-2-柯里化" class="headerlink" title="2.2 柯里化"></a>2.2 柯里化</h3><p><code>f(x)</code>和<code>g(x)</code>合成为<code>f(g(x))</code>，有一个隐藏的前提，就是<code>f</code>和<code>g</code>都只能接受一个参数。如果可以接受多个参数，比如<code>f(x, y)</code>和<code>g(a, b, c)</code>，函数合成就非常麻烦。** **</p><p>这时就需要函数柯里化了。所谓”柯里化”，就是把一个多参数的函数，转化为单参数函数。</p><blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 柯里化之前</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">x, y</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">add</span>(<span class="number">1</span>, <span class="number">2</span>) <span class="comment">// 3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 柯里化之后</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">addX</span>(<span class="params">y</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params">x</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> x + y;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">addX</span>(<span class="number">2</span>)(<span class="number">1</span>) <span class="comment">// 3</span></span><br></pre></td></tr></table></figure></blockquote><p>有了柯里化以后，我们就能做到，所有函数只接受一个参数。后文的内容除非另有说明，都默认函数只有一个参数，就是所要处理的那个值。</p><h2 id="三、函子"><a href="#三、函子" class="headerlink" title="三、函子"></a>三、函子</h2><p>函数不仅可以用于同一个范畴之中值的转换，还可以用于将一个范畴转成另一个范畴。这就涉及到了函子（Functor）。</p><h3 id="3-1-函子的概念"><a href="#3-1-函子的概念" class="headerlink" title="3.1 函子的概念"></a>3.1 函子的概念</h3><p>函子是函数式编程里面最重要的数据类型，也是基本的运算单位和功能单位。</p><p>它首先是一种范畴，也就是说，是一个容器，包含了值和变形关系。<strong>比较特殊的是，它的变形关系可以依次作用于每一个值，将当前容器变形成另一个容器。</strong></p><p><img src="http://www.ruanyifeng.com/blogimg/asset/2017/bg2017022203.png"></p><p>上图中，左侧的圆圈就是一个函子，表示人名的范畴。外部传入函数<code>f</code>，会转成右边表示早餐的范畴。</p><p>下面是一张更一般的图。</p><p><img src="http://www.ruanyifeng.com/blogimg/asset/2017/bg2017022211.jpg" alt="image"></p><p>上图中，函数<code>f</code>完成值的转换（<code>a</code>到<code>b</code>），将它传入函子，就可以实现范畴的转换（<code>Fa</code>到<code>Fb</code>）。</p><h3 id="3-2-函子的代码实现"><a href="#3-2-函子的代码实现" class="headerlink" title="3.2 函子的代码实现"></a>3.2 函子的代码实现</h3><p>任何具有<code>map</code>方法的数据结构，都可以当作函子的实现。</p><blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Functor</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">val</span>) &#123; </span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">val</span> = val; </span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">map</span>(<span class="params">f</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Functor</span>(<span class="title function_">f</span>(<span class="variable language_">this</span>.<span class="property">val</span>));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><p>上面代码中，<code>Functor</code>是一个函子，它的<code>map</code>方法接受函数<code>f</code>作为参数，然后返回一个新的函子，里面包含的值是被<code>f</code>处理过的（<code>f(this.val)</code>）。</p><p><strong>一般约定，函子的标志就是容器具有</strong>​**<code>map</code><strong>​</strong>方法。该方法将容器里面的每一个值，映射到另一个容器。**</p><p>下面是一些用法的示例。</p><blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">(<span class="keyword">new</span> <span class="title class_">Functor</span>(<span class="number">2</span>)).<span class="title function_">map</span>(<span class="keyword">function</span> (<span class="params">two</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> two + <span class="number">2</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// Functor(4)</span></span><br><span class="line"></span><br><span class="line">(<span class="keyword">new</span> <span class="title class_">Functor</span>(<span class="string">&#x27;flamethrowers&#x27;</span>)).<span class="title function_">map</span>(<span class="keyword">function</span>(<span class="params">s</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> s.<span class="title function_">toUpperCase</span>();</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// Functor(&#x27;FLAMETHROWERS&#x27;)</span></span><br><span class="line"></span><br><span class="line">(<span class="keyword">new</span> <span class="title class_">Functor</span>(<span class="string">&#x27;bombs&#x27;</span>)).<span class="title function_">map</span>(_.<span class="title function_">concat</span>(<span class="string">&#x27; away&#x27;</span>)).<span class="title function_">map</span>(_.<span class="title function_">prop</span>(<span class="string">&#x27;length&#x27;</span>));</span><br><span class="line"><span class="comment">// Functor(10)</span></span><br></pre></td></tr></table></figure></blockquote><p>上面的例子说明，函数式编程里面的运算，都是通过函子完成，即运算不直接针对值，而是针对这个值的容器—-函子。函子本身具有对外接口（<code>map</code>方法），各种函数就是运算符，通过接口接入容器，引发容器里面的值的变形。</p><p>因此，<strong>学习函数式编程，实际上就是学习函子的各种运算。</strong>  由于可以把运算方法封装在函子里面，所以又衍生出各种不同类型的函子，有多少种运算，就有多少种函子。函数式编程就变成了运用不同的函子，解决实际问题。</p><h2 id="四、of-方法"><a href="#四、of-方法" class="headerlink" title="四、of 方法"></a>四、of 方法</h2><p>你可能注意到了，上面生成新的函子的时候，用了<code>new</code>命令。这实在太不像函数式编程了，因为<code>new</code>命令是面向对象编程的标志。</p><p><strong>函数式编程一般约定，函子有一个</strong>​**<code>of</code><strong>​</strong>方法，用来生成新的容器。**</p><p>下面就用<code>of</code>方法替换掉<code>new</code>。</p><blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="title class_">Functor</span>.<span class="property">of</span> = <span class="keyword">function</span>(<span class="params">val</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Functor</span>(val);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></blockquote><p>然后，前面的例子就可以改成下面这样。</p><blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="title class_">Functor</span>.<span class="title function_">of</span>(<span class="number">2</span>).<span class="title function_">map</span>(<span class="keyword">function</span> (<span class="params">two</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> two + <span class="number">2</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// Functor(4)</span></span><br></pre></td></tr></table></figure></blockquote><p>这就更像函数式编程了。</p><h2 id="五、Maybe-函子"><a href="#五、Maybe-函子" class="headerlink" title="五、Maybe 函子"></a>五、Maybe 函子</h2><p>函子接受各种函数，处理容器内部的值。这里就有一个问题，容器内部的值可能是一个空值（比如<code>null</code>），而外部函数未必有处理空值的机制，如果传入空值，很可能就会出错。</p><blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="title class_">Functor</span>.<span class="title function_">of</span>(<span class="literal">null</span>).<span class="title function_">map</span>(<span class="keyword">function</span> (<span class="params">s</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> s.<span class="title function_">toUpperCase</span>();</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// TypeError</span></span><br></pre></td></tr></table></figure></blockquote><p>上面代码中，函子里面的值是<code>null</code>，结果小写变成大写的时候就出错了。</p><p>Maybe 函子就是为了解决这一类问题而设计的。简单说，它的<code>map</code>方法里面设置了空值检查。</p><blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Maybe</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Functor</span> &#123;</span><br><span class="line">  <span class="title function_">map</span>(<span class="params">f</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">val</span> ? <span class="title class_">Maybe</span>.<span class="title function_">of</span>(<span class="title function_">f</span>(<span class="variable language_">this</span>.<span class="property">val</span>)) : <span class="title class_">Maybe</span>.<span class="title function_">of</span>(<span class="literal">null</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><p>有了 Maybe 函子，处理空值就不会出错了。</p><blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="title class_">Maybe</span>.<span class="title function_">of</span>(<span class="literal">null</span>).<span class="title function_">map</span>(<span class="keyword">function</span> (<span class="params">s</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> s.<span class="title function_">toUpperCase</span>();</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// Maybe(null)</span></span><br></pre></td></tr></table></figure></blockquote><h2 id="六、Either-函子"><a href="#六、Either-函子" class="headerlink" title="六、Either 函子"></a>六、Either 函子</h2><p>条件运算<code>if...else</code>是最常见的运算之一，函数式编程里面，使用 Either 函子表达。</p><p>Either 函子内部有两个值：左值（<code>Left</code>）和右值（<code>Right</code>）。右值是正常情况下使用的值，左值是右值不存在时使用的默认值。</p><blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Either</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Functor</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">left, right</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">left</span> = left;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">right</span> = right;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">map</span>(<span class="params">f</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">right</span> ? </span><br><span class="line">      <span class="title class_">Either</span>.<span class="title function_">of</span>(<span class="variable language_">this</span>.<span class="property">left</span>, <span class="title function_">f</span>(<span class="variable language_">this</span>.<span class="property">right</span>)) :</span><br><span class="line">      <span class="title class_">Either</span>.<span class="title function_">of</span>(<span class="title function_">f</span>(<span class="variable language_">this</span>.<span class="property">left</span>), <span class="variable language_">this</span>.<span class="property">right</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Either</span>.<span class="property">of</span> = <span class="keyword">function</span> (<span class="params">left, right</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Either</span>(left, right);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></blockquote><p>下面是用法。</p><blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">var</span> addOne = <span class="keyword">function</span> (<span class="params">x</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> x + <span class="number">1</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Either</span>.<span class="title function_">of</span>(<span class="number">5</span>, <span class="number">6</span>).<span class="title function_">map</span>(addOne);</span><br><span class="line"><span class="comment">// Either(5, 7);</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Either</span>.<span class="title function_">of</span>(<span class="number">1</span>, <span class="literal">null</span>).<span class="title function_">map</span>(addOne);</span><br><span class="line"><span class="comment">// Either(2, null);</span></span><br></pre></td></tr></table></figure></blockquote><p>上面代码中，如果右值有值，就使用右值，否则使用左值。通过这种方式，Either 函子表达了条件运算。</p><p>Either 函子的常见用途是提供默认值。下面是一个例子。</p><blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="title class_">Either</span></span><br><span class="line">.<span class="title function_">of</span>(&#123;<span class="attr">address</span>: <span class="string">&#x27;xxx&#x27;</span>&#125;, currentUser.<span class="property">address</span>)</span><br><span class="line">.<span class="title function_">map</span>(updateField);</span><br></pre></td></tr></table></figure></blockquote><p>上面代码中，如果用户没有提供地址，Either 函子就会使用左值的默认地址。</p><p>Either 函子的另一个用途是代替<code>try...catch</code>，使用左值表示错误。</p><blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">parseJSON</span>(<span class="params">json</span>) &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Either</span>.<span class="title function_">of</span>(<span class="literal">null</span>, <span class="title class_">JSON</span>.<span class="title function_">parse</span>(json));</span><br><span class="line">  &#125; <span class="keyword">catch</span> (<span class="attr">e</span>: <span class="title class_">Error</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Either</span>.<span class="title function_">of</span>(e, <span class="literal">null</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><p>上面代码中，左值为空，就表示没有出错，否则左值会包含一个错误对象<code>e</code>。一般来说，所有可能出错的运算，都可以返回一个 Either 函子。</p><h2 id="七、ap-函子"><a href="#七、ap-函子" class="headerlink" title="七、ap 函子"></a>七、ap 函子</h2><p>函子里面包含的值，完全可能是函数。我们可以想象这样一种情况，一个函子的值是数值，另一个函子的值是函数。</p><blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">addTwo</span>(<span class="params">x</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> x + <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> A = <span class="title class_">Functor</span>.<span class="title function_">of</span>(<span class="number">2</span>);</span><br><span class="line"><span class="keyword">const</span> B = <span class="title class_">Functor</span>.<span class="title function_">of</span>(addTwo)</span><br></pre></td></tr></table></figure></blockquote><p>上面代码中，函子<code>A</code>内部的值是<code>2</code>，函子<code>B</code>内部的值是函数<code>addTwo</code>。</p><p>有时，我们想让函子<code>B</code>内部的函数，可以使用函子<code>A</code>内部的值进行运算。这时就需要用到 ap 函子。</p><p>ap 是 applicative（应用）的缩写。凡是部署了<code>ap</code>方法的函子，就是 ap 函子。</p><blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Ap</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Functor</span> &#123;</span><br><span class="line">  <span class="title function_">ap</span>(<span class="params">F</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Ap</span>.<span class="title function_">of</span>(<span class="variable language_">this</span>.<span class="title function_">val</span>(F.<span class="property">val</span>));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><p>注意，<code>ap</code>方法的参数不是函数，而是另一个函子。</p><p>因此，前面例子可以写成下面的形式。</p><blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="title class_">Ap</span>.<span class="title function_">of</span>(addTwo).<span class="title function_">ap</span>(<span class="title class_">Functor</span>.<span class="title function_">of</span>(<span class="number">2</span>))</span><br><span class="line"><span class="comment">// Ap(4)</span></span><br></pre></td></tr></table></figure></blockquote><p>ap 函子的意义在于，对于那些多参数的函数，就可以从多个容器之中取值，实现函子的链式操作。</p><blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">x</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params">y</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> x + y;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Ap</span>.<span class="title function_">of</span>(add).<span class="title function_">ap</span>(<span class="title class_">Maybe</span>.<span class="title function_">of</span>(<span class="number">2</span>)).<span class="title function_">ap</span>(<span class="title class_">Maybe</span>.<span class="title function_">of</span>(<span class="number">3</span>));</span><br><span class="line"><span class="comment">// Ap(5)</span></span><br></pre></td></tr></table></figure></blockquote><p>上面代码中，函数<code>add</code>是柯里化以后的形式，一共需要两个参数。通过 ap 函子，我们就可以实现从两个容器之中取值。它还有另外一种写法。</p><blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="title class_">Ap</span>.<span class="title function_">of</span>(<span class="title function_">add</span>(<span class="number">2</span>)).<span class="title function_">ap</span>(<span class="title class_">Maybe</span>.<span class="title function_">of</span>(<span class="number">3</span>));</span><br></pre></td></tr></table></figure></blockquote><h2 id="八、Monad-函子"><a href="#八、Monad-函子" class="headerlink" title="八、Monad 函子"></a>八、Monad 函子</h2><p>函子是一个容器，可以包含任何值。函子之中再包含一个函子，也是完全合法的。但是，这样就会出现多层嵌套的函子。</p><blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="title class_">Maybe</span>.<span class="title function_">of</span>(</span><br><span class="line">  <span class="title class_">Maybe</span>.<span class="title function_">of</span>(</span><br><span class="line">    <span class="title class_">Maybe</span>.<span class="title function_">of</span>(&#123;<span class="attr">name</span>: <span class="string">&#x27;Mulburry&#x27;</span>, <span class="attr">number</span>: <span class="number">8402</span>&#125;)</span><br><span class="line">  )</span><br><span class="line">)</span><br></pre></td></tr></table></figure></blockquote><p>上面这个函子，一共有三个<code>Maybe</code>嵌套。如果要取出内部的值，就要连续取三次<code>this.val</code>。这当然很不方便，因此就出现了 Monad 函子。</p><p><strong>Monad 函子的作用是，总是返回一个单层的函子。</strong>  它有一个<code>flatMap</code>方法，与<code>map</code>方法作用相同，唯一的区别是如果生成了一个嵌套函子，它会取出后者内部的值，保证返回的永远是一个单层的容器，不会出现嵌套的情况。</p><blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Monad</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Functor</span> &#123;</span><br><span class="line">  <span class="title function_">join</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">val</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">flatMap</span>(<span class="params">f</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">map</span>(f).<span class="title function_">join</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><p>上面代码中，如果函数<code>f</code>返回的是一个函子，那么<code>this.map(f)</code>就会生成一个嵌套的函子。所以，<code>join</code>方法保证了<code>flatMap</code>方法总是返回一个单层的函子。这意味着嵌套的函子会被铺平（flatten）。</p><h2 id="九、IO-操作"><a href="#九、IO-操作" class="headerlink" title="九、IO 操作"></a>九、IO 操作</h2><p>Monad 函子的重要应用，就是实现 I&#x2F;O （输入输出）操作。</p><p>I&#x2F;O 是不纯的操作，普通的函数式编程没法做，这时就需要把 IO 操作写成<code>Monad</code>函子，通过它来完成。</p><blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> readFile = <span class="keyword">function</span>(<span class="params">filename</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title function_">IO</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> fs.<span class="title function_">readFileSync</span>(filename, <span class="string">&#x27;utf-8&#x27;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> print = <span class="keyword">function</span>(<span class="params">x</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title function_">IO</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(x);</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><p>上面代码中，读取文件和打印本身都是不纯的操作，但是<code>readFile</code>和<code>print</code>却是纯函数，因为它们总是返回 IO 函子。</p><p>如果 IO 函子是一个<code>Monad</code>，具有<code>flatMap</code>方法，那么我们就可以像下面这样调用这两个函数。</p><blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="title function_">readFile</span>(<span class="string">&#x27;./user.txt&#x27;</span>)</span><br><span class="line">.<span class="title function_">flatMap</span>(print)</span><br></pre></td></tr></table></figure></blockquote><p>这就是神奇的地方，上面的代码完成了不纯的操作，但是因为<code>flatMap</code>返回的还是一个 IO 函子，所以这个表达式是纯的。我们通过一个纯的表达式，完成带有副作用的操作，这就是 Monad 的作用。</p><p>由于返回还是 IO 函子，所以可以实现链式操作。因此，在大多数库里面，<code>flatMap</code>方法被改名成<code>chain</code>。</p><blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">var</span> tail = <span class="keyword">function</span>(<span class="params">x</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title function_">IO</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> x[x.<span class="property">length</span> - <span class="number">1</span>];</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">readFile</span>(<span class="string">&#x27;./user.txt&#x27;</span>)</span><br><span class="line">.<span class="title function_">flatMap</span>(tail)</span><br><span class="line">.<span class="title function_">flatMap</span>(print)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"><span class="title function_">readFile</span>(<span class="string">&#x27;./user.txt&#x27;</span>)</span><br><span class="line">.<span class="title function_">chain</span>(tail)</span><br><span class="line">.<span class="title function_">chain</span>(print)</span><br></pre></td></tr></table></figure></blockquote><p>上面代码读取了文件<code>user.txt</code>，然后选取最后一行输出。</p><p>‍</p><p>‍</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java Core </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Oracle高级PL/SQL</title>
      <link href="/2021/01/14/Oracle%E9%AB%98%E7%BA%A7SQL/"/>
      <url>/2021/01/14/Oracle%E9%AB%98%E7%BA%A7SQL/</url>
      
        <content type="html"><![CDATA[<h1 id="Oracle高级PL-SQL"><a href="#Oracle高级PL-SQL" class="headerlink" title="Oracle高级PL&#x2F;SQL"></a>Oracle高级PL&#x2F;SQL</h1><h2 id="数据的批量处理"><a href="#数据的批量处理" class="headerlink" title="数据的批量处理"></a>数据的批量处理</h2><p>游标在处理大批量数据的时候，仅仅启用单核心，会带来性能下降。</p><p>通过增强循环语句<code>FORALL</code>和批量绑定语句<code>BULK</code>能够大幅提升性能。</p><h3 id="批量绑定"><a href="#批量绑定" class="headerlink" title="批量绑定"></a>批量绑定</h3><p>ORACLE的官方文档释意</p><blockquote><p>Oracle Database uses two engines to run PL&#x2F;SQL units. The PL&#x2F;SQL engine runs the procedural statements and the SQL engine runs the SQL statements. Every SQL statement causes a context switch between the two engines. You can greatly improve the performance of your database application by minimizing the number of context switches for each PL&#x2F;SQL unit.</p></blockquote><p>Oracle数据库使用PL&#x2F;SQL引擎解析过程和函数，使用SQL引擎解析SQL语句，两个引擎相互配合。每个SQL语句都会引起两个引擎之间的上下文切换。如果能够降低两个引擎之间的频繁切换，那么就能最大限度地提升性能，而使用批量绑定语法<code>BULK</code>是能实现。</p><p>好处：</p><p><code>BULK</code> 是一次绑定整个集合，通过一次性发送SQL语句供SQL引擎解析的语句。受 SQL 语句影响的行越多，大容量绑定带来的性能提升就越大。考虑使用批量绑定来提高 DML 和 <code>SELECT</code> <code>INTO</code> 引用集合的语句以及 <code>FOR</code> 引用集合并返回 DML 的循环的性能。</p><p>实例1：通过bulk批量更新</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DECLARE</span></span><br><span class="line">  TYPE numlist <span class="keyword">IS</span> VARRAY (<span class="number">100</span>) <span class="keyword">OF</span> NUMBER;</span><br><span class="line">  id NUMLIST :<span class="operator">=</span> NUMLIST(<span class="number">7902</span>, <span class="number">7698</span>, <span class="number">7839</span>);</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">  <span class="comment">-- Efficient method, using bulk bind:</span></span><br><span class="line">  </span><br><span class="line">  FORALL i <span class="keyword">IN</span> id.FIRST..id.LAST</span><br><span class="line">  <span class="keyword">UPDATE</span> EMPLOYEES</span><br><span class="line">  <span class="keyword">SET</span> SALARY <span class="operator">=</span> <span class="number">1.1</span> <span class="operator">*</span> SALARY</span><br><span class="line">  <span class="keyword">WHERE</span> MANAGER_ID <span class="operator">=</span> id(i);</span><br><span class="line"> </span><br><span class="line"> <span class="comment">-- Slower method:</span></span><br><span class="line"> </span><br><span class="line"> <span class="keyword">FOR</span> i <span class="keyword">IN</span> id.FIRST..id.LAST LOOP</span><br><span class="line">    <span class="keyword">UPDATE</span> EMPLOYEES</span><br><span class="line">    <span class="keyword">SET</span> SALARY <span class="operator">=</span> <span class="number">1.1</span> <span class="operator">*</span> SALARY</span><br><span class="line">    <span class="keyword">WHERE</span> MANAGER_ID <span class="operator">=</span> id(i);</span><br><span class="line"> <span class="keyword">END</span> LOOP;</span><br><span class="line"><span class="keyword">END</span>;</span><br><span class="line"><span class="operator">/</span></span><br></pre></td></tr></table></figure><p>实例2：配合<code>Returning</code>和<code>FORALL</code>语句实现批量更新</p><p>需要返回值的情况下，使用 <code>Returning</code> 指定</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DECLARE</span></span><br><span class="line">  TYPE emp_list <span class="keyword">IS</span> VARRAY(<span class="number">100</span>) <span class="keyword">OF</span> EMPLOYEES.EMPLOYEE_ID<span class="operator">%</span>TYPE;</span><br><span class="line">  empids emp_list :<span class="operator">=</span> emp_list(<span class="number">182</span>, <span class="number">187</span>, <span class="number">193</span>, <span class="number">200</span>, <span class="number">204</span>, <span class="number">206</span>);</span><br><span class="line">  </span><br><span class="line">  TYPE bonus_list <span class="keyword">IS</span> <span class="keyword">TABLE</span> <span class="keyword">OF</span> EMPLOYEES.SALARY<span class="operator">%</span>TYPE;</span><br><span class="line">  bonus_list_inst  bonus_list;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">  <span class="comment">-- Efficient method, using bulk bind:</span></span><br><span class="line"> </span><br><span class="line"> FORALL i <span class="keyword">IN</span> empids.FIRST..empids.LAST</span><br><span class="line"> <span class="keyword">UPDATE</span> EMPLOYEES</span><br><span class="line"> <span class="keyword">SET</span> SALARY <span class="operator">=</span> <span class="number">0.1</span> <span class="operator">*</span> SALARY</span><br><span class="line"> <span class="keyword">WHERE</span> EMPLOYEE_ID <span class="operator">=</span> empids(i)</span><br><span class="line"> RETURNING SALARY BULK <span class="keyword">COLLECT</span> <span class="keyword">INTO</span> bonus_list_inst;</span><br><span class="line"> </span><br><span class="line"> <span class="comment">-- Slower method:</span></span><br><span class="line"> </span><br><span class="line"> <span class="keyword">FOR</span> i <span class="keyword">IN</span> empids.FIRST..empids.LAST LOOP</span><br><span class="line">   <span class="keyword">UPDATE</span> EMPLOYEES</span><br><span class="line">   <span class="keyword">SET</span> SALARY <span class="operator">=</span> <span class="number">0.1</span> <span class="operator">*</span> SALARY</span><br><span class="line">   <span class="keyword">WHERE</span> EMPLOYEE_ID <span class="operator">=</span> empids(i)</span><br><span class="line">   RETURNING SALARY <span class="keyword">INTO</span> bonus_list_inst(i);</span><br><span class="line"> <span class="keyword">END</span> LOOP;</span><br><span class="line"><span class="keyword">END</span>;</span><br><span class="line"><span class="operator">/</span></span><br></pre></td></tr></table></figure><h3 id="数据批量更新"><a href="#数据批量更新" class="headerlink" title="数据批量更新"></a>数据批量更新</h3><p>实例</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">OPEN</span> cur_ap_data;</span><br><span class="line">LOOP</span><br><span class="line">  <span class="keyword">FETCH</span> cur_ap_data BULK <span class="keyword">COLLECT</span></span><br><span class="line">    <span class="keyword">INTO</span> record_update LIMIT <span class="number">1000</span>;</span><br><span class="line">  </span><br><span class="line">  FORALL i <span class="keyword">IN</span> <span class="number">1</span> .. record_update.count</span><br><span class="line">    <span class="keyword">UPDATE</span> inf_gl_voucheritemass</span><br><span class="line">       <span class="keyword">SET</span> MD_CUSTOMER <span class="operator">=</span> <span class="keyword">NULL</span>,</span><br><span class="line">           MD_supplier <span class="operator">=</span> record_update(i).MD_CUSTOMER,</span><br><span class="line">           MD_CFITEM   <span class="operator">=</span> record_update(i).MD_CFITEM,</span><br><span class="line">           MD_INDUSTRY <span class="operator">=</span> record_update(i).MD_INDUSTRY,</span><br><span class="line">           unitcode    <span class="operator">=</span> record_update(i).unitcode,</span><br><span class="line">           vchrnum     <span class="operator">=</span> record_update(i).vchrnum</span><br><span class="line">     <span class="keyword">WHERE</span> <span class="number">1</span> <span class="operator">=</span> <span class="number">1</span></span><br><span class="line">       <span class="keyword">AND</span> id <span class="operator">=</span> record_update(i).id</span><br><span class="line">       <span class="keyword">AND</span> vchrid <span class="operator">=</span> record_update(i).vchrid;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">COMMIT</span>;</span><br><span class="line">  </span><br><span class="line">  EXIT <span class="keyword">WHEN</span> cur_ap_data<span class="operator">%</span>NOTFOUND;</span><br><span class="line"><span class="keyword">END</span> LOOP;</span><br><span class="line"><span class="keyword">CLOSE</span> cur_ap_data;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>【注意】对于头行关联的两张表的数据同步，依然要使用游标进行处理</p><p>此外，<code>BULK INTO</code>还能用于DML语句</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DECLARE</span></span><br><span class="line">   TYPE emp_rec_type <span class="keyword">IS</span> RECORD</span><br><span class="line">   (</span><br><span class="line">      empno      emp.empno<span class="operator">%</span>TYPE,</span><br><span class="line">      ename      emp.ename<span class="operator">%</span>TYPE,</span><br><span class="line">      hiredate   emp.hiredate<span class="operator">%</span>TYPE</span><br><span class="line">   );</span><br><span class="line">   TYPE nested_emp_type <span class="keyword">IS</span> <span class="keyword">TABLE</span> <span class="keyword">OF</span> emp_rec_type;</span><br><span class="line">   emp_tab   nested_emp_type;</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">   <span class="keyword">DELETE</span> <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> deptno <span class="operator">=</span> <span class="number">20</span></span><br><span class="line">   RETURNING empno, ename, hiredate   <span class="comment">-- 使用returning 返回这几个列</span></span><br><span class="line">   BULK   <span class="keyword">COLLECT</span> <span class="keyword">INTO</span> emp_tab;       <span class="comment">-- 将返回的列的数据批量插入到集合变量</span></span><br><span class="line"></span><br><span class="line">   DBMS_OUTPUT.put_line( <span class="string">&#x27;删除 &#x27;</span> <span class="operator">||</span> <span class="keyword">SQL</span><span class="operator">%</span>ROWCOUNT <span class="operator">||</span> <span class="string">&#x27; 行记录&#x27;</span> );</span><br><span class="line">   <span class="keyword">COMMIT</span>;</span><br><span class="line"></span><br><span class="line">   IF emp_tab.COUNT <span class="operator">&gt;</span> <span class="number">0</span> <span class="keyword">THEN</span>   <span class="comment">-- 当集合变量不为空时，输出所有被删除的元素</span></span><br><span class="line">      <span class="keyword">FOR</span> i <span class="keyword">IN</span> emp_tab.FIRST .. emp_tab.LAST LOOP</span><br><span class="line">         DBMS_OUTPUT.PUT_LINE(<span class="string">&#x27;当前记录：&#x27;</span></span><br><span class="line">                    <span class="operator">||</span> emp_tab( i ).empno <span class="operator">||</span> CHR( <span class="number">9</span> )</span><br><span class="line">                    <span class="operator">||</span> emp_tab( i ).ename <span class="operator">||</span> CHR( <span class="number">9</span> )</span><br><span class="line">                    <span class="operator">||</span> emp_tab( i ).hiredate</span><br><span class="line">                    <span class="operator">||</span> <span class="string">&#x27; 已被删除&#x27;</span> );</span><br><span class="line">      <span class="keyword">END</span> LOOP;</span><br><span class="line">   <span class="keyword">END</span> IF;</span><br><span class="line"><span class="keyword">END</span>;</span><br></pre></td></tr></table></figure><p>‍</p><h3 id="数据批量删除"><a href="#数据批量删除" class="headerlink" title="数据批量删除"></a>数据批量删除</h3><p>通过forall增强循环删除本地大量的数据</p><p>实例：根据id来删除</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DECLARE</span></span><br><span class="line">  l_cnt   NUMBER :<span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">  l_start NUMBER;</span><br><span class="line"></span><br><span class="line">  TYPE id_type <span class="keyword">IS</span> <span class="keyword">TABLE</span> <span class="keyword">OF</span> VARCHAR2(<span class="number">255</span>);</span><br><span class="line">  id_tbl id_type;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">CURSOR</span> cur <span class="keyword">IS</span></span><br><span class="line">    <span class="keyword">SELECT</span> t.erp_his_id</span><br><span class="line">      <span class="keyword">FROM</span> gj_erp_bas_inv_item_his t</span><br><span class="line">     <span class="keyword">WHERE</span> <span class="number">1</span> <span class="operator">=</span> <span class="number">1</span></span><br><span class="line">       <span class="keyword">AND</span> t.creation_date <span class="operator">&lt;=</span> to_date(<span class="string">&#x27;2019-12-31&#x27;</span>, <span class="string">&#x27;yyyy-mm-dd&#x27;</span>);</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">  <span class="keyword">OPEN</span> cur;</span><br><span class="line">  LOOP</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">FETCH</span> cur BULK <span class="keyword">COLLECT</span></span><br><span class="line">      <span class="keyword">INTO</span> id_tbl LIMIT <span class="number">1000</span>;</span><br><span class="line">    EXIT <span class="keyword">WHEN</span> id_tbl.count <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">  </span><br><span class="line">    DBMS_OUTPUT.put_line(id_tbl.count <span class="operator">||</span> <span class="string">&#x27; rows&#x27;</span>);</span><br><span class="line">  </span><br><span class="line">    l_start :<span class="operator">=</span> DBMS_UTILITY.get_time;</span><br><span class="line">    FORALL i <span class="keyword">IN</span> id_tbl.first .. id_tbl.last</span><br><span class="line">      <span class="keyword">DELETE</span> <span class="keyword">FROM</span> gj_erp_bas_inv_item_his <span class="keyword">WHERE</span> erp_his_id <span class="operator">=</span> id_tbl(i);</span><br><span class="line">    <span class="keyword">COMMIT</span>;</span><br><span class="line">  </span><br><span class="line">    DBMS_OUTPUT.put_line(<span class="string">&#x27;Delete  : &#x27;</span> <span class="operator">||</span> (DBMS_UTILITY.get_time <span class="operator">-</span> l_start));</span><br><span class="line">  </span><br><span class="line">    <span class="comment">--dbms_lock.sleep(3); 线程休眠需要dba权限</span></span><br><span class="line">  <span class="keyword">END</span> LOOP;</span><br><span class="line"><span class="keyword">END</span>;</span><br></pre></td></tr></table></figure><p>‍</p><h3 id="数据批量插入"><a href="#数据批量插入" class="headerlink" title="数据批量插入"></a>数据批量插入</h3><h4 id="性能比较"><a href="#性能比较" class="headerlink" title="性能比较"></a>性能比较</h4><h5 id="实验1：大批量复杂查询"><a href="#实验1：大批量复杂查询" class="headerlink" title="实验1：大批量复杂查询"></a>实验1：大批量复杂查询</h5><p>以oracle ebs环境为例，同步应付会计分录，数据集为33万+，获取数据集9秒&#x2F;100条</p><h6 id="循环table类型"><a href="#循环table类型" class="headerlink" title="循环table类型"></a>循环table类型</h6><p>使用bulk抓取数据到table类型中，然后循环table，每2000条数据提交一次</p><p>1.定义table类型</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">TYPE l_rec_line <span class="keyword">IS</span> <span class="keyword">TABLE</span> <span class="keyword">OF</span> INF_GL_VOUCHERITEMASS<span class="operator">%</span>ROWTYPE;</span><br><span class="line">l_rec_line_list l_rec_line;</span><br></pre></td></tr></table></figure><p>2.执行阶段</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">OPEN</span> cur_voucher_lines;</span><br><span class="line">    LOOP</span><br><span class="line">      <span class="keyword">FETCH</span> cur_voucher_lines BULK <span class="keyword">COLLECT</span></span><br><span class="line">        <span class="keyword">INTO</span> l_rec_line_list LIMIT <span class="number">1000</span>;</span><br><span class="line">  </span><br><span class="line">      FORALL i <span class="keyword">IN</span> l_rec_line_list.first .. l_rec_line_list.last</span><br><span class="line">        <span class="keyword">INSERT</span> <span class="keyword">INTO</span> INF_GL_VOUCHERITEMASS <span class="keyword">VALUES</span> l_rec_line_list (i);</span><br><span class="line">  </span><br><span class="line">      <span class="comment">-- 每1000条提交一次</span></span><br><span class="line">      <span class="keyword">COMMIT</span>;</span><br><span class="line">  </span><br><span class="line">      EXIT <span class="keyword">WHEN</span> cur_voucher_lines<span class="operator">%</span>NOTFOUND;</span><br><span class="line">    <span class="keyword">END</span> LOOP;</span><br><span class="line"><span class="keyword">CLOSE</span> cur_voucher_lines;</span><br></pre></td></tr></table></figure><p>3.实验结果</p><p>耗时1.5小时，共同步48000条数据，平均每分钟533条数据。</p><p>【注意】这里都是按整数批量插入，可能会存在抓取数据集的时候停止同步的过程。</p><h6 id="游标单行循环"><a href="#游标单行循环" class="headerlink" title="游标单行循环"></a>游标单行循环</h6><p>经典游标单循环</p><p>1.实现</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FOR</span> rec_line <span class="keyword">IN</span> cur_voucher_lines LOOP</span><br><span class="line">  ...</span><br><span class="line"><span class="keyword">END</span> LOOP;</span><br></pre></td></tr></table></figure><p>2.实验结果</p><p>耗时1.5小时，共同步49144条数据，平均每分钟546条数据。</p><h5 id="实验2：化解复杂查询"><a href="#实验2：化解复杂查询" class="headerlink" title="实验2：化解复杂查询"></a>实验2：化解复杂查询</h5><p>以oracle ebs环境为例，头和行的全部会计分类同步。</p><p>对于行上要获取头上的数据时，除了使用游标进行双重循环来保证行上能获得头上的数据以外，</p><p>还可以通过 先同步行，然后同步头，最后头和行关联，批量update的方式达到数据的最终一致性。</p><h6 id="游标双重循环"><a href="#游标双重循环" class="headerlink" title="游标双重循环"></a>游标双重循环</h6><p>同步应收发票、应收收款、应付发票、应付付款</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> rec_header <span class="keyword">in</span> cur_header loop</span><br><span class="line">  <span class="comment">-- 同步头数据</span></span><br><span class="line">  ...</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">for</span> rec_line <span class="keyword">in</span> cur_line loop</span><br><span class="line">   <span class="comment">-- 同步行数据</span></span><br><span class="line">   ...</span><br><span class="line">  <span class="keyword">end</span> loop;</span><br><span class="line"><span class="keyword">end</span> loop;</span><br></pre></td></tr></table></figure><p>结果：</p><p><img src="/2021/01/14/Oracle%E9%AB%98%E7%BA%A7SQL/20210309093824-rhphd74-image.png" alt="image.png"></p><h6 id="批量插入与更新"><a href="#批量插入与更新" class="headerlink" title="批量插入与更新"></a>批量插入与更新</h6><p>包定义</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">OR</span> REPLACE PACKAGE gj_congl_voucher_sync_v2 <span class="keyword">IS</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/*==================================================</span></span><br><span class="line"><span class="comment">  Procedure Name :</span></span><br><span class="line"><span class="comment">      main</span></span><br><span class="line"><span class="comment">  Description:</span></span><br><span class="line"><span class="comment">      This procedure perform to 集团币种同步</span></span><br><span class="line"><span class="comment">  Argument:</span></span><br><span class="line"><span class="comment">      errbuf               : concurrent return message buffer</span></span><br><span class="line"><span class="comment">      retcode              : concurrent return status code</span></span><br><span class="line"><span class="comment">                             0 success / 1 warning / 2 error</span></span><br><span class="line"><span class="comment">      p_book_id         : 账簿ID</span></span><br><span class="line"><span class="comment">      p_date_from       : 日期从</span></span><br><span class="line"><span class="comment">      p_date_to         : 至</span></span><br><span class="line"><span class="comment">      p_item_from       : 研发项目从</span></span><br><span class="line"><span class="comment">      p_item_to         : 至</span></span><br><span class="line"><span class="comment">  </span></span><br><span class="line"><span class="comment">  History:</span></span><br><span class="line"><span class="comment">      1.00   2020-09-02  LIYIHUI   Creation</span></span><br><span class="line"><span class="comment">  ==================================================*/</span></span><br><span class="line">  <span class="keyword">PROCEDURE</span> main(errbuf <span class="keyword">OUT</span> VARCHAR2, retcode <span class="keyword">OUT</span> VARCHAR2);</span><br><span class="line"></span><br><span class="line"><span class="keyword">END</span> gj_congl_voucher_sync_v2;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>包内容：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br><span class="line">653</span><br><span class="line">654</span><br><span class="line">655</span><br><span class="line">656</span><br><span class="line">657</span><br><span class="line">658</span><br><span class="line">659</span><br><span class="line">660</span><br><span class="line">661</span><br><span class="line">662</span><br><span class="line">663</span><br><span class="line">664</span><br><span class="line">665</span><br><span class="line">666</span><br><span class="line">667</span><br><span class="line">668</span><br><span class="line">669</span><br><span class="line">670</span><br><span class="line">671</span><br><span class="line">672</span><br><span class="line">673</span><br><span class="line">674</span><br><span class="line">675</span><br><span class="line">676</span><br><span class="line">677</span><br><span class="line">678</span><br><span class="line">679</span><br><span class="line">680</span><br><span class="line">681</span><br><span class="line">682</span><br><span class="line">683</span><br><span class="line">684</span><br><span class="line">685</span><br><span class="line">686</span><br><span class="line">687</span><br><span class="line">688</span><br><span class="line">689</span><br><span class="line">690</span><br><span class="line">691</span><br><span class="line">692</span><br><span class="line">693</span><br><span class="line">694</span><br><span class="line">695</span><br><span class="line">696</span><br><span class="line">697</span><br><span class="line">698</span><br><span class="line">699</span><br><span class="line">700</span><br><span class="line">701</span><br><span class="line">702</span><br><span class="line">703</span><br><span class="line">704</span><br><span class="line">705</span><br><span class="line">706</span><br><span class="line">707</span><br><span class="line">708</span><br><span class="line">709</span><br><span class="line">710</span><br><span class="line">711</span><br><span class="line">712</span><br><span class="line">713</span><br><span class="line">714</span><br><span class="line">715</span><br><span class="line">716</span><br><span class="line">717</span><br><span class="line">718</span><br><span class="line">719</span><br><span class="line">720</span><br><span class="line">721</span><br><span class="line">722</span><br><span class="line">723</span><br><span class="line">724</span><br><span class="line">725</span><br><span class="line">726</span><br><span class="line">727</span><br><span class="line">728</span><br><span class="line">729</span><br><span class="line">730</span><br><span class="line">731</span><br><span class="line">732</span><br><span class="line">733</span><br><span class="line">734</span><br><span class="line">735</span><br><span class="line">736</span><br><span class="line">737</span><br><span class="line">738</span><br><span class="line">739</span><br><span class="line">740</span><br><span class="line">741</span><br><span class="line">742</span><br><span class="line">743</span><br><span class="line">744</span><br><span class="line">745</span><br><span class="line">746</span><br><span class="line">747</span><br><span class="line">748</span><br><span class="line">749</span><br><span class="line">750</span><br><span class="line">751</span><br><span class="line">752</span><br><span class="line">753</span><br><span class="line">754</span><br><span class="line">755</span><br><span class="line">756</span><br><span class="line">757</span><br><span class="line">758</span><br><span class="line">759</span><br><span class="line">760</span><br><span class="line">761</span><br><span class="line">762</span><br><span class="line">763</span><br><span class="line">764</span><br><span class="line">765</span><br><span class="line">766</span><br><span class="line">767</span><br><span class="line">768</span><br><span class="line">769</span><br><span class="line">770</span><br><span class="line">771</span><br><span class="line">772</span><br><span class="line">773</span><br><span class="line">774</span><br><span class="line">775</span><br><span class="line">776</span><br><span class="line">777</span><br><span class="line">778</span><br><span class="line">779</span><br><span class="line">780</span><br><span class="line">781</span><br><span class="line">782</span><br><span class="line">783</span><br><span class="line">784</span><br><span class="line">785</span><br><span class="line">786</span><br><span class="line">787</span><br><span class="line">788</span><br><span class="line">789</span><br><span class="line">790</span><br><span class="line">791</span><br><span class="line">792</span><br><span class="line">793</span><br><span class="line">794</span><br><span class="line">795</span><br><span class="line">796</span><br><span class="line">797</span><br><span class="line">798</span><br><span class="line">799</span><br><span class="line">800</span><br><span class="line">801</span><br><span class="line">802</span><br><span class="line">803</span><br><span class="line">804</span><br><span class="line">805</span><br><span class="line">806</span><br><span class="line">807</span><br><span class="line">808</span><br><span class="line">809</span><br><span class="line">810</span><br><span class="line">811</span><br><span class="line">812</span><br><span class="line">813</span><br><span class="line">814</span><br><span class="line">815</span><br><span class="line">816</span><br><span class="line">817</span><br><span class="line">818</span><br><span class="line">819</span><br><span class="line">820</span><br><span class="line">821</span><br><span class="line">822</span><br><span class="line">823</span><br><span class="line">824</span><br><span class="line">825</span><br><span class="line">826</span><br><span class="line">827</span><br><span class="line">828</span><br><span class="line">829</span><br><span class="line">830</span><br><span class="line">831</span><br><span class="line">832</span><br><span class="line">833</span><br><span class="line">834</span><br><span class="line">835</span><br><span class="line">836</span><br><span class="line">837</span><br><span class="line">838</span><br><span class="line">839</span><br><span class="line">840</span><br><span class="line">841</span><br><span class="line">842</span><br><span class="line">843</span><br><span class="line">844</span><br><span class="line">845</span><br><span class="line">846</span><br><span class="line">847</span><br><span class="line">848</span><br><span class="line">849</span><br><span class="line">850</span><br><span class="line">851</span><br><span class="line">852</span><br><span class="line">853</span><br><span class="line">854</span><br><span class="line">855</span><br><span class="line">856</span><br><span class="line">857</span><br><span class="line">858</span><br><span class="line">859</span><br><span class="line">860</span><br><span class="line">861</span><br><span class="line">862</span><br><span class="line">863</span><br><span class="line">864</span><br><span class="line">865</span><br><span class="line">866</span><br><span class="line">867</span><br><span class="line">868</span><br><span class="line">869</span><br><span class="line">870</span><br><span class="line">871</span><br><span class="line">872</span><br><span class="line">873</span><br><span class="line">874</span><br><span class="line">875</span><br><span class="line">876</span><br><span class="line">877</span><br><span class="line">878</span><br><span class="line">879</span><br><span class="line">880</span><br><span class="line">881</span><br><span class="line">882</span><br><span class="line">883</span><br><span class="line">884</span><br><span class="line">885</span><br><span class="line">886</span><br><span class="line">887</span><br><span class="line">888</span><br><span class="line">889</span><br><span class="line">890</span><br><span class="line">891</span><br><span class="line">892</span><br><span class="line">893</span><br><span class="line">894</span><br><span class="line">895</span><br><span class="line">896</span><br><span class="line">897</span><br><span class="line">898</span><br><span class="line">899</span><br><span class="line">900</span><br><span class="line">901</span><br><span class="line">902</span><br><span class="line">903</span><br><span class="line">904</span><br><span class="line">905</span><br><span class="line">906</span><br><span class="line">907</span><br><span class="line">908</span><br><span class="line">909</span><br><span class="line">910</span><br><span class="line">911</span><br><span class="line">912</span><br><span class="line">913</span><br><span class="line">914</span><br><span class="line">915</span><br><span class="line">916</span><br><span class="line">917</span><br><span class="line">918</span><br><span class="line">919</span><br><span class="line">920</span><br><span class="line">921</span><br><span class="line">922</span><br><span class="line">923</span><br><span class="line">924</span><br><span class="line">925</span><br><span class="line">926</span><br><span class="line">927</span><br><span class="line">928</span><br><span class="line">929</span><br><span class="line">930</span><br><span class="line">931</span><br><span class="line">932</span><br><span class="line">933</span><br><span class="line">934</span><br><span class="line">935</span><br><span class="line">936</span><br><span class="line">937</span><br><span class="line">938</span><br><span class="line">939</span><br><span class="line">940</span><br><span class="line">941</span><br><span class="line">942</span><br><span class="line">943</span><br><span class="line">944</span><br><span class="line">945</span><br><span class="line">946</span><br><span class="line">947</span><br><span class="line">948</span><br><span class="line">949</span><br><span class="line">950</span><br><span class="line">951</span><br><span class="line">952</span><br><span class="line">953</span><br><span class="line">954</span><br><span class="line">955</span><br><span class="line">956</span><br><span class="line">957</span><br><span class="line">958</span><br><span class="line">959</span><br><span class="line">960</span><br><span class="line">961</span><br><span class="line">962</span><br><span class="line">963</span><br><span class="line">964</span><br><span class="line">965</span><br><span class="line">966</span><br><span class="line">967</span><br><span class="line">968</span><br><span class="line">969</span><br><span class="line">970</span><br><span class="line">971</span><br><span class="line">972</span><br><span class="line">973</span><br><span class="line">974</span><br><span class="line">975</span><br><span class="line">976</span><br><span class="line">977</span><br><span class="line">978</span><br><span class="line">979</span><br><span class="line">980</span><br><span class="line">981</span><br><span class="line">982</span><br><span class="line">983</span><br><span class="line">984</span><br><span class="line">985</span><br><span class="line">986</span><br><span class="line">987</span><br><span class="line">988</span><br><span class="line">989</span><br><span class="line">990</span><br><span class="line">991</span><br><span class="line">992</span><br><span class="line">993</span><br><span class="line">994</span><br><span class="line">995</span><br><span class="line">996</span><br><span class="line">997</span><br><span class="line">998</span><br><span class="line">999</span><br><span class="line">1000</span><br><span class="line">1001</span><br><span class="line">1002</span><br><span class="line">1003</span><br><span class="line">1004</span><br><span class="line">1005</span><br><span class="line">1006</span><br><span class="line">1007</span><br><span class="line">1008</span><br><span class="line">1009</span><br><span class="line">1010</span><br><span class="line">1011</span><br><span class="line">1012</span><br><span class="line">1013</span><br><span class="line">1014</span><br><span class="line">1015</span><br><span class="line">1016</span><br><span class="line">1017</span><br><span class="line">1018</span><br><span class="line">1019</span><br><span class="line">1020</span><br><span class="line">1021</span><br><span class="line">1022</span><br><span class="line">1023</span><br><span class="line">1024</span><br><span class="line">1025</span><br><span class="line">1026</span><br><span class="line">1027</span><br><span class="line">1028</span><br><span class="line">1029</span><br><span class="line">1030</span><br><span class="line">1031</span><br><span class="line">1032</span><br><span class="line">1033</span><br><span class="line">1034</span><br><span class="line">1035</span><br><span class="line">1036</span><br><span class="line">1037</span><br><span class="line">1038</span><br><span class="line">1039</span><br><span class="line">1040</span><br><span class="line">1041</span><br><span class="line">1042</span><br><span class="line">1043</span><br><span class="line">1044</span><br><span class="line">1045</span><br><span class="line">1046</span><br><span class="line">1047</span><br><span class="line">1048</span><br><span class="line">1049</span><br><span class="line">1050</span><br><span class="line">1051</span><br><span class="line">1052</span><br><span class="line">1053</span><br><span class="line">1054</span><br><span class="line">1055</span><br><span class="line">1056</span><br><span class="line">1057</span><br><span class="line">1058</span><br><span class="line">1059</span><br><span class="line">1060</span><br><span class="line">1061</span><br><span class="line">1062</span><br><span class="line">1063</span><br><span class="line">1064</span><br><span class="line">1065</span><br><span class="line">1066</span><br><span class="line">1067</span><br><span class="line">1068</span><br><span class="line">1069</span><br><span class="line">1070</span><br><span class="line">1071</span><br><span class="line">1072</span><br><span class="line">1073</span><br><span class="line">1074</span><br><span class="line">1075</span><br><span class="line">1076</span><br><span class="line">1077</span><br><span class="line">1078</span><br><span class="line">1079</span><br><span class="line">1080</span><br><span class="line">1081</span><br><span class="line">1082</span><br><span class="line">1083</span><br><span class="line">1084</span><br><span class="line">1085</span><br><span class="line">1086</span><br><span class="line">1087</span><br><span class="line">1088</span><br><span class="line">1089</span><br><span class="line">1090</span><br><span class="line">1091</span><br><span class="line">1092</span><br><span class="line">1093</span><br><span class="line">1094</span><br><span class="line">1095</span><br><span class="line">1096</span><br><span class="line">1097</span><br><span class="line">1098</span><br><span class="line">1099</span><br><span class="line">1100</span><br><span class="line">1101</span><br><span class="line">1102</span><br><span class="line">1103</span><br><span class="line">1104</span><br><span class="line">1105</span><br><span class="line">1106</span><br><span class="line">1107</span><br><span class="line">1108</span><br><span class="line">1109</span><br><span class="line">1110</span><br><span class="line">1111</span><br><span class="line">1112</span><br><span class="line">1113</span><br><span class="line">1114</span><br><span class="line">1115</span><br><span class="line">1116</span><br><span class="line">1117</span><br><span class="line">1118</span><br><span class="line">1119</span><br><span class="line">1120</span><br><span class="line">1121</span><br><span class="line">1122</span><br><span class="line">1123</span><br><span class="line">1124</span><br><span class="line">1125</span><br><span class="line">1126</span><br><span class="line">1127</span><br><span class="line">1128</span><br><span class="line">1129</span><br><span class="line">1130</span><br><span class="line">1131</span><br><span class="line">1132</span><br><span class="line">1133</span><br><span class="line">1134</span><br><span class="line">1135</span><br><span class="line">1136</span><br><span class="line">1137</span><br><span class="line">1138</span><br><span class="line">1139</span><br><span class="line">1140</span><br><span class="line">1141</span><br><span class="line">1142</span><br><span class="line">1143</span><br><span class="line">1144</span><br><span class="line">1145</span><br><span class="line">1146</span><br><span class="line">1147</span><br><span class="line">1148</span><br><span class="line">1149</span><br><span class="line">1150</span><br><span class="line">1151</span><br><span class="line">1152</span><br><span class="line">1153</span><br><span class="line">1154</span><br><span class="line">1155</span><br><span class="line">1156</span><br><span class="line">1157</span><br><span class="line">1158</span><br><span class="line">1159</span><br><span class="line">1160</span><br><span class="line">1161</span><br><span class="line">1162</span><br><span class="line">1163</span><br><span class="line">1164</span><br><span class="line">1165</span><br><span class="line">1166</span><br><span class="line">1167</span><br><span class="line">1168</span><br><span class="line">1169</span><br><span class="line">1170</span><br><span class="line">1171</span><br><span class="line">1172</span><br><span class="line">1173</span><br><span class="line">1174</span><br><span class="line">1175</span><br><span class="line">1176</span><br><span class="line">1177</span><br><span class="line">1178</span><br><span class="line">1179</span><br><span class="line">1180</span><br><span class="line">1181</span><br><span class="line">1182</span><br><span class="line">1183</span><br><span class="line">1184</span><br><span class="line">1185</span><br><span class="line">1186</span><br><span class="line">1187</span><br><span class="line">1188</span><br><span class="line">1189</span><br><span class="line">1190</span><br><span class="line">1191</span><br><span class="line">1192</span><br><span class="line">1193</span><br><span class="line">1194</span><br><span class="line">1195</span><br><span class="line">1196</span><br><span class="line">1197</span><br><span class="line">1198</span><br><span class="line">1199</span><br><span class="line">1200</span><br><span class="line">1201</span><br><span class="line">1202</span><br><span class="line">1203</span><br><span class="line">1204</span><br><span class="line">1205</span><br><span class="line">1206</span><br><span class="line">1207</span><br><span class="line">1208</span><br><span class="line">1209</span><br><span class="line">1210</span><br><span class="line">1211</span><br><span class="line">1212</span><br><span class="line">1213</span><br><span class="line">1214</span><br><span class="line">1215</span><br><span class="line">1216</span><br><span class="line">1217</span><br><span class="line">1218</span><br><span class="line">1219</span><br><span class="line">1220</span><br><span class="line">1221</span><br><span class="line">1222</span><br><span class="line">1223</span><br><span class="line">1224</span><br><span class="line">1225</span><br><span class="line">1226</span><br><span class="line">1227</span><br><span class="line">1228</span><br><span class="line">1229</span><br><span class="line">1230</span><br><span class="line">1231</span><br><span class="line">1232</span><br><span class="line">1233</span><br><span class="line">1234</span><br><span class="line">1235</span><br><span class="line">1236</span><br><span class="line">1237</span><br><span class="line">1238</span><br><span class="line">1239</span><br><span class="line">1240</span><br><span class="line">1241</span><br><span class="line">1242</span><br><span class="line">1243</span><br><span class="line">1244</span><br><span class="line">1245</span><br><span class="line">1246</span><br><span class="line">1247</span><br><span class="line">1248</span><br><span class="line">1249</span><br><span class="line">1250</span><br><span class="line">1251</span><br><span class="line">1252</span><br><span class="line">1253</span><br><span class="line">1254</span><br><span class="line">1255</span><br><span class="line">1256</span><br><span class="line">1257</span><br><span class="line">1258</span><br><span class="line">1259</span><br><span class="line">1260</span><br><span class="line">1261</span><br><span class="line">1262</span><br><span class="line">1263</span><br><span class="line">1264</span><br><span class="line">1265</span><br><span class="line">1266</span><br><span class="line">1267</span><br><span class="line">1268</span><br><span class="line">1269</span><br><span class="line">1270</span><br><span class="line">1271</span><br><span class="line">1272</span><br><span class="line">1273</span><br><span class="line">1274</span><br><span class="line">1275</span><br><span class="line">1276</span><br><span class="line">1277</span><br><span class="line">1278</span><br><span class="line">1279</span><br><span class="line">1280</span><br><span class="line">1281</span><br><span class="line">1282</span><br><span class="line">1283</span><br><span class="line">1284</span><br><span class="line">1285</span><br><span class="line">1286</span><br><span class="line">1287</span><br><span class="line">1288</span><br><span class="line">1289</span><br><span class="line">1290</span><br><span class="line">1291</span><br><span class="line">1292</span><br><span class="line">1293</span><br><span class="line">1294</span><br><span class="line">1295</span><br><span class="line">1296</span><br><span class="line">1297</span><br><span class="line">1298</span><br><span class="line">1299</span><br><span class="line">1300</span><br><span class="line">1301</span><br><span class="line">1302</span><br><span class="line">1303</span><br><span class="line">1304</span><br><span class="line">1305</span><br><span class="line">1306</span><br><span class="line">1307</span><br><span class="line">1308</span><br><span class="line">1309</span><br><span class="line">1310</span><br><span class="line">1311</span><br><span class="line">1312</span><br><span class="line">1313</span><br><span class="line">1314</span><br><span class="line">1315</span><br><span class="line">1316</span><br><span class="line">1317</span><br><span class="line">1318</span><br><span class="line">1319</span><br><span class="line">1320</span><br><span class="line">1321</span><br><span class="line">1322</span><br><span class="line">1323</span><br><span class="line">1324</span><br><span class="line">1325</span><br><span class="line">1326</span><br><span class="line">1327</span><br><span class="line">1328</span><br><span class="line">1329</span><br><span class="line">1330</span><br><span class="line">1331</span><br><span class="line">1332</span><br><span class="line">1333</span><br><span class="line">1334</span><br><span class="line">1335</span><br><span class="line">1336</span><br><span class="line">1337</span><br><span class="line">1338</span><br><span class="line">1339</span><br><span class="line">1340</span><br><span class="line">1341</span><br><span class="line">1342</span><br><span class="line">1343</span><br><span class="line">1344</span><br><span class="line">1345</span><br><span class="line">1346</span><br><span class="line">1347</span><br><span class="line">1348</span><br><span class="line">1349</span><br><span class="line">1350</span><br><span class="line">1351</span><br><span class="line">1352</span><br><span class="line">1353</span><br><span class="line">1354</span><br><span class="line">1355</span><br><span class="line">1356</span><br><span class="line">1357</span><br><span class="line">1358</span><br><span class="line">1359</span><br><span class="line">1360</span><br><span class="line">1361</span><br><span class="line">1362</span><br><span class="line">1363</span><br><span class="line">1364</span><br><span class="line">1365</span><br><span class="line">1366</span><br><span class="line">1367</span><br><span class="line">1368</span><br><span class="line">1369</span><br><span class="line">1370</span><br><span class="line">1371</span><br><span class="line">1372</span><br><span class="line">1373</span><br><span class="line">1374</span><br><span class="line">1375</span><br><span class="line">1376</span><br><span class="line">1377</span><br><span class="line">1378</span><br><span class="line">1379</span><br><span class="line">1380</span><br><span class="line">1381</span><br><span class="line">1382</span><br><span class="line">1383</span><br><span class="line">1384</span><br><span class="line">1385</span><br><span class="line">1386</span><br><span class="line">1387</span><br><span class="line">1388</span><br><span class="line">1389</span><br><span class="line">1390</span><br><span class="line">1391</span><br><span class="line">1392</span><br><span class="line">1393</span><br><span class="line">1394</span><br><span class="line">1395</span><br><span class="line">1396</span><br><span class="line">1397</span><br><span class="line">1398</span><br><span class="line">1399</span><br><span class="line">1400</span><br><span class="line">1401</span><br><span class="line">1402</span><br><span class="line">1403</span><br><span class="line">1404</span><br><span class="line">1405</span><br><span class="line">1406</span><br><span class="line">1407</span><br><span class="line">1408</span><br><span class="line">1409</span><br><span class="line">1410</span><br><span class="line">1411</span><br><span class="line">1412</span><br><span class="line">1413</span><br><span class="line">1414</span><br><span class="line">1415</span><br><span class="line">1416</span><br><span class="line">1417</span><br><span class="line">1418</span><br><span class="line">1419</span><br><span class="line">1420</span><br><span class="line">1421</span><br><span class="line">1422</span><br><span class="line">1423</span><br><span class="line">1424</span><br><span class="line">1425</span><br><span class="line">1426</span><br><span class="line">1427</span><br><span class="line">1428</span><br><span class="line">1429</span><br><span class="line">1430</span><br><span class="line">1431</span><br><span class="line">1432</span><br><span class="line">1433</span><br><span class="line">1434</span><br><span class="line">1435</span><br><span class="line">1436</span><br><span class="line">1437</span><br><span class="line">1438</span><br><span class="line">1439</span><br><span class="line">1440</span><br><span class="line">1441</span><br><span class="line">1442</span><br><span class="line">1443</span><br><span class="line">1444</span><br><span class="line">1445</span><br><span class="line">1446</span><br><span class="line">1447</span><br><span class="line">1448</span><br><span class="line">1449</span><br><span class="line">1450</span><br><span class="line">1451</span><br><span class="line">1452</span><br><span class="line">1453</span><br><span class="line">1454</span><br><span class="line">1455</span><br><span class="line">1456</span><br><span class="line">1457</span><br><span class="line">1458</span><br><span class="line">1459</span><br><span class="line">1460</span><br><span class="line">1461</span><br><span class="line">1462</span><br><span class="line">1463</span><br><span class="line">1464</span><br><span class="line">1465</span><br><span class="line">1466</span><br><span class="line">1467</span><br><span class="line">1468</span><br><span class="line">1469</span><br><span class="line">1470</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">OR</span> REPLACE PACKAGE BODY gj_congl_voucher_sync_v2 <span class="keyword">IS</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">-- Set Who</span></span><br><span class="line">  g_conc_request_id NUMBER :<span class="operator">=</span> fnd_global.conc_request_id;</span><br><span class="line">  g_log_msg         VARCHAR2(<span class="number">255</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">-- Global Parameter</span></span><br><span class="line">  g_pkg_name VARCHAR2(<span class="number">255</span>) :<span class="operator">=</span> <span class="string">&#x27;gj_congl_voucher_sync&#x27;</span>;</span><br><span class="line">  g_error    VARCHAR2(<span class="number">20</span>) :<span class="operator">=</span> fnd_api.g_ret_sts_error;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/************************************************</span></span><br><span class="line"><span class="comment">  名称：output</span></span><br><span class="line"><span class="comment">  功能描述：</span></span><br><span class="line"><span class="comment">    输出消息</span></span><br><span class="line"><span class="comment">  </span></span><br><span class="line"><span class="comment">  修订记录：</span></span><br><span class="line"><span class="comment">  版本号    编辑时间    编辑人    修改描述</span></span><br><span class="line"><span class="comment">  1.0.0     2020-09-02  LIYIHUI   1.创建</span></span><br><span class="line"><span class="comment">  </span></span><br><span class="line"><span class="comment">  参数描述：</span></span><br><span class="line"><span class="comment">  p_message    IN    传入参数1</span></span><br><span class="line"><span class="comment">  **************************************************/</span></span><br><span class="line">  <span class="keyword">PROCEDURE</span> output(p_message_text VARCHAR2) <span class="keyword">IS</span></span><br><span class="line">  <span class="keyword">BEGIN</span></span><br><span class="line">    IF g_conc_request_id <span class="operator">&gt;</span> <span class="number">0</span> <span class="keyword">THEN</span></span><br><span class="line">      fnd_file.put_line(fnd_file.log, p_message_text);</span><br><span class="line">    <span class="keyword">ELSE</span></span><br><span class="line">      dbms_output.put_line(to_char(SYSDATE, <span class="string">&#x27;yyyy-mm-dd hh24:mi:ss&#x27;</span>) <span class="operator">||</span></span><br><span class="line">                           <span class="string">&#x27; &gt;&gt;&gt;&gt;&gt;&gt; &#x27;</span> <span class="operator">||</span> p_message_text);</span><br><span class="line">    <span class="keyword">END</span> IF;</span><br><span class="line">  <span class="keyword">END</span> output;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/*==================================================</span></span><br><span class="line"><span class="comment">  Procedure Name :</span></span><br><span class="line"><span class="comment">      log</span></span><br><span class="line"><span class="comment">  Description:</span></span><br><span class="line"><span class="comment">      This procedure perform to 日志</span></span><br><span class="line"><span class="comment">  Argument:</span></span><br><span class="line"><span class="comment">      p_message                  : 消息</span></span><br><span class="line"><span class="comment">  History:</span></span><br><span class="line"><span class="comment">      1.00   2020-09-02  LIYIHUI   Creation</span></span><br><span class="line"><span class="comment">  ==================================================*/</span></span><br><span class="line">  <span class="keyword">PROCEDURE</span> <span class="built_in">log</span>(p_message_text VARCHAR2) <span class="keyword">IS</span></span><br><span class="line">  <span class="keyword">BEGIN</span></span><br><span class="line">    IF g_conc_request_id <span class="operator">&gt;</span> <span class="number">0</span> <span class="keyword">THEN</span></span><br><span class="line">      fnd_file.put_line(fnd_file.log,</span><br><span class="line">                        to_char(SYSDATE, <span class="string">&#x27;yyyy-mm-dd hh24:mi:ss&#x27;</span>) <span class="operator">||</span></span><br><span class="line">                        <span class="string">&#x27; &gt;&gt;&gt;&gt;&gt;&gt; &#x27;</span> <span class="operator">||</span> p_message_text);</span><br><span class="line">    <span class="keyword">ELSE</span></span><br><span class="line">      dbms_output.put_line(to_char(SYSDATE, <span class="string">&#x27;yyyy-mm-dd hh24:mi:ss&#x27;</span>) <span class="operator">||</span></span><br><span class="line">                           <span class="string">&#x27; &gt;&gt;&gt;&gt;&gt;&gt; &#x27;</span> <span class="operator">||</span> p_message_text);</span><br><span class="line">    <span class="keyword">END</span> IF;</span><br><span class="line">  <span class="keyword">END</span> log;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/*==================================================</span></span><br><span class="line"><span class="comment">  Procedure Name :</span></span><br><span class="line"><span class="comment">      raise_exception</span></span><br><span class="line"><span class="comment">  Description:</span></span><br><span class="line"><span class="comment">      This procedure perform to 抛出异常</span></span><br><span class="line"><span class="comment">  Argument:</span></span><br><span class="line"><span class="comment">      x_return_status             : Input Status : E(Error)/U(Unexception)/S(Success)</span></span><br><span class="line"><span class="comment">  History:</span></span><br><span class="line"><span class="comment">      1.00   2020-09-02  LIYIHUI   Creation</span></span><br><span class="line"><span class="comment">  ==================================================*/</span></span><br><span class="line">  <span class="keyword">PROCEDURE</span> raise_exception(x_return_status <span class="keyword">IN</span> VARCHAR2) <span class="keyword">IS</span></span><br><span class="line">  <span class="keyword">BEGIN</span></span><br><span class="line">    IF (x_return_status <span class="operator">=</span> fnd_api.g_ret_sts_unexp_error) <span class="keyword">THEN</span></span><br><span class="line">      RAISE fnd_api.g_exc_unexpected_error;</span><br><span class="line">    ELSIF (x_return_status <span class="operator">=</span> fnd_api.g_ret_sts_error) <span class="keyword">THEN</span></span><br><span class="line">      RAISE fnd_api.g_exc_error;</span><br><span class="line">    <span class="keyword">END</span> IF;</span><br><span class="line">  <span class="keyword">END</span> raise_exception;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/*==================================================</span></span><br><span class="line"><span class="comment">  Procedure Name :</span></span><br><span class="line"><span class="comment">      raise_exception</span></span><br><span class="line"><span class="comment">  Description:</span></span><br><span class="line"><span class="comment">      This procedure perform to 期初凭证同步</span></span><br><span class="line"><span class="comment">  Argument:</span></span><br><span class="line"><span class="comment">      x_return_status             : Input Status : E(Error)/U(Unexception)/S(Success)</span></span><br><span class="line"><span class="comment">  History:</span></span><br><span class="line"><span class="comment">      1.00   2020-11-17  LIYIHUI   Creation</span></span><br><span class="line"><span class="comment">  ==================================================*/</span></span><br><span class="line">  <span class="keyword">PROCEDURE</span> sp_nc_voucher(x_return_status <span class="keyword">OUT</span> NOCOPY VARCHAR2,</span><br><span class="line">                          x_msg_count     <span class="keyword">OUT</span> NOCOPY NUMBER,</span><br><span class="line">                          x_msg_data      <span class="keyword">OUT</span> NOCOPY VARCHAR2) <span class="keyword">IS</span></span><br><span class="line">    l_api_name       CONSTANT VARCHAR2(<span class="number">30</span>) :<span class="operator">=</span> <span class="string">&#x27;ins_sp_nc_voucher&#x27;</span>;</span><br><span class="line">    l_savepoint_name CONSTANT VARCHAR2(<span class="number">30</span>) :<span class="operator">=</span> <span class="string">&#x27;sp_nc_voucher&#x27;</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">BEGIN</span></span><br><span class="line">    <span class="comment">-- start activity to create savepoint, check compatibility</span></span><br><span class="line">    <span class="comment">-- and initialize message list, include debug message hint to enter api</span></span><br><span class="line">    x_return_status :<span class="operator">=</span> cux_api.start_activity(p_pkg_name       <span class="operator">=</span><span class="operator">&gt;</span> g_pkg_name,</span><br><span class="line">                                              p_api_name       <span class="operator">=</span><span class="operator">&gt;</span> l_api_name,</span><br><span class="line">                                              p_savepoint_name <span class="operator">=</span><span class="operator">&gt;</span> l_savepoint_name);</span><br><span class="line">    raise_exception(x_return_status <span class="operator">=</span><span class="operator">&gt;</span> x_return_status);</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">INSERT</span> <span class="keyword">INTO</span> INF_GL_VOUCHER</span><br><span class="line">      (id,</span><br><span class="line">       bookcode,</span><br><span class="line">       unitcode,</span><br><span class="line">       acctyear,</span><br><span class="line">       acctperiod,</span><br><span class="line">       vchrtypecode,</span><br><span class="line">       vchrnum,</span><br><span class="line">       creator,</span><br><span class="line">       createtime,</span><br><span class="line">       createdate,</span><br><span class="line">       postdate,</span><br><span class="line">       postor,</span><br><span class="line">       cashier,</span><br><span class="line">       cashdate,</span><br><span class="line">       attachment,</span><br><span class="line">       adjperiodflag,</span><br><span class="line">       tempflag,</span><br><span class="line">       offsetstate,</span><br><span class="line">       offsetid,</span><br><span class="line">       blueoffsetstate,</span><br><span class="line">       blueoffsetid,</span><br><span class="line">       def_01,</span><br><span class="line">       def_02,</span><br><span class="line">       def_03,</span><br><span class="line">       def_04,</span><br><span class="line">       def_05,</span><br><span class="line">       def_06,</span><br><span class="line">       def_07,</span><br><span class="line">       def_08,</span><br><span class="line">       def_09,</span><br><span class="line">       update_time)</span><br><span class="line">      <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> INF_GL_VOUCHER_NC;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">INSERT</span> <span class="keyword">INTO</span> INF_GL_VOUCHERITEMASS</span><br><span class="line">      (id,</span><br><span class="line">       bookcode,</span><br><span class="line">       unitcode,</span><br><span class="line">       subjectcode,</span><br><span class="line">       subjectname,</span><br><span class="line">       ori_subjectcode,</span><br><span class="line">       ori_subjectname,</span><br><span class="line">       currencycode,</span><br><span class="line">       vchrid,</span><br><span class="line">       acctyear,</span><br><span class="line">       acctperiod,</span><br><span class="line">       rowflag,</span><br><span class="line">       vchrtypecode,</span><br><span class="line">       vchrnum,</span><br><span class="line">       createdate,</span><br><span class="line">       postflag,</span><br><span class="line">       debit,</span><br><span class="line">       credit,</span><br><span class="line">       orgnd,</span><br><span class="line">       orgnc,</span><br><span class="line">       qty,</span><br><span class="line">       price,</span><br><span class="line">       exchrate,</span><br><span class="line">       digest,</span><br><span class="line">       bizdate,</span><br><span class="line">       expiredate,</span><br><span class="line">       md_staff,</span><br><span class="line">       md_department,</span><br><span class="line">       md_custsupplier,</span><br><span class="line">       md_customer,</span><br><span class="line">       md_supplier,</span><br><span class="line">       md_industry,</span><br><span class="line">       md_cfitem,</span><br><span class="line">       md_marbasclass,</span><br><span class="line">       md_measurement,</span><br><span class="line">       md_bankaccount,</span><br><span class="line">       md_reason,</span><br><span class="line">       md_project,</span><br><span class="line">       md_contract,</span><br><span class="line">       md_inde_project,</span><br><span class="line">       md_fundplan,</span><br><span class="line">       md_financing,</span><br><span class="line">       def_01,</span><br><span class="line">       def_02,</span><br><span class="line">       def_03,</span><br><span class="line">       def_04,</span><br><span class="line">       def_05,</span><br><span class="line">       def_06,</span><br><span class="line">       def_07,</span><br><span class="line">       def_08,</span><br><span class="line">       def_09,</span><br><span class="line">       update_time)</span><br><span class="line">      <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> inf_gl_voucheritemass_NC;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">COMMIT</span>;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">-- API end body</span></span><br><span class="line">    <span class="comment">-- end activity, include debug message hint to exit api</span></span><br><span class="line">    x_return_status :<span class="operator">=</span> cux_api.end_activity(p_pkg_name  <span class="operator">=</span><span class="operator">&gt;</span> g_pkg_name,</span><br><span class="line">                                            p_api_name  <span class="operator">=</span><span class="operator">&gt;</span> l_api_name,</span><br><span class="line">                                            x_msg_count <span class="operator">=</span><span class="operator">&gt;</span> x_msg_count,</span><br><span class="line">                                            x_msg_data  <span class="operator">=</span><span class="operator">&gt;</span> x_msg_data);</span><br><span class="line">    raise_exception(x_return_status <span class="operator">=</span><span class="operator">&gt;</span> x_return_status);</span><br><span class="line">  EXCEPTION</span><br><span class="line">    <span class="keyword">WHEN</span> fnd_api.g_exc_error <span class="keyword">THEN</span></span><br><span class="line">      x_return_status :<span class="operator">=</span> cux_api.handle_exceptions(p_pkg_name       <span class="operator">=</span><span class="operator">&gt;</span> g_pkg_name,</span><br><span class="line">                                                   p_api_name       <span class="operator">=</span><span class="operator">&gt;</span> l_api_name,</span><br><span class="line">                                                   p_savepoint_name <span class="operator">=</span><span class="operator">&gt;</span> l_savepoint_name,</span><br><span class="line">                                                   p_exc_name       <span class="operator">=</span><span class="operator">&gt;</span> cux_api.g_exc_name_error,</span><br><span class="line">                                                   x_msg_count      <span class="operator">=</span><span class="operator">&gt;</span> x_msg_count,</span><br><span class="line">                                                   x_msg_data       <span class="operator">=</span><span class="operator">&gt;</span> x_msg_data);</span><br><span class="line">    <span class="keyword">WHEN</span> fnd_api.g_exc_unexpected_error <span class="keyword">THEN</span></span><br><span class="line">      x_return_status :<span class="operator">=</span> cux_api.handle_exceptions(p_pkg_name       <span class="operator">=</span><span class="operator">&gt;</span> g_pkg_name,</span><br><span class="line">                                                   p_api_name       <span class="operator">=</span><span class="operator">&gt;</span> l_api_name,</span><br><span class="line">                                                   p_savepoint_name <span class="operator">=</span><span class="operator">&gt;</span> l_savepoint_name,</span><br><span class="line">                                                   p_exc_name       <span class="operator">=</span><span class="operator">&gt;</span> cux_api.g_exc_name_unexp,</span><br><span class="line">                                                   x_msg_count      <span class="operator">=</span><span class="operator">&gt;</span> x_msg_count,</span><br><span class="line">                                                   x_msg_data       <span class="operator">=</span><span class="operator">&gt;</span> x_msg_data);</span><br><span class="line">    <span class="keyword">WHEN</span> OTHERS <span class="keyword">THEN</span></span><br><span class="line">      x_return_status :<span class="operator">=</span> cux_api.handle_exceptions(p_pkg_name       <span class="operator">=</span><span class="operator">&gt;</span> g_pkg_name,</span><br><span class="line">                                                   p_api_name       <span class="operator">=</span><span class="operator">&gt;</span> l_api_name,</span><br><span class="line">                                                   p_savepoint_name <span class="operator">=</span><span class="operator">&gt;</span> l_savepoint_name,</span><br><span class="line">                                                   p_exc_name       <span class="operator">=</span><span class="operator">&gt;</span> cux_api.g_exc_name_others,</span><br><span class="line">                                                   x_msg_count      <span class="operator">=</span><span class="operator">&gt;</span> x_msg_count,</span><br><span class="line">                                                   x_msg_data       <span class="operator">=</span><span class="operator">&gt;</span> x_msg_data);</span><br><span class="line">  <span class="keyword">END</span> sp_nc_voucher;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * @Author  : KALOSORA</span></span><br><span class="line"><span class="comment">  * @Purpose : 同步会计分录行，根据行的accounting_date反过来匹配头的数据</span></span><br><span class="line"><span class="comment">  *            可能会存在如下情况</span></span><br><span class="line"><span class="comment">  *              ap_invoices_all.gl_date &lt; 2020-01-01</span></span><br><span class="line"><span class="comment">  *            但此时存在冲销、取消的业务</span></span><br><span class="line"><span class="comment">  *              xla_ae_lines.accounting_date &gt; 2020-01-01</span></span><br><span class="line"><span class="comment">  *</span></span><br><span class="line"><span class="comment">  * @Param   ：x_return_status 返回的参数状态</span></span><br><span class="line"><span class="comment">  * @Param   ：x_return_status 返回的消息</span></span><br><span class="line"><span class="comment">  * @Version : 1.0</span></span><br><span class="line"><span class="comment">  * @Since   : 2021/1/19 9:12:35</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="keyword">PROCEDURE</span> sp_vchrnum_lines(x_return_status <span class="keyword">OUT</span> NOCOPY VARCHAR2,</span><br><span class="line">                             x_msg_count     <span class="keyword">OUT</span> NOCOPY NUMBER,</span><br><span class="line">                             x_msg_data      <span class="keyword">OUT</span> NOCOPY VARCHAR2) <span class="keyword">IS</span></span><br><span class="line">    l_api_name CONSTANT VARCHAR2(<span class="number">100</span>) :<span class="operator">=</span> <span class="string">&#x27;sp_vchrnum_lines&#x27;</span>;</span><br><span class="line">  </span><br><span class="line">    TYPE l_rec_line <span class="keyword">IS</span> <span class="keyword">TABLE</span> <span class="keyword">OF</span> INF_GL_VOUCHERITEMASS<span class="operator">%</span>ROWTYPE;</span><br><span class="line">    l_rec_line_list l_rec_line;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">CURSOR</span> cur_voucher_lines <span class="keyword">IS</span></span><br><span class="line">      <span class="keyword">SELECT</span> to_char(xal.AE_HEADER_ID) <span class="operator">||</span> LPAD(xal.AE_LINE_NUM, <span class="number">4</span>, <span class="number">0</span>) id,</span><br><span class="line">             <span class="string">&#x27;GJ_CN_01&#x27;</span> BOOKCODE,</span><br><span class="line">             <span class="string">&#x27;PENDING&#x27;</span> UNITCODE,</span><br><span class="line">             <span class="comment">--xep.LEGAL_ENTITY_IDENTIFIER UNITCODE,</span></span><br><span class="line">             (<span class="keyword">SELECT</span> t.org_coa_acc_code</span><br><span class="line">                <span class="keyword">FROM</span> gj_organization_coa_flex_value t</span><br><span class="line">               <span class="keyword">WHERE</span> <span class="number">1</span> <span class="operator">=</span> <span class="number">1</span></span><br><span class="line">                 <span class="keyword">AND</span> t.COA_ACC_CODE <span class="operator">=</span> gcck.segment3) SUBJECTCODE,</span><br><span class="line">             (<span class="keyword">SELECT</span> t.org_coa_acc_desc</span><br><span class="line">                <span class="keyword">FROM</span> gj_organization_coa_flex_value t</span><br><span class="line">               <span class="keyword">WHERE</span> <span class="number">1</span> <span class="operator">=</span> <span class="number">1</span></span><br><span class="line">                 <span class="keyword">AND</span> t.COA_ACC_CODE <span class="operator">=</span> gcck.segment3) SUBJECTNAME,</span><br><span class="line">             gcck.segment3 ORI_SUBJECTCODE,</span><br><span class="line">             gj_account_details_rpt.get_flex_description(<span class="string">&#x27;GJ_COA_ACC&#x27;</span>,</span><br><span class="line">                                                         gcck.segment3) ORI_SUBJECTNAME,</span><br><span class="line">             xal.CURRENCY_CODE CURRENCYCODE,</span><br><span class="line">             ora_hash(xte.entity_code) <span class="operator">||</span> to_char(xte.source_id_int_1) VCHRID,</span><br><span class="line">             to_number(to_char(xal.ACCOUNTING_DATE, <span class="string">&#x27;yyyy&#x27;</span>)) ACCTYEAR,</span><br><span class="line">             to_char(xal.ACCOUNTING_DATE, <span class="string">&#x27;mm&#x27;</span>) ACCTPERIOD,</span><br><span class="line">             xal.ae_line_num ROWFLAG,</span><br><span class="line">             decode(xte.entity_code,</span><br><span class="line">                    <span class="string">&#x27;AP_INVOICES&#x27;</span>,</span><br><span class="line">                    <span class="string">&#x27;2&#x27;</span>,</span><br><span class="line">                    <span class="string">&#x27;AP_PAYMENTS&#x27;</span>,</span><br><span class="line">                    <span class="string">&#x27;3&#x27;</span>,</span><br><span class="line">                    <span class="string">&#x27;RECEIPTS&#x27;</span>,</span><br><span class="line">                    <span class="string">&#x27;5&#x27;</span>,</span><br><span class="line">                    <span class="string">&#x27;TRANSACTIONS&#x27;</span>,</span><br><span class="line">                    <span class="string">&#x27;4&#x27;</span>) vchrtypecode,</span><br><span class="line">             <span class="comment">/*(SELECT to_char(aia.voucher_num)</span></span><br><span class="line"><span class="comment">              FROM ap_invoices_all aia</span></span><br><span class="line"><span class="comment">             WHERE 1 = 1</span></span><br><span class="line"><span class="comment">               AND ora_hash(xte.entity_code) || to_char(aia.invoice_id) =</span></span><br><span class="line"><span class="comment">                   ora_hash(xte.entity_code) || to_char(xte.source_id_int_1)</span></span><br><span class="line"><span class="comment">               AND rownum = 1) vchrnum,*/</span></span><br><span class="line">             <span class="string">&#x27;PENDING&#x27;</span> vchrnum,</span><br><span class="line">             to_char(xal.ACCOUNTING_DATE, <span class="string">&#x27;yyyy-mm-dd hh24:mi:ss&#x27;</span>) createdate,</span><br><span class="line">             <span class="string">&#x27;Y&#x27;</span> postflag,</span><br><span class="line">             (DECODE((<span class="keyword">SELECT</span> goc.attribute2</span><br><span class="line">                       <span class="keyword">FROM</span> gj_organization_coa_flex_value t,</span><br><span class="line">                            gj_organization_coa_flex_type  goc</span><br><span class="line">                      <span class="keyword">WHERE</span> <span class="number">1</span> <span class="operator">=</span> <span class="number">1</span></span><br><span class="line">                        <span class="keyword">AND</span> t.org_coa_acc_code <span class="operator">=</span> goc.org_coa_code</span><br><span class="line">                        <span class="keyword">AND</span> t.COA_ACC_CODE <span class="operator">=</span> gcck.segment3</span><br><span class="line">                        <span class="keyword">AND</span> goc.attribute1 <span class="keyword">IN</span> (<span class="string">&#x27;成本类&#x27;</span>, <span class="string">&#x27;损益类&#x27;</span>)),</span><br><span class="line">                     <span class="string">&#x27;贷方&#x27;</span>,</span><br><span class="line">                     <span class="number">0</span>,</span><br><span class="line">                     <span class="string">&#x27;借方&#x27;</span>,</span><br><span class="line">                     nvl(xal.accounted_cr <span class="operator">*</span> <span class="number">-1</span>, <span class="number">0</span>) <span class="operator">+</span></span><br><span class="line">                     nvl(xal.accounted_dr, <span class="number">0</span>),</span><br><span class="line">                     nvl(xal.accounted_dr, <span class="number">0</span>))) DEBIT,</span><br><span class="line">             (DECODE((<span class="keyword">SELECT</span> goc.attribute2</span><br><span class="line">                       <span class="keyword">FROM</span> gj_organization_coa_flex_value t,</span><br><span class="line">                            gj_organization_coa_flex_type  goc</span><br><span class="line">                      <span class="keyword">WHERE</span> <span class="number">1</span> <span class="operator">=</span> <span class="number">1</span></span><br><span class="line">                        <span class="keyword">AND</span> t.org_coa_acc_code <span class="operator">=</span> goc.org_coa_code</span><br><span class="line">                        <span class="keyword">AND</span> t.COA_ACC_CODE <span class="operator">=</span> gcck.segment3</span><br><span class="line">                        <span class="keyword">AND</span> goc.attribute1 <span class="keyword">IN</span> (<span class="string">&#x27;成本类&#x27;</span>, <span class="string">&#x27;损益类&#x27;</span>)),</span><br><span class="line">                     <span class="string">&#x27;借方&#x27;</span>,</span><br><span class="line">                     <span class="number">0</span>,</span><br><span class="line">                     <span class="string">&#x27;贷方&#x27;</span>,</span><br><span class="line">                     nvl(xal.accounted_dr <span class="operator">*</span> <span class="number">-1</span>, <span class="number">0</span>) <span class="operator">+</span></span><br><span class="line">                     nvl(xal.accounted_cr, <span class="number">0</span>),</span><br><span class="line">                     nvl(xal.accounted_cr, <span class="number">0</span>))) CREDIT,</span><br><span class="line">             (DECODE((<span class="keyword">SELECT</span> goc.attribute2</span><br><span class="line">                       <span class="keyword">FROM</span> gj_organization_coa_flex_value t,</span><br><span class="line">                            gj_organization_coa_flex_type  goc</span><br><span class="line">                      <span class="keyword">WHERE</span> <span class="number">1</span> <span class="operator">=</span> <span class="number">1</span></span><br><span class="line">                        <span class="keyword">AND</span> t.org_coa_acc_code <span class="operator">=</span> goc.org_coa_code</span><br><span class="line">                        <span class="keyword">AND</span> t.COA_ACC_CODE <span class="operator">=</span> gcck.segment3</span><br><span class="line">                        <span class="keyword">AND</span> goc.attribute1 <span class="keyword">IN</span> (<span class="string">&#x27;成本类&#x27;</span>, <span class="string">&#x27;损益类&#x27;</span>)),</span><br><span class="line">                     <span class="string">&#x27;贷方&#x27;</span>,</span><br><span class="line">                     <span class="number">0</span>,</span><br><span class="line">                     <span class="string">&#x27;借方&#x27;</span>,</span><br><span class="line">                     nvl(xal.accounted_cr <span class="operator">*</span> <span class="number">-1</span>, <span class="number">0</span>) <span class="operator">+</span></span><br><span class="line">                     nvl(xal.accounted_dr, <span class="number">0</span>),</span><br><span class="line">                     nvl(xal.accounted_dr, <span class="number">0</span>))) ORGND,</span><br><span class="line">             (DECODE((<span class="keyword">SELECT</span> goc.attribute2</span><br><span class="line">                       <span class="keyword">FROM</span> gj_organization_coa_flex_value t,</span><br><span class="line">                            gj_organization_coa_flex_type  goc</span><br><span class="line">                      <span class="keyword">WHERE</span> <span class="number">1</span> <span class="operator">=</span> <span class="number">1</span></span><br><span class="line">                        <span class="keyword">AND</span> t.org_coa_acc_code <span class="operator">=</span> goc.org_coa_code</span><br><span class="line">                        <span class="keyword">AND</span> t.COA_ACC_CODE <span class="operator">=</span> gcck.segment3</span><br><span class="line">                        <span class="keyword">AND</span> goc.attribute1 <span class="keyword">IN</span> (<span class="string">&#x27;成本类&#x27;</span>, <span class="string">&#x27;损益类&#x27;</span>)),</span><br><span class="line">                     <span class="string">&#x27;借方&#x27;</span>,</span><br><span class="line">                     <span class="number">0</span>,</span><br><span class="line">                     <span class="string">&#x27;贷方&#x27;</span>,</span><br><span class="line">                     nvl(xal.accounted_dr <span class="operator">*</span> <span class="number">-1</span>, <span class="number">0</span>) <span class="operator">+</span></span><br><span class="line">                     nvl(xal.accounted_cr, <span class="number">0</span>),</span><br><span class="line">                     nvl(xal.accounted_cr, <span class="number">0</span>))) ORGNC,</span><br><span class="line">             <span class="number">0</span> QTY,</span><br><span class="line">             <span class="number">0</span> PRICE,</span><br><span class="line">             decode(xal.CURRENCY_CODE,</span><br><span class="line">                    <span class="string">&#x27;CNY&#x27;</span>,</span><br><span class="line">                    <span class="number">1</span>,</span><br><span class="line">                    nvl(xal.CURRENCY_CONVERSION_RATE, <span class="number">1</span>)) EXCHRATE,</span><br><span class="line">             nvl(nvl(xal.description, xah.DESCRIPTION), <span class="string">&#x27;入账&#x27;</span>) DIGEST,</span><br><span class="line">             to_date(xal.ACCOUNTING_DATE, <span class="string">&#x27;yyyy-mm-dd hh24:mi:ss&#x27;</span>) bizdate,</span><br><span class="line">             <span class="keyword">NULL</span> expiredate,</span><br><span class="line">             <span class="keyword">NULL</span> md_staff,</span><br><span class="line">             DECODE(gcck.segment2, <span class="string">&#x27;0&#x27;</span>, <span class="keyword">NULL</span>, SUBSTR(gcck.segment2, <span class="number">1</span>, <span class="number">4</span>)) MD_DEPARTMENT,</span><br><span class="line">             <span class="keyword">NULL</span> md_custsupplier,</span><br><span class="line">             <span class="string">&#x27;PENDING&#x27;</span> MD_CUSTOMER,</span><br><span class="line">             <span class="comment">--xal.PARTY_TYPE_CODE || pv.segment1 MD_SUPPLIER,</span></span><br><span class="line">             <span class="string">&#x27;PENDING&#x27;</span> MD_SUPPLIER,</span><br><span class="line">             <span class="comment">/*DECODE((SELECT ffvs.FLEX_VALUE</span></span><br><span class="line"><span class="comment">               FROM fnd_flex_values_vl ffvs, fnd_flex_value_sets ffv</span></span><br><span class="line"><span class="comment">              WHERE 1 = 1</span></span><br><span class="line"><span class="comment">                AND ffvs.FLEX_VALUE_SET_ID = ffv.FLEX_VALUE_SET_ID</span></span><br><span class="line"><span class="comment">                AND ffv.FLEX_VALUE_SET_NAME = &#x27;GJ_INTER_VIM_INDUSTRY&#x27;</span></span><br><span class="line"><span class="comment">                AND ffvs.FLEX_VALUE = SUBSTR(gcck.segment3, 1, 4)</span></span><br><span class="line"><span class="comment">                AND ffvs.ENABLED_FLAG = &#x27;Y&#x27;</span></span><br><span class="line"><span class="comment">                AND nvl(ffvs.END_DATE_ACTIVE, SYSDATE) &gt;= SYSDATE),</span></span><br><span class="line"><span class="comment">             NULL,</span></span><br><span class="line"><span class="comment">             NULL,</span></span><br><span class="line"><span class="comment">             (SELECT flv.DESCRIPTION</span></span><br><span class="line"><span class="comment">                FROM fnd_lookup_values flv</span></span><br><span class="line"><span class="comment">               WHERE 1 = 1</span></span><br><span class="line"><span class="comment">                 AND flv.LOOKUP_TYPE = &#x27;GJ_INTER_LEGAL_TYPE&#x27;</span></span><br><span class="line"><span class="comment">                 AND flv.LANGUAGE = &#x27;ZHS&#x27;</span></span><br><span class="line"><span class="comment">                 AND flv.ENABLED_FLAG = &#x27;Y&#x27;</span></span><br><span class="line"><span class="comment">                 AND nvl(flv.END_DATE_ACTIVE, SYSDATE) &gt;= SYSDATE</span></span><br><span class="line"><span class="comment">                 AND flv.LOOKUP_CODE = xep.LEGAL_ENTITY_IDENTIFIER)) MD_INDUSTRY,*/</span></span><br><span class="line">             <span class="string">&#x27;PENDING&#x27;</span> MD_INDUSTRY,</span><br><span class="line">             <span class="comment">/*(SELECT aid.attribute1</span></span><br><span class="line"><span class="comment">              FROM ap_invoices_all aia, ap_invoice_distributions_all aid</span></span><br><span class="line"><span class="comment">             WHERE 1 = 1</span></span><br><span class="line"><span class="comment">               AND aia.invoice_id = aid.invoice_id</span></span><br><span class="line"><span class="comment">               AND ora_hash(xte.entity_code) || to_char(aia.invoice_id) =</span></span><br><span class="line"><span class="comment">                   ora_hash(xte.entity_code) || to_char(xte.source_id_int_1)</span></span><br><span class="line"><span class="comment">               AND rownum = 1) MD_CFITEM,*/</span></span><br><span class="line">             <span class="string">&#x27;PENDING&#x27;</span> MD_CFITEM,</span><br><span class="line">             DECODE((<span class="keyword">SELECT</span> ffvs.FLEX_VALUE</span><br><span class="line">                      <span class="keyword">FROM</span> fnd_flex_values_vl ffvs, fnd_flex_value_sets ffv</span><br><span class="line">                     <span class="keyword">WHERE</span> <span class="number">1</span> <span class="operator">=</span> <span class="number">1</span></span><br><span class="line">                       <span class="keyword">AND</span> ffvs.FLEX_VALUE_SET_ID <span class="operator">=</span> ffv.FLEX_VALUE_SET_ID</span><br><span class="line">                       <span class="keyword">AND</span> ffv.FLEX_VALUE_SET_NAME <span class="operator">=</span></span><br><span class="line">                           <span class="string">&#x27;GJ_INTER_VIM_MARBASCLASS&#x27;</span></span><br><span class="line">                       <span class="keyword">AND</span> ffvs.FLEX_VALUE <span class="operator">=</span> SUBSTR(gcck.segment3, <span class="number">1</span>, <span class="number">4</span>)</span><br><span class="line">                       <span class="keyword">AND</span> ffvs.ENABLED_FLAG <span class="operator">=</span> <span class="string">&#x27;Y&#x27;</span></span><br><span class="line">                       <span class="keyword">AND</span> nvl(ffvs.END_DATE_ACTIVE, SYSDATE) <span class="operator">&gt;=</span> SYSDATE),</span><br><span class="line">                    <span class="keyword">NULL</span>,</span><br><span class="line">                    <span class="keyword">NULL</span>,</span><br><span class="line">                    (<span class="keyword">SELECT</span> flv.DESCRIPTION</span><br><span class="line">                       <span class="keyword">FROM</span> fnd_lookup_values flv</span><br><span class="line">                      <span class="keyword">WHERE</span> <span class="number">1</span> <span class="operator">=</span> <span class="number">1</span></span><br><span class="line">                        <span class="keyword">AND</span> flv.LOOKUP_TYPE <span class="operator">=</span> <span class="string">&#x27;GJ_INTER_MARBASCLASS&#x27;</span></span><br><span class="line">                        <span class="keyword">AND</span> flv.LANGUAGE <span class="operator">=</span> <span class="string">&#x27;ZHS&#x27;</span></span><br><span class="line">                        <span class="keyword">AND</span> flv.ENABLED_FLAG <span class="operator">=</span> <span class="string">&#x27;Y&#x27;</span></span><br><span class="line">                        <span class="keyword">AND</span> nvl(flv.END_DATE_ACTIVE, SYSDATE) <span class="operator">&gt;=</span> SYSDATE</span><br><span class="line">                        <span class="keyword">AND</span> flv.LOOKUP_CODE <span class="operator">=</span> gcck.segment1)) MD_MARBASCLASS,</span><br><span class="line">             <span class="keyword">NULL</span> md_measurement,</span><br><span class="line">             gcck.segment4 MD_BANKACCOUNT,</span><br><span class="line">             <span class="keyword">NULL</span> MD_REASON,</span><br><span class="line">             <span class="keyword">NULL</span> md_project,</span><br><span class="line">             <span class="keyword">NULL</span> md_contract,</span><br><span class="line">             <span class="keyword">NULL</span> md_inde_project,</span><br><span class="line">             <span class="keyword">NULL</span> MD_FUNDPLAN,</span><br><span class="line">             <span class="keyword">NULL</span> MD_FINANCING,</span><br><span class="line">             <span class="keyword">NULL</span> def_01,</span><br><span class="line">             <span class="keyword">NULL</span> def_02,</span><br><span class="line">             <span class="keyword">NULL</span> def_03,</span><br><span class="line">             <span class="keyword">NULL</span> def_04,</span><br><span class="line">             <span class="keyword">NULL</span> def_05,</span><br><span class="line">             <span class="keyword">NULL</span> def_06,</span><br><span class="line">             <span class="keyword">NULL</span> def_07,</span><br><span class="line">             <span class="keyword">NULL</span> def_08,</span><br><span class="line">             <span class="keyword">NULL</span> def_09,</span><br><span class="line">             to_date(SYSDATE, <span class="string">&#x27;yyyy-mm-dd hh24:mi:ss&#x27;</span>) update_time</span><br><span class="line">        <span class="keyword">FROM</span> xla_ae_headers               xah,</span><br><span class="line">             xla_ae_lines                 xal,</span><br><span class="line">             xla.xla_transaction_entities xte,</span><br><span class="line">             gl_code_combinations_kfv     gcck,</span><br><span class="line">             <span class="comment">--</span></span><br><span class="line">             fnd_lookup_values flv</span><br><span class="line">       <span class="keyword">WHERE</span> <span class="number">1</span> <span class="operator">=</span> <span class="number">1</span></span><br><span class="line">         <span class="keyword">AND</span> xah.AE_HEADER_ID <span class="operator">=</span> xal.AE_HEADER_ID</span><br><span class="line">         <span class="keyword">AND</span> xte.ledger_id <span class="operator">=</span> <span class="number">2021</span></span><br><span class="line">         <span class="keyword">AND</span> xte.entity_id <span class="operator">=</span> xah.entity_id</span><br><span class="line">         <span class="keyword">AND</span> (nvl(accounted_cr, <span class="number">0</span>) <span class="operator">&lt;&gt;</span> <span class="number">0</span> <span class="keyword">OR</span> nvl(accounted_dr, <span class="number">0</span>) <span class="operator">&lt;&gt;</span> <span class="number">0</span> <span class="keyword">OR</span></span><br><span class="line">             fnd_profile.value(<span class="string">&#x27;XLA_SHOW_ZERO_AMT_JRNL&#x27;</span>) <span class="operator">=</span> <span class="string">&#x27;Y&#x27;</span>)</span><br><span class="line">         <span class="keyword">AND</span> xte.application_id <span class="keyword">IN</span> (<span class="number">200</span>, <span class="number">222</span>) <span class="comment">--应付/应收模块</span></span><br><span class="line">         <span class="keyword">AND</span> xte.application_id <span class="operator">=</span> xah.application_id</span><br><span class="line">         <span class="keyword">AND</span> xte.entity_code <span class="keyword">IN</span></span><br><span class="line">             (<span class="string">&#x27;AP_INVOICES&#x27;</span>, <span class="string">&#x27;AP_PAYMENTS&#x27;</span>, <span class="string">&#x27;RECEIPTS&#x27;</span>, <span class="string">&#x27;TRANSACTIONS&#x27;</span>)</span><br><span class="line">         <span class="keyword">AND</span> xal.code_combination_id <span class="operator">=</span> gcck.code_combination_id</span><br><span class="line">            <span class="comment">--最终过账</span></span><br><span class="line">         <span class="keyword">AND</span> flv.LANGUAGE <span class="operator">=</span> <span class="string">&#x27;ZHS&#x27;</span></span><br><span class="line">         <span class="keyword">AND</span> flv.VIEW_APPLICATION_ID <span class="operator">=</span> <span class="number">602</span></span><br><span class="line">         <span class="keyword">AND</span> flv.lookup_type <span class="operator">=</span> <span class="string">&#x27;XLA_ACCOUNTING_ENTRY_STATUS&#x27;</span></span><br><span class="line">         <span class="keyword">AND</span> flv.meaning <span class="operator">=</span> <span class="string">&#x27;最终&#x27;</span></span><br><span class="line">         <span class="keyword">AND</span> flv.lookup_code <span class="operator">=</span> xah.accounting_entry_status_code</span><br><span class="line">            <span class="comment">-- 参数</span></span><br><span class="line">         <span class="keyword">AND</span> xal.ACCOUNTING_DATE <span class="operator">&gt;=</span> to_date(<span class="string">&#x27;2020-01-01&#x27;</span>, <span class="string">&#x27;yyyy-mm-dd&#x27;</span>)</span><br><span class="line">            <span class="comment">-- 同步的ou参数</span></span><br><span class="line">         <span class="keyword">AND</span> <span class="keyword">EXISTS</span></span><br><span class="line">       (<span class="keyword">SELECT</span> <span class="number">1</span></span><br><span class="line">                <span class="keyword">FROM</span> fnd_lookup_values flv, hr_operating_units hou</span><br><span class="line">               <span class="keyword">WHERE</span> <span class="number">1</span> <span class="operator">=</span> <span class="number">1</span></span><br><span class="line">                 <span class="keyword">AND</span> flv.LOOKUP_TYPE <span class="operator">=</span> <span class="string">&#x27;GJ_INTER_COM&#x27;</span></span><br><span class="line">                 <span class="keyword">AND</span> flv.LANGUAGE <span class="operator">=</span> <span class="string">&#x27;ZHS&#x27;</span></span><br><span class="line">                 <span class="keyword">AND</span> nvl(flv.END_DATE_ACTIVE, SYSDATE) <span class="operator">&gt;=</span> SYSDATE</span><br><span class="line">                 <span class="keyword">AND</span> flv.ENABLED_FLAG <span class="operator">=</span> <span class="string">&#x27;Y&#x27;</span></span><br><span class="line">                 <span class="keyword">AND</span> hou.short_code <span class="operator">=</span> gcck.segment1);</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">BEGIN</span></span><br><span class="line">    <span class="comment">-- 日志开始</span></span><br><span class="line">    g_log_msg :<span class="operator">=</span> to_char(SYSDATE, <span class="string">&#x27;yyyy-mm-dd hh24:mi:ss&#x27;</span>) <span class="operator">||</span> <span class="string">&#x27; &#x27;</span> <span class="operator">||</span></span><br><span class="line">                 l_api_name <span class="operator">||</span> <span class="string">&#x27; 程序开始&#x27;</span>;</span><br><span class="line">    <span class="built_in">log</span>(g_log_msg);</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">OPEN</span> cur_voucher_lines;</span><br><span class="line">    LOOP</span><br><span class="line">      <span class="keyword">FETCH</span> cur_voucher_lines BULK <span class="keyword">COLLECT</span></span><br><span class="line">        <span class="keyword">INTO</span> l_rec_line_list LIMIT <span class="number">1000</span>;</span><br><span class="line">  </span><br><span class="line">      FORALL i <span class="keyword">IN</span> l_rec_line_list.first .. l_rec_line_list.last</span><br><span class="line">        <span class="keyword">INSERT</span> <span class="keyword">INTO</span> INF_GL_VOUCHERITEMASS <span class="keyword">VALUES</span> l_rec_line_list (i);</span><br><span class="line">  </span><br><span class="line">      <span class="comment">-- 每1000条提交一次</span></span><br><span class="line">      <span class="keyword">COMMIT</span>;</span><br><span class="line">  </span><br><span class="line">      EXIT <span class="keyword">WHEN</span> cur_voucher_lines<span class="operator">%</span>NOTFOUND;</span><br><span class="line">    <span class="keyword">END</span> LOOP;</span><br><span class="line">    <span class="keyword">CLOSE</span> cur_voucher_lines;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">-- 日志结束</span></span><br><span class="line">    g_log_msg :<span class="operator">=</span> to_char(SYSDATE, <span class="string">&#x27;yyyy-mm-dd hh24:mi:ss&#x27;</span>) <span class="operator">||</span> <span class="string">&#x27; &#x27;</span> <span class="operator">||</span></span><br><span class="line">                 l_api_name <span class="operator">||</span> <span class="string">&#x27; 程序开始&#x27;</span>;</span><br><span class="line">    <span class="built_in">log</span>(g_log_msg);</span><br><span class="line">  EXCEPTION</span><br><span class="line">    <span class="keyword">WHEN</span> OTHERS <span class="keyword">THEN</span></span><br><span class="line">      x_return_status :<span class="operator">=</span> g_error;</span><br><span class="line">      x_msg_data      :<span class="operator">=</span> l_api_name <span class="operator">||</span> <span class="string">&#x27;-&gt;&#x27;</span> <span class="operator">||</span> SQLERRM <span class="operator">||</span></span><br><span class="line">                         dbms_utility.format_error_backtrace;</span><br><span class="line">      <span class="built_in">log</span>(x_msg_data);</span><br><span class="line">  <span class="keyword">END</span> sp_vchrnum_lines;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * @Author  : KALOSORA</span></span><br><span class="line"><span class="comment">  * @Purpose : 根据已经同步的会计分录行，匹配应付发票头数据</span></span><br><span class="line"><span class="comment">  *</span></span><br><span class="line"><span class="comment">  * @Param   ：x_return_status 返回的参数状态</span></span><br><span class="line"><span class="comment">  * @Param   ：x_return_status 返回的消息</span></span><br><span class="line"><span class="comment">  * @Version : 1.0</span></span><br><span class="line"><span class="comment">  * @Since   : 2021/1/19 9:12:35</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="keyword">PROCEDURE</span> sp_ap_invoice_headers(x_return_status <span class="keyword">OUT</span> NOCOPY VARCHAR2,</span><br><span class="line">                                  x_msg_count     <span class="keyword">OUT</span> NOCOPY NUMBER,</span><br><span class="line">                                  x_msg_data      <span class="keyword">OUT</span> NOCOPY VARCHAR2) <span class="keyword">IS</span></span><br><span class="line">    l_api_name CONSTANT VARCHAR2(<span class="number">100</span>) :<span class="operator">=</span> <span class="string">&#x27;sp_ap_invoice_headers&#x27;</span>;</span><br><span class="line">  </span><br><span class="line">    TYPE l_rec_header <span class="keyword">IS</span> <span class="keyword">TABLE</span> <span class="keyword">OF</span> INF_GL_VOUCHER<span class="operator">%</span>ROWTYPE;</span><br><span class="line">    l_rec_header_list l_rec_header;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">CURSOR</span> cur_invoice_headers <span class="keyword">IS</span></span><br><span class="line">      <span class="keyword">SELECT</span> infvhr.id,</span><br><span class="line">             <span class="string">&#x27;GJ_CN_01&#x27;</span> BOOKCODE,</span><br><span class="line">             xep.LEGAL_ENTITY_IDENTIFIER UNITCODE,</span><br><span class="line">             infvhr.ACCTYEAR,</span><br><span class="line">             infvhr.ACCTPERIOD,</span><br><span class="line">             infvhr.VCHRTYPECODE,</span><br><span class="line">             infvhr.VCHRNUM,</span><br><span class="line">             fu.USER_NAME CREATOR,</span><br><span class="line">             infvhr.CREATETIME,</span><br><span class="line">             infvhr.CREATEDATE,</span><br><span class="line">             infvhr.POSTDATE,</span><br><span class="line">             <span class="keyword">NULL</span> POSTOR,</span><br><span class="line">             <span class="keyword">NULL</span> CASHIER,</span><br><span class="line">             <span class="keyword">NULL</span> CASHDATE,</span><br><span class="line">             <span class="keyword">NULL</span> ATTACHMENT,</span><br><span class="line">             infvhr.ADJPERIODFLAG,</span><br><span class="line">             <span class="string">&#x27;0&#x27;</span> TEMPFLAG,</span><br><span class="line">             <span class="string">&#x27;0&#x27;</span> OFFSETSTATE,</span><br><span class="line">             <span class="keyword">NULL</span> OFFSETID,</span><br><span class="line">             <span class="string">&#x27;0&#x27;</span> BLUEOFFSETSTATE,</span><br><span class="line">             <span class="keyword">NULL</span> BLUEOFFSETID,</span><br><span class="line">             infvhr.MD_SUPPLIER def_01,</span><br><span class="line">             infvhr.MD_CFITEM def_02,</span><br><span class="line">             <span class="keyword">NULL</span> def_03,</span><br><span class="line">             <span class="keyword">NULL</span> def_04,</span><br><span class="line">             <span class="keyword">NULL</span> def_05,</span><br><span class="line">             <span class="keyword">NULL</span> def_06,</span><br><span class="line">             <span class="keyword">NULL</span> def_07,</span><br><span class="line">             <span class="keyword">NULL</span> def_08,</span><br><span class="line">             <span class="keyword">NULL</span> def_09,</span><br><span class="line">             to_char(SYSDATE, <span class="string">&#x27;yyyy-mm-dd hh24:mi:ss&#x27;</span>) update_time</span><br><span class="line">        <span class="keyword">FROM</span> (<span class="keyword">SELECT</span> ora_hash(<span class="string">&#x27;AP_INVOICES&#x27;</span>) <span class="operator">||</span> aia.invoice_id ID,</span><br><span class="line">                     aia.org_id,</span><br><span class="line">                     aia.invoice_id,</span><br><span class="line">                     aia.CREATED_BY,</span><br><span class="line">                     to_number(to_char(aia.GL_DATE, <span class="string">&#x27;yyyy&#x27;</span>)) ACCTYEAR,</span><br><span class="line">                     to_char(aia.GL_DATE, <span class="string">&#x27;mm&#x27;</span>) ACCTPERIOD,</span><br><span class="line">                     (<span class="keyword">SELECT</span> flv.LOOKUP_CODE</span><br><span class="line">                        <span class="keyword">FROM</span> fnd_lookup_values flv</span><br><span class="line">                       <span class="keyword">WHERE</span> <span class="number">1</span> <span class="operator">=</span> <span class="number">1</span></span><br><span class="line">                         <span class="keyword">AND</span> flv.LOOKUP_TYPE <span class="operator">=</span> <span class="string">&#x27;GJ_INTER_MD_VCHRTYPE&#x27;</span></span><br><span class="line">                         <span class="keyword">AND</span> flv.LANGUAGE <span class="operator">=</span> <span class="string">&#x27;ZHS&#x27;</span></span><br><span class="line">                         <span class="keyword">AND</span> flv.ENABLED_FLAG <span class="operator">=</span> <span class="string">&#x27;Y&#x27;</span></span><br><span class="line">                         <span class="keyword">AND</span> NVL(flv.END_DATE_ACTIVE, SYSDATE) <span class="operator">&gt;=</span> SYSDATE</span><br><span class="line">                         <span class="keyword">AND</span> flv.MEANING <span class="operator">=</span> <span class="string">&#x27;应付发票&#x27;</span>) VCHRTYPECODE,</span><br><span class="line">                     nvl(to_char(aia.VOUCHER_NUM),</span><br><span class="line">                         GJ_CONGL_UTIL.get_virtual_voucher) VCHRNUM,</span><br><span class="line">                     to_char(aia.GL_DATE, <span class="string">&#x27;yyyy-mm-dd hh24:mi:ss&#x27;</span>) CREATETIME,</span><br><span class="line">                     to_char(aia.GL_DATE, <span class="string">&#x27;yyyy-mm-dd hh24:mi:ss&#x27;</span>) CREATEDATE,</span><br><span class="line">                     to_char(aia.GL_DATE, <span class="string">&#x27;yyyy-mm-dd hh24:mi:ss&#x27;</span>) POSTDATE,</span><br><span class="line">                     <span class="string">&#x27;0&#x27;</span> ADJPERIODFLAG,</span><br><span class="line">                     <span class="string">&#x27;S&#x27;</span> <span class="operator">||</span> pv.segment1 MD_SUPPLIER,</span><br><span class="line">                     (<span class="keyword">SELECT</span> aid.attribute1</span><br><span class="line">                        <span class="keyword">FROM</span> ap_invoice_distributions_all aid</span><br><span class="line">                       <span class="keyword">WHERE</span> <span class="number">1</span> <span class="operator">=</span> <span class="number">1</span></span><br><span class="line">                         <span class="keyword">AND</span> aid.INVOICE_ID <span class="operator">=</span> aia.invoice_id</span><br><span class="line">                         <span class="keyword">AND</span> rownum <span class="operator">=</span> <span class="number">1</span>) MD_CFITEM</span><br><span class="line">                <span class="keyword">FROM</span> ap_invoices_all aia, po_vendors pv</span><br><span class="line">               <span class="keyword">WHERE</span> <span class="number">1</span> <span class="operator">=</span> <span class="number">1</span></span><br><span class="line">                 <span class="keyword">AND</span> pv.vendor_id <span class="operator">=</span> aia.vendor_id) infvhr,</span><br><span class="line">             hr_operating_units hou,</span><br><span class="line">             xle_entity_profiles xep,</span><br><span class="line">             fnd_user fu</span><br><span class="line">       <span class="keyword">WHERE</span> <span class="number">1</span> <span class="operator">=</span> <span class="number">1</span></span><br><span class="line">         <span class="keyword">AND</span> xep.LEGAL_ENTITY_ID <span class="operator">=</span> hou.default_legal_context_id</span><br><span class="line">         <span class="keyword">AND</span> hou.organization_id <span class="operator">=</span> infvhr.org_id</span><br><span class="line">         <span class="keyword">AND</span> fu.user_id <span class="operator">=</span> infvhr.created_by</span><br><span class="line">         <span class="keyword">AND</span> <span class="keyword">EXISTS</span> (<span class="keyword">SELECT</span> <span class="number">1</span></span><br><span class="line">                <span class="keyword">FROM</span> INF_GL_VOUCHERITEMASS igv</span><br><span class="line">               <span class="keyword">WHERE</span> <span class="number">1</span> <span class="operator">=</span> <span class="number">1</span></span><br><span class="line">                 <span class="keyword">AND</span> igv.vchrtypecode <span class="operator">=</span> infvhr.vchrtypecode</span><br><span class="line">                 <span class="keyword">AND</span> igv.vchrtypecode <span class="operator">=</span> <span class="string">&#x27;2&#x27;</span></span><br><span class="line">                 <span class="keyword">AND</span> igv.vchrid <span class="operator">=</span> infvhr.id);</span><br><span class="line">  <span class="keyword">BEGIN</span></span><br><span class="line">    <span class="comment">-- 日志开始</span></span><br><span class="line">    g_log_msg :<span class="operator">=</span> to_char(SYSDATE, <span class="string">&#x27;yyyy-mm-dd hh24:mi:ss&#x27;</span>) <span class="operator">||</span> <span class="string">&#x27; &#x27;</span> <span class="operator">||</span></span><br><span class="line">                 l_api_name <span class="operator">||</span> <span class="string">&#x27; 程序开始&#x27;</span>;</span><br><span class="line">    <span class="built_in">log</span>(g_log_msg);</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">OPEN</span> cur_invoice_headers;</span><br><span class="line">    LOOP</span><br><span class="line">      <span class="keyword">FETCH</span> cur_invoice_headers BULK <span class="keyword">COLLECT</span></span><br><span class="line">        <span class="keyword">INTO</span> l_rec_header_list LIMIT <span class="number">1000</span>;</span><br><span class="line">  </span><br><span class="line">      FORALL i <span class="keyword">IN</span> l_rec_header_list.first .. l_rec_header_list.last</span><br><span class="line">        <span class="keyword">INSERT</span> <span class="keyword">INTO</span> INF_GL_VOUCHER <span class="keyword">VALUES</span> l_rec_header_list (i);</span><br><span class="line">  </span><br><span class="line">      <span class="comment">-- 每1000条提交一次</span></span><br><span class="line">      <span class="keyword">COMMIT</span>;</span><br><span class="line">  </span><br><span class="line">      EXIT <span class="keyword">WHEN</span> cur_invoice_headers<span class="operator">%</span>NOTFOUND;</span><br><span class="line">    <span class="keyword">END</span> LOOP;</span><br><span class="line">    <span class="keyword">CLOSE</span> cur_invoice_headers;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">-- 日志结束</span></span><br><span class="line">    g_log_msg :<span class="operator">=</span> to_char(SYSDATE, <span class="string">&#x27;yyyy-mm-dd hh24:mi:ss&#x27;</span>) <span class="operator">||</span> <span class="string">&#x27; &#x27;</span> <span class="operator">||</span></span><br><span class="line">                 l_api_name <span class="operator">||</span> <span class="string">&#x27; 程序开始&#x27;</span>;</span><br><span class="line">    <span class="built_in">log</span>(g_log_msg);</span><br><span class="line">  </span><br><span class="line">  EXCEPTION</span><br><span class="line">    <span class="keyword">WHEN</span> OTHERS <span class="keyword">THEN</span></span><br><span class="line">      x_return_status :<span class="operator">=</span> g_error;</span><br><span class="line">      x_msg_data      :<span class="operator">=</span> l_api_name <span class="operator">||</span> <span class="string">&#x27;-&gt;&#x27;</span> <span class="operator">||</span> SQLERRM <span class="operator">||</span></span><br><span class="line">                         dbms_utility.format_error_backtrace;</span><br><span class="line">      <span class="built_in">log</span>(x_msg_data);</span><br><span class="line">  <span class="keyword">END</span> sp_ap_invoice_headers;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * @Author  : KALOSORA</span></span><br><span class="line"><span class="comment">  * @Purpose : 根据已经同步的会计分录行，匹配应付付款头数据</span></span><br><span class="line"><span class="comment">  *</span></span><br><span class="line"><span class="comment">  * @Param   ：x_return_status 返回的参数状态</span></span><br><span class="line"><span class="comment">  * @Param   ：x_return_status 返回的消息</span></span><br><span class="line"><span class="comment">  * @Version : 1.0</span></span><br><span class="line"><span class="comment">  * @Since   : 2021/1/19 9:12:35</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="keyword">PROCEDURE</span> sp_ap_payment_headers(x_return_status <span class="keyword">OUT</span> NOCOPY VARCHAR2,</span><br><span class="line">                                  x_msg_count     <span class="keyword">OUT</span> NOCOPY NUMBER,</span><br><span class="line">                                  x_msg_data      <span class="keyword">OUT</span> NOCOPY VARCHAR2) <span class="keyword">IS</span></span><br><span class="line">    l_api_name CONSTANT VARCHAR2(<span class="number">100</span>) :<span class="operator">=</span> <span class="string">&#x27;sp_ap_payment_headers&#x27;</span>;</span><br><span class="line">  </span><br><span class="line">    TYPE l_rec_header <span class="keyword">IS</span> <span class="keyword">TABLE</span> <span class="keyword">OF</span> INF_GL_VOUCHER<span class="operator">%</span>ROWTYPE;</span><br><span class="line">    l_rec_header_list l_rec_header;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">CURSOR</span> cur_payment_headers <span class="keyword">IS</span></span><br><span class="line">      <span class="keyword">SELECT</span> infvhr.id,</span><br><span class="line">             <span class="string">&#x27;GJ_CN_01&#x27;</span> BOOKCODE,</span><br><span class="line">             xep.LEGAL_ENTITY_IDENTIFIER UNITCODE,</span><br><span class="line">             infvhr.ACCTYEAR,</span><br><span class="line">             infvhr.ACCTPERIOD,</span><br><span class="line">             infvhr.VCHRTYPECODE,</span><br><span class="line">             infvhr.VCHRNUM,</span><br><span class="line">             fu.USER_NAME CREATOR,</span><br><span class="line">             infvhr.CREATETIME,</span><br><span class="line">             infvhr.CREATEDATE,</span><br><span class="line">             infvhr.POSTDATE,</span><br><span class="line">             <span class="keyword">NULL</span> POSTOR,</span><br><span class="line">             <span class="keyword">NULL</span> CASHIER,</span><br><span class="line">             <span class="keyword">NULL</span> CASHDATE,</span><br><span class="line">             <span class="keyword">NULL</span> ATTACHMENT,</span><br><span class="line">             infvhr.ADJPERIODFLAG,</span><br><span class="line">             <span class="string">&#x27;0&#x27;</span> TEMPFLAG,</span><br><span class="line">             <span class="string">&#x27;0&#x27;</span> OFFSETSTATE,</span><br><span class="line">             <span class="keyword">NULL</span> OFFSETID,</span><br><span class="line">             <span class="string">&#x27;0&#x27;</span> BLUEOFFSETSTATE,</span><br><span class="line">             <span class="keyword">NULL</span> BLUEOFFSETID,</span><br><span class="line">             infvhr.MD_SUPPLIER def_01,</span><br><span class="line">             infvhr.MD_CFITEM def_02,</span><br><span class="line">             <span class="keyword">NULL</span> def_03,</span><br><span class="line">             <span class="keyword">NULL</span> def_04,</span><br><span class="line">             <span class="keyword">NULL</span> def_05,</span><br><span class="line">             <span class="keyword">NULL</span> def_06,</span><br><span class="line">             <span class="keyword">NULL</span> def_07,</span><br><span class="line">             <span class="keyword">NULL</span> def_08,</span><br><span class="line">             <span class="keyword">NULL</span> def_09,</span><br><span class="line">             to_char(SYSDATE, <span class="string">&#x27;yyyy-mm-dd hh24:mi:ss&#x27;</span>) update_time</span><br><span class="line">        <span class="keyword">FROM</span> (<span class="keyword">SELECT</span> ora_hash(<span class="string">&#x27;AP_PAYMENTS&#x27;</span>) <span class="operator">||</span> aca.check_id ID,</span><br><span class="line">                     aca.org_id,</span><br><span class="line">                     aca.check_id,</span><br><span class="line">                     aca.CREATED_BY,</span><br><span class="line">                     to_number(to_char(aca.CHECK_DATE, <span class="string">&#x27;yyyy&#x27;</span>)) ACCTYEAR,</span><br><span class="line">                     to_char(aca.CHECK_DATE, <span class="string">&#x27;mm&#x27;</span>) ACCTPERIOD,</span><br><span class="line">                     (<span class="keyword">SELECT</span> flv.LOOKUP_CODE</span><br><span class="line">                        <span class="keyword">FROM</span> fnd_lookup_values flv</span><br><span class="line">                       <span class="keyword">WHERE</span> <span class="number">1</span> <span class="operator">=</span> <span class="number">1</span></span><br><span class="line">                         <span class="keyword">AND</span> flv.LOOKUP_TYPE <span class="operator">=</span> <span class="string">&#x27;GJ_INTER_MD_VCHRTYPE&#x27;</span></span><br><span class="line">                         <span class="keyword">AND</span> flv.LANGUAGE <span class="operator">=</span> <span class="string">&#x27;ZHS&#x27;</span></span><br><span class="line">                         <span class="keyword">AND</span> flv.ENABLED_FLAG <span class="operator">=</span> <span class="string">&#x27;Y&#x27;</span></span><br><span class="line">                         <span class="keyword">AND</span> NVL(flv.END_DATE_ACTIVE, SYSDATE) <span class="operator">&gt;=</span> SYSDATE</span><br><span class="line">                         <span class="keyword">AND</span> flv.MEANING <span class="operator">=</span> <span class="string">&#x27;应付付款&#x27;</span>) VCHRTYPECODE,</span><br><span class="line">                     nvl(to_char(aca.DOC_SEQUENCE_VALUE),</span><br><span class="line">                         GJ_CONGL_UTIL.get_virtual_voucher) VCHRNUM,</span><br><span class="line">                     to_char(aca.CHECK_DATE, <span class="string">&#x27;yyyy-mm-dd hh24:mi:ss&#x27;</span>) CREATETIME,</span><br><span class="line">                     to_char(aca.CHECK_DATE, <span class="string">&#x27;yyyy-mm-dd hh24:mi:ss&#x27;</span>) CREATEDATE,</span><br><span class="line">                     to_char(aca.CHECK_DATE, <span class="string">&#x27;yyyy-mm-dd hh24:mi:ss&#x27;</span>) POSTDATE,</span><br><span class="line">                     <span class="string">&#x27;0&#x27;</span> ADJPERIODFLAG,</span><br><span class="line">                     <span class="string">&#x27;S&#x27;</span> <span class="operator">||</span> pv.segment1 MD_SUPPLIER,</span><br><span class="line">                     aca.attribute4 MD_CFITEM</span><br><span class="line">                <span class="keyword">FROM</span> ap_checks_all aca， po_vendors pv</span><br><span class="line">               <span class="keyword">WHERE</span> <span class="number">1</span> <span class="operator">=</span> <span class="number">1</span></span><br><span class="line">                 <span class="keyword">AND</span> pv.VENDOR_ID <span class="operator">=</span> aca.vendor_id) infvhr,</span><br><span class="line">             hr_operating_units hou,</span><br><span class="line">             xle_entity_profiles xep,</span><br><span class="line">             fnd_user fu</span><br><span class="line">       <span class="keyword">WHERE</span> <span class="number">1</span> <span class="operator">=</span> <span class="number">1</span></span><br><span class="line">         <span class="keyword">AND</span> xep.LEGAL_ENTITY_ID <span class="operator">=</span> hou.default_legal_context_id</span><br><span class="line">         <span class="keyword">AND</span> hou.organization_id <span class="operator">=</span> infvhr.org_id</span><br><span class="line">         <span class="keyword">AND</span> fu.user_id <span class="operator">=</span> infvhr.created_by</span><br><span class="line">         <span class="keyword">AND</span> <span class="keyword">EXISTS</span> (<span class="keyword">SELECT</span> <span class="number">1</span></span><br><span class="line">                <span class="keyword">FROM</span> INF_GL_VOUCHERITEMASS igv</span><br><span class="line">               <span class="keyword">WHERE</span> <span class="number">1</span> <span class="operator">=</span> <span class="number">1</span></span><br><span class="line">                 <span class="keyword">AND</span> igv.vchrtypecode <span class="operator">=</span> infvhr.vchrtypecode</span><br><span class="line">                 <span class="keyword">AND</span> igv.vchrtypecode <span class="operator">=</span> <span class="string">&#x27;3&#x27;</span></span><br><span class="line">                 <span class="keyword">AND</span> igv.vchrid <span class="operator">=</span> infvhr.id);</span><br><span class="line">  <span class="keyword">BEGIN</span></span><br><span class="line">  </span><br><span class="line">    <span class="comment">-- 日志开始</span></span><br><span class="line">    g_log_msg :<span class="operator">=</span> to_char(SYSDATE, <span class="string">&#x27;yyyy-mm-dd hh24:mi:ss&#x27;</span>) <span class="operator">||</span> <span class="string">&#x27; &#x27;</span> <span class="operator">||</span></span><br><span class="line">                 l_api_name <span class="operator">||</span> <span class="string">&#x27; 程序开始&#x27;</span>;</span><br><span class="line">    <span class="built_in">log</span>(g_log_msg);</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">OPEN</span> cur_payment_headers;</span><br><span class="line">    LOOP</span><br><span class="line">      <span class="keyword">FETCH</span> cur_payment_headers BULK <span class="keyword">COLLECT</span></span><br><span class="line">        <span class="keyword">INTO</span> l_rec_header_list LIMIT <span class="number">1000</span>;</span><br><span class="line">  </span><br><span class="line">      FORALL i <span class="keyword">IN</span> l_rec_header_list.first .. l_rec_header_list.last</span><br><span class="line">        <span class="keyword">INSERT</span> <span class="keyword">INTO</span> INF_GL_VOUCHER <span class="keyword">VALUES</span> l_rec_header_list (i);</span><br><span class="line">  </span><br><span class="line">      <span class="comment">-- 每1000条提交一次</span></span><br><span class="line">      <span class="keyword">COMMIT</span>;</span><br><span class="line">  </span><br><span class="line">      EXIT <span class="keyword">WHEN</span> cur_payment_headers<span class="operator">%</span>NOTFOUND;</span><br><span class="line">    <span class="keyword">END</span> LOOP;</span><br><span class="line">    <span class="keyword">CLOSE</span> cur_payment_headers;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">-- 日志结束</span></span><br><span class="line">    g_log_msg :<span class="operator">=</span> to_char(SYSDATE, <span class="string">&#x27;yyyy-mm-dd hh24:mi:ss&#x27;</span>) <span class="operator">||</span> <span class="string">&#x27; &#x27;</span> <span class="operator">||</span></span><br><span class="line">                 l_api_name <span class="operator">||</span> <span class="string">&#x27; 程序开始&#x27;</span>;</span><br><span class="line">    <span class="built_in">log</span>(g_log_msg);</span><br><span class="line">  EXCEPTION</span><br><span class="line">    <span class="keyword">WHEN</span> OTHERS <span class="keyword">THEN</span></span><br><span class="line">      x_return_status :<span class="operator">=</span> g_error;</span><br><span class="line">      x_msg_data      :<span class="operator">=</span> l_api_name <span class="operator">||</span> <span class="string">&#x27;-&gt;&#x27;</span> <span class="operator">||</span> SQLERRM <span class="operator">||</span></span><br><span class="line">                         dbms_utility.format_error_backtrace;</span><br><span class="line">      <span class="built_in">log</span>(x_msg_data);</span><br><span class="line">  <span class="keyword">END</span> sp_ap_payment_headers;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * @Author  : KALOSORA</span></span><br><span class="line"><span class="comment">  * @Purpose : 根据已经同步的会计分录行，匹配应收发票头数据</span></span><br><span class="line"><span class="comment">  *</span></span><br><span class="line"><span class="comment">  * @Param   ：x_return_status 返回的参数状态</span></span><br><span class="line"><span class="comment">  * @Param   ：x_return_status 返回的消息</span></span><br><span class="line"><span class="comment">  * @Version : 1.0</span></span><br><span class="line"><span class="comment">  * @Since   : 2021/1/19 9:12:35</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="keyword">PROCEDURE</span> sp_ar_invoice_headers(x_return_status <span class="keyword">OUT</span> NOCOPY VARCHAR2,</span><br><span class="line">                                  x_msg_count     <span class="keyword">OUT</span> NOCOPY NUMBER,</span><br><span class="line">                                  x_msg_data      <span class="keyword">OUT</span> NOCOPY VARCHAR2) <span class="keyword">IS</span></span><br><span class="line">    l_api_name CONSTANT VARCHAR2(<span class="number">100</span>) :<span class="operator">=</span> <span class="string">&#x27;sp_ar_invoice_headers&#x27;</span>;</span><br><span class="line">  </span><br><span class="line">    TYPE l_rec_header <span class="keyword">IS</span> <span class="keyword">TABLE</span> <span class="keyword">OF</span> INF_GL_VOUCHER<span class="operator">%</span>ROWTYPE;</span><br><span class="line">    l_rec_header_list l_rec_header;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">CURSOR</span> cur_transaction_headers <span class="keyword">IS</span></span><br><span class="line">      <span class="keyword">SELECT</span> infvhr.id,</span><br><span class="line">             <span class="string">&#x27;GJ_CN_01&#x27;</span> BOOKCODE,</span><br><span class="line">             xep.LEGAL_ENTITY_IDENTIFIER UNITCODE,</span><br><span class="line">             infvhr.ACCTYEAR,</span><br><span class="line">             infvhr.ACCTPERIOD,</span><br><span class="line">             infvhr.VCHRTYPECODE,</span><br><span class="line">             infvhr.VCHRNUM,</span><br><span class="line">             fu.USER_NAME CREATOR,</span><br><span class="line">             infvhr.CREATETIME,</span><br><span class="line">             infvhr.CREATEDATE,</span><br><span class="line">             infvhr.POSTDATE,</span><br><span class="line">             <span class="keyword">NULL</span> POSTOR,</span><br><span class="line">             <span class="keyword">NULL</span> CASHIER,</span><br><span class="line">             <span class="keyword">NULL</span> CASHDATE,</span><br><span class="line">             <span class="keyword">NULL</span> ATTACHMENT,</span><br><span class="line">             infvhr.ADJPERIODFLAG,</span><br><span class="line">             <span class="string">&#x27;0&#x27;</span> TEMPFLAG,</span><br><span class="line">             <span class="string">&#x27;0&#x27;</span> OFFSETSTATE,</span><br><span class="line">             <span class="keyword">NULL</span> OFFSETID,</span><br><span class="line">             <span class="string">&#x27;0&#x27;</span> BLUEOFFSETSTATE,</span><br><span class="line">             <span class="keyword">NULL</span> BLUEOFFSETID,</span><br><span class="line">             infvhr.MD_CUSTOMER def_01,</span><br><span class="line">             infvhr.MD_CFITEM def_02,</span><br><span class="line">             <span class="keyword">NULL</span> def_03,</span><br><span class="line">             <span class="keyword">NULL</span> def_04,</span><br><span class="line">             <span class="keyword">NULL</span> def_05,</span><br><span class="line">             <span class="keyword">NULL</span> def_06,</span><br><span class="line">             <span class="keyword">NULL</span> def_07,</span><br><span class="line">             <span class="keyword">NULL</span> def_08,</span><br><span class="line">             <span class="keyword">NULL</span> def_09,</span><br><span class="line">             to_char(SYSDATE, <span class="string">&#x27;yyyy-mm-dd hh24:mi:ss&#x27;</span>) update_time</span><br><span class="line">        <span class="keyword">FROM</span> (<span class="keyword">SELECT</span> ora_hash(<span class="string">&#x27;TRANSACTIONS&#x27;</span>) <span class="operator">||</span> rct.CUSTOMER_TRX_ID id,</span><br><span class="line">                     rct.ORG_ID,</span><br><span class="line">                     rct.CUSTOMER_TRX_ID CUSTOMER_TRX_ID,</span><br><span class="line">                     rct.CREATED_BY,</span><br><span class="line">                     to_number(to_char((<span class="keyword">SELECT</span> rctlgd.GL_DATE</span><br><span class="line">                                         <span class="keyword">FROM</span> ra_cust_trx_line_gl_dist_all rctlgd</span><br><span class="line">                                        <span class="keyword">WHERE</span> <span class="number">1</span> <span class="operator">=</span> <span class="number">1</span></span><br><span class="line">                                          <span class="keyword">AND</span> rctlgd.CUSTOMER_TRX_ID <span class="operator">=</span></span><br><span class="line">                                              rct.CUSTOMER_TRX_ID</span><br><span class="line">                                          <span class="keyword">AND</span> rctlgd.gl_date <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span></span><br><span class="line">                                          <span class="keyword">AND</span> rownum <span class="operator">=</span> <span class="number">1</span>),</span><br><span class="line">                                       <span class="string">&#x27;yyyy&#x27;</span>)) ACCTYEAR,</span><br><span class="line">                     to_char((<span class="keyword">SELECT</span> rctlgd.GL_DATE</span><br><span class="line">                               <span class="keyword">FROM</span> ra_cust_trx_line_gl_dist_all rctlgd</span><br><span class="line">                              <span class="keyword">WHERE</span> <span class="number">1</span> <span class="operator">=</span> <span class="number">1</span></span><br><span class="line">                                <span class="keyword">AND</span> rctlgd.CUSTOMER_TRX_ID <span class="operator">=</span></span><br><span class="line">                                    rct.CUSTOMER_TRX_ID</span><br><span class="line">                                <span class="keyword">AND</span> rctlgd.gl_date <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span></span><br><span class="line">                                <span class="keyword">AND</span> rownum <span class="operator">=</span> <span class="number">1</span>),</span><br><span class="line">                             <span class="string">&#x27;mm&#x27;</span>) ACCTPERIOD,</span><br><span class="line">                     (<span class="keyword">SELECT</span> flv.LOOKUP_CODE</span><br><span class="line">                        <span class="keyword">FROM</span> fnd_lookup_values flv</span><br><span class="line">                       <span class="keyword">WHERE</span> <span class="number">1</span> <span class="operator">=</span> <span class="number">1</span></span><br><span class="line">                         <span class="keyword">AND</span> flv.LOOKUP_TYPE <span class="operator">=</span> <span class="string">&#x27;GJ_INTER_MD_VCHRTYPE&#x27;</span></span><br><span class="line">                         <span class="keyword">AND</span> flv.LANGUAGE <span class="operator">=</span> <span class="string">&#x27;ZHS&#x27;</span></span><br><span class="line">                         <span class="keyword">AND</span> flv.ENABLED_FLAG <span class="operator">=</span> <span class="string">&#x27;Y&#x27;</span></span><br><span class="line">                         <span class="keyword">AND</span> NVL(flv.END_DATE_ACTIVE, SYSDATE) <span class="operator">&gt;=</span> SYSDATE</span><br><span class="line">                         <span class="keyword">AND</span> flv.MEANING <span class="operator">=</span> <span class="string">&#x27;应收发票&#x27;</span>) VCHRTYPECODE,</span><br><span class="line">                     nvl(to_char(rct.DOC_SEQUENCE_VALUE),</span><br><span class="line">                         GJ_CONGL_UTIL.get_virtual_voucher) VCHRNUM,</span><br><span class="line">                     to_char((<span class="keyword">SELECT</span> rctlgd.GL_DATE</span><br><span class="line">                               <span class="keyword">FROM</span> ra_cust_trx_line_gl_dist_all rctlgd</span><br><span class="line">                              <span class="keyword">WHERE</span> <span class="number">1</span> <span class="operator">=</span> <span class="number">1</span></span><br><span class="line">                                <span class="keyword">AND</span> rctlgd.CUSTOMER_TRX_ID <span class="operator">=</span></span><br><span class="line">                                    rct.CUSTOMER_TRX_ID</span><br><span class="line">                                <span class="keyword">AND</span> rctlgd.GL_DATE <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span></span><br><span class="line">                                <span class="keyword">AND</span> rownum <span class="operator">=</span> <span class="number">1</span>),</span><br><span class="line">                             <span class="string">&#x27;yyyy-mm-dd hh24:mi:ss&#x27;</span>) CREATETIME,</span><br><span class="line">                     to_char((<span class="keyword">SELECT</span> rctlgd.GL_DATE</span><br><span class="line">                               <span class="keyword">FROM</span> ra_cust_trx_line_gl_dist_all rctlgd</span><br><span class="line">                              <span class="keyword">WHERE</span> <span class="number">1</span> <span class="operator">=</span> <span class="number">1</span></span><br><span class="line">                                <span class="keyword">AND</span> rctlgd.CUSTOMER_TRX_ID <span class="operator">=</span></span><br><span class="line">                                    rct.CUSTOMER_TRX_ID</span><br><span class="line">                                <span class="keyword">AND</span> rctlgd.GL_DATE <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span></span><br><span class="line">                                <span class="keyword">AND</span> rownum <span class="operator">=</span> <span class="number">1</span>),</span><br><span class="line">                             <span class="string">&#x27;yyyy-mm-dd hh24:mi:ss&#x27;</span>) CREATEDATE,</span><br><span class="line">                     to_char((<span class="keyword">SELECT</span> rctlgd.GL_DATE</span><br><span class="line">                               <span class="keyword">FROM</span> ra_cust_trx_line_gl_dist_all rctlgd</span><br><span class="line">                              <span class="keyword">WHERE</span> <span class="number">1</span> <span class="operator">=</span> <span class="number">1</span></span><br><span class="line">                                <span class="keyword">AND</span> rctlgd.CUSTOMER_TRX_ID <span class="operator">=</span></span><br><span class="line">                                    rct.CUSTOMER_TRX_ID</span><br><span class="line">                                <span class="keyword">AND</span> rctlgd.GL_DATE <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span></span><br><span class="line">                                <span class="keyword">AND</span> rownum <span class="operator">=</span> <span class="number">1</span>),</span><br><span class="line">                             <span class="string">&#x27;yyyy-mm-dd hh24:mi:ss&#x27;</span>) POSTDATE,</span><br><span class="line">                     <span class="string">&#x27;0&#x27;</span> ADJPERIODFLAG,</span><br><span class="line">                     <span class="string">&#x27;C&#x27;</span> <span class="operator">||</span> hca.ACCOUNT_NUMBER MD_CUSTOMER,</span><br><span class="line">                     <span class="keyword">NULL</span> MD_CFITEM</span><br><span class="line">                <span class="keyword">FROM</span> ra_customer_trx_all rct,</span><br><span class="line">                     hz_cust_accounts    hca,</span><br><span class="line">                     hz_parties          hp</span><br><span class="line">               <span class="keyword">WHERE</span> <span class="number">1</span> <span class="operator">=</span> <span class="number">1</span></span><br><span class="line">                 <span class="keyword">AND</span> hca.cust_account_id <span class="operator">=</span> rct.BILL_TO_CUSTOMER_ID</span><br><span class="line">                 <span class="keyword">AND</span> hca.PARTY_ID <span class="operator">=</span> hp.PARTY_ID) infvhr,</span><br><span class="line">             hr_operating_units hou,</span><br><span class="line">             xle_entity_profiles xep,</span><br><span class="line">             fnd_user fu</span><br><span class="line">       <span class="keyword">WHERE</span> <span class="number">1</span> <span class="operator">=</span> <span class="number">1</span></span><br><span class="line">         <span class="keyword">AND</span> xep.LEGAL_ENTITY_ID <span class="operator">=</span> hou.default_legal_context_id</span><br><span class="line">         <span class="keyword">AND</span> hou.organization_id <span class="operator">=</span> infvhr.org_id</span><br><span class="line">         <span class="keyword">AND</span> fu.user_id <span class="operator">=</span> infvhr.created_by</span><br><span class="line">         <span class="keyword">AND</span> <span class="keyword">EXISTS</span> (<span class="keyword">SELECT</span> <span class="number">1</span></span><br><span class="line">                <span class="keyword">FROM</span> INF_GL_VOUCHERITEMASS igv</span><br><span class="line">               <span class="keyword">WHERE</span> <span class="number">1</span> <span class="operator">=</span> <span class="number">1</span></span><br><span class="line">                 <span class="keyword">AND</span> igv.vchrtypecode <span class="operator">=</span> infvhr.vchrtypecode</span><br><span class="line">                 <span class="keyword">AND</span> igv.vchrtypecode <span class="operator">=</span> <span class="string">&#x27;4&#x27;</span></span><br><span class="line">                 <span class="keyword">AND</span> igv.vchrid <span class="operator">=</span> infvhr.id);</span><br><span class="line">  <span class="keyword">BEGIN</span></span><br><span class="line">  </span><br><span class="line">    <span class="comment">-- 日志开始</span></span><br><span class="line">    g_log_msg :<span class="operator">=</span> to_char(SYSDATE, <span class="string">&#x27;yyyy-mm-dd hh24:mi:ss&#x27;</span>) <span class="operator">||</span> <span class="string">&#x27; &#x27;</span> <span class="operator">||</span></span><br><span class="line">                 l_api_name <span class="operator">||</span> <span class="string">&#x27; 程序开始&#x27;</span>;</span><br><span class="line">    <span class="built_in">log</span>(g_log_msg);</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">OPEN</span> cur_transaction_headers;</span><br><span class="line">    LOOP</span><br><span class="line">      <span class="keyword">FETCH</span> cur_transaction_headers BULK <span class="keyword">COLLECT</span></span><br><span class="line">        <span class="keyword">INTO</span> l_rec_header_list LIMIT <span class="number">1000</span>;</span><br><span class="line">  </span><br><span class="line">      FORALL i <span class="keyword">IN</span> l_rec_header_list.first .. l_rec_header_list.last</span><br><span class="line">        <span class="keyword">INSERT</span> <span class="keyword">INTO</span> INF_GL_VOUCHER <span class="keyword">VALUES</span> l_rec_header_list (i);</span><br><span class="line">  </span><br><span class="line">      <span class="comment">-- 每1000条提交一次</span></span><br><span class="line">      <span class="keyword">COMMIT</span>;</span><br><span class="line">  </span><br><span class="line">      EXIT <span class="keyword">WHEN</span> cur_transaction_headers<span class="operator">%</span>NOTFOUND;</span><br><span class="line">    <span class="keyword">END</span> LOOP;</span><br><span class="line">    <span class="keyword">CLOSE</span> cur_transaction_headers;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">-- 日志结束</span></span><br><span class="line">    g_log_msg :<span class="operator">=</span> to_char(SYSDATE, <span class="string">&#x27;yyyy-mm-dd hh24:mi:ss&#x27;</span>) <span class="operator">||</span> <span class="string">&#x27; &#x27;</span> <span class="operator">||</span></span><br><span class="line">                 l_api_name <span class="operator">||</span> <span class="string">&#x27; 程序开始&#x27;</span>;</span><br><span class="line">    <span class="built_in">log</span>(g_log_msg);</span><br><span class="line">  EXCEPTION</span><br><span class="line">    <span class="keyword">WHEN</span> OTHERS <span class="keyword">THEN</span></span><br><span class="line">      x_return_status :<span class="operator">=</span> g_error;</span><br><span class="line">      x_msg_data      :<span class="operator">=</span> l_api_name <span class="operator">||</span> <span class="string">&#x27;-&gt;&#x27;</span> <span class="operator">||</span> SQLERRM <span class="operator">||</span></span><br><span class="line">                         dbms_utility.format_error_backtrace;</span><br><span class="line">      <span class="built_in">log</span>(x_msg_data);</span><br><span class="line">  <span class="keyword">END</span> sp_ar_invoice_headers;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * @Author  : KALOSORA</span></span><br><span class="line"><span class="comment">  * @Purpose : 根据已经同步的会计分录行，匹配应收收款头数据</span></span><br><span class="line"><span class="comment">  *</span></span><br><span class="line"><span class="comment">  * @Param   ：x_return_status 返回的参数状态</span></span><br><span class="line"><span class="comment">  * @Param   ：x_return_status 返回的消息</span></span><br><span class="line"><span class="comment">  * @Version : 1.0</span></span><br><span class="line"><span class="comment">  * @Since   : 2021/1/19 9:12:35</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="keyword">PROCEDURE</span> sp_ar_receipt_headers(x_return_status <span class="keyword">OUT</span> NOCOPY VARCHAR2,</span><br><span class="line">                                  x_msg_count     <span class="keyword">OUT</span> NOCOPY NUMBER,</span><br><span class="line">                                  x_msg_data      <span class="keyword">OUT</span> NOCOPY VARCHAR2) <span class="keyword">IS</span></span><br><span class="line">    l_api_name CONSTANT VARCHAR2(<span class="number">100</span>) :<span class="operator">=</span> <span class="string">&#x27;sp_ar_receipt_headers&#x27;</span>;</span><br><span class="line">  </span><br><span class="line">    TYPE l_rec_header <span class="keyword">IS</span> <span class="keyword">TABLE</span> <span class="keyword">OF</span> INF_GL_VOUCHER<span class="operator">%</span>ROWTYPE;</span><br><span class="line">    l_rec_header_list l_rec_header;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">CURSOR</span> cur_receipt_headers <span class="keyword">IS</span></span><br><span class="line">      <span class="keyword">SELECT</span> infvhr.id,</span><br><span class="line">             <span class="string">&#x27;GJ_CN_01&#x27;</span> BOOKCODE,</span><br><span class="line">             xep.LEGAL_ENTITY_IDENTIFIER UNITCODE,</span><br><span class="line">             infvhr.ACCTYEAR,</span><br><span class="line">             infvhr.ACCTPERIOD,</span><br><span class="line">             infvhr.VCHRTYPECODE,</span><br><span class="line">             infvhr.VCHRNUM,</span><br><span class="line">             fu.USER_NAME CREATOR,</span><br><span class="line">             infvhr.CREATETIME,</span><br><span class="line">             infvhr.CREATEDATE,</span><br><span class="line">             infvhr.POSTDATE,</span><br><span class="line">             <span class="keyword">NULL</span> POSTOR,</span><br><span class="line">             <span class="keyword">NULL</span> CASHIER,</span><br><span class="line">             <span class="keyword">NULL</span> CASHDATE,</span><br><span class="line">             <span class="keyword">NULL</span> ATTACHMENT,</span><br><span class="line">             infvhr.ADJPERIODFLAG,</span><br><span class="line">             <span class="string">&#x27;0&#x27;</span> TEMPFLAG,</span><br><span class="line">             <span class="string">&#x27;0&#x27;</span> OFFSETSTATE,</span><br><span class="line">             <span class="keyword">NULL</span> OFFSETID,</span><br><span class="line">             <span class="string">&#x27;0&#x27;</span> BLUEOFFSETSTATE,</span><br><span class="line">             <span class="keyword">NULL</span> BLUEOFFSETID,</span><br><span class="line">             infvhr.MD_CUSTOMER def_01,</span><br><span class="line">             infvhr.MD_CFITEM def_02,</span><br><span class="line">             <span class="keyword">NULL</span> def_03,</span><br><span class="line">             <span class="keyword">NULL</span> def_04,</span><br><span class="line">             <span class="keyword">NULL</span> def_05,</span><br><span class="line">             <span class="keyword">NULL</span> def_06,</span><br><span class="line">             <span class="keyword">NULL</span> def_07,</span><br><span class="line">             <span class="keyword">NULL</span> def_08,</span><br><span class="line">             <span class="keyword">NULL</span> def_09,</span><br><span class="line">             to_char(SYSDATE, <span class="string">&#x27;yyyy-mm-dd hh24:mi:ss&#x27;</span>) update_time</span><br><span class="line">        <span class="keyword">FROM</span> (<span class="keyword">SELECT</span> ora_hash(<span class="string">&#x27;RECEIPTS&#x27;</span>) <span class="operator">||</span> acr.CASH_RECEIPT_ID id,</span><br><span class="line">                     acr.ORG_ID,</span><br><span class="line">                     acr.CASH_RECEIPT_ID,</span><br><span class="line">                     acr.CREATED_BY,</span><br><span class="line">                     to_number(to_char((<span class="keyword">SELECT</span> acrh.GL_DATE</span><br><span class="line">                                         <span class="keyword">FROM</span> AR_CASH_RECEIPT_HISTORY_ALL acrh</span><br><span class="line">                                        <span class="keyword">WHERE</span> acrh.CASH_RECEIPT_ID <span class="operator">=</span></span><br><span class="line">                                              acr.CASH_RECEIPT_ID</span><br><span class="line">                                          <span class="keyword">AND</span> acrh.org_id <span class="operator">=</span> acr.org_id</span><br><span class="line">                                          <span class="keyword">AND</span> acrh.FIRST_POSTED_RECORD_FLAG(<span class="operator">+</span>) <span class="operator">=</span> <span class="string">&#x27;Y&#x27;</span>),</span><br><span class="line">                                       <span class="string">&#x27;yyyy&#x27;</span>)) ACCTYEAR,</span><br><span class="line">                     to_char((<span class="keyword">SELECT</span> acrh.GL_DATE</span><br><span class="line">                               <span class="keyword">FROM</span> AR_CASH_RECEIPT_HISTORY_ALL acrh</span><br><span class="line">                              <span class="keyword">WHERE</span> acrh.CASH_RECEIPT_ID <span class="operator">=</span></span><br><span class="line">                                    acr.CASH_RECEIPT_ID</span><br><span class="line">                                <span class="keyword">AND</span> acrh.org_id <span class="operator">=</span> acr.org_id</span><br><span class="line">                                <span class="keyword">AND</span> acrh.FIRST_POSTED_RECORD_FLAG(<span class="operator">+</span>) <span class="operator">=</span> <span class="string">&#x27;Y&#x27;</span>),</span><br><span class="line">                             <span class="string">&#x27;mm&#x27;</span>) ACCTPERIOD,</span><br><span class="line">                     (<span class="keyword">SELECT</span> flv.LOOKUP_CODE</span><br><span class="line">                        <span class="keyword">FROM</span> fnd_lookup_values flv</span><br><span class="line">                       <span class="keyword">WHERE</span> <span class="number">1</span> <span class="operator">=</span> <span class="number">1</span></span><br><span class="line">                         <span class="keyword">AND</span> flv.LOOKUP_TYPE <span class="operator">=</span> <span class="string">&#x27;GJ_INTER_MD_VCHRTYPE&#x27;</span></span><br><span class="line">                         <span class="keyword">AND</span> flv.LANGUAGE <span class="operator">=</span> <span class="string">&#x27;ZHS&#x27;</span></span><br><span class="line">                         <span class="keyword">AND</span> flv.ENABLED_FLAG <span class="operator">=</span> <span class="string">&#x27;Y&#x27;</span></span><br><span class="line">                         <span class="keyword">AND</span> NVL(flv.END_DATE_ACTIVE, SYSDATE) <span class="operator">&gt;=</span> SYSDATE</span><br><span class="line">                         <span class="keyword">AND</span> flv.MEANING <span class="operator">=</span> <span class="string">&#x27;应收收款&#x27;</span>) VCHRTYPECODE,</span><br><span class="line">                     nvl(to_char(acr.DOC_SEQUENCE_VALUE),</span><br><span class="line">                         GJ_CONGL_UTIL.get_virtual_voucher) VCHRNUM,</span><br><span class="line">                     to_char((<span class="keyword">SELECT</span> acrh.GL_DATE</span><br><span class="line">                               <span class="keyword">FROM</span> AR_CASH_RECEIPT_HISTORY_ALL acrh</span><br><span class="line">                              <span class="keyword">WHERE</span> acrh.CASH_RECEIPT_ID <span class="operator">=</span></span><br><span class="line">                                    acr.CASH_RECEIPT_ID</span><br><span class="line">                                <span class="keyword">AND</span> acrh.org_id <span class="operator">=</span> acr.org_id</span><br><span class="line">                                <span class="keyword">AND</span> acrh.FIRST_POSTED_RECORD_FLAG(<span class="operator">+</span>) <span class="operator">=</span> <span class="string">&#x27;Y&#x27;</span>),</span><br><span class="line">                             <span class="string">&#x27;yyyy-mm-dd hh24:mi:ss&#x27;</span>) CREATETIME,</span><br><span class="line">                     to_char((<span class="keyword">SELECT</span> acrh.GL_DATE</span><br><span class="line">                               <span class="keyword">FROM</span> AR_CASH_RECEIPT_HISTORY_ALL acrh</span><br><span class="line">                              <span class="keyword">WHERE</span> acrh.CASH_RECEIPT_ID <span class="operator">=</span></span><br><span class="line">                                    acr.CASH_RECEIPT_ID</span><br><span class="line">                                <span class="keyword">AND</span> acrh.org_id <span class="operator">=</span> acr.org_id</span><br><span class="line">                                <span class="keyword">AND</span> acrh.FIRST_POSTED_RECORD_FLAG(<span class="operator">+</span>) <span class="operator">=</span> <span class="string">&#x27;Y&#x27;</span>),</span><br><span class="line">                             <span class="string">&#x27;yyyy-mm-dd hh24:mi:ss&#x27;</span>) CREATEDATE,</span><br><span class="line">                     to_char((<span class="keyword">SELECT</span> acrh.GL_DATE</span><br><span class="line">                               <span class="keyword">FROM</span> AR_CASH_RECEIPT_HISTORY_ALL acrh</span><br><span class="line">                              <span class="keyword">WHERE</span> acrh.CASH_RECEIPT_ID <span class="operator">=</span></span><br><span class="line">                                    acr.CASH_RECEIPT_ID</span><br><span class="line">                                <span class="keyword">AND</span> acrh.org_id <span class="operator">=</span> acr.org_id</span><br><span class="line">                                <span class="keyword">AND</span> acrh.FIRST_POSTED_RECORD_FLAG(<span class="operator">+</span>) <span class="operator">=</span> <span class="string">&#x27;Y&#x27;</span>),</span><br><span class="line">                             <span class="string">&#x27;yyyy-mm-dd hh24:mi:ss&#x27;</span>) POSTDATE,</span><br><span class="line">                     <span class="string">&#x27;0&#x27;</span> ADJPERIODFLAG,</span><br><span class="line">                     <span class="string">&#x27;C&#x27;</span> <span class="operator">||</span> hca.ACCOUNT_NUMBER MD_CUSTOMER,</span><br><span class="line">                     <span class="string">&#x27;1111&#x27;</span> MD_CFITEM</span><br><span class="line">                <span class="keyword">FROM</span> ar_cash_receipts_all acr,</span><br><span class="line">                     hz_cust_accounts     hca,</span><br><span class="line">                     hz_parties           hp</span><br><span class="line">               <span class="keyword">WHERE</span> <span class="number">1</span> <span class="operator">=</span> <span class="number">1</span></span><br><span class="line">                 <span class="keyword">AND</span> acr.PAY_FROM_CUSTOMER <span class="operator">=</span> hca.cust_account_id</span><br><span class="line">                 <span class="keyword">AND</span> hca.PARTY_ID <span class="operator">=</span> hp.PARTY_ID) infvhr,</span><br><span class="line">             hr_operating_units hou,</span><br><span class="line">             xle_entity_profiles xep,</span><br><span class="line">             fnd_user fu</span><br><span class="line">       <span class="keyword">WHERE</span> <span class="number">1</span> <span class="operator">=</span> <span class="number">1</span></span><br><span class="line">         <span class="keyword">AND</span> xep.LEGAL_ENTITY_ID <span class="operator">=</span> hou.default_legal_context_id</span><br><span class="line">         <span class="keyword">AND</span> hou.organization_id <span class="operator">=</span> infvhr.org_id</span><br><span class="line">         <span class="keyword">AND</span> fu.user_id <span class="operator">=</span> infvhr.created_by</span><br><span class="line">         <span class="keyword">AND</span> <span class="keyword">EXISTS</span> (<span class="keyword">SELECT</span> <span class="number">1</span></span><br><span class="line">                <span class="keyword">FROM</span> INF_GL_VOUCHERITEMASS igv</span><br><span class="line">               <span class="keyword">WHERE</span> <span class="number">1</span> <span class="operator">=</span> <span class="number">1</span></span><br><span class="line">                 <span class="keyword">AND</span> igv.vchrtypecode <span class="operator">=</span> infvhr.vchrtypecode</span><br><span class="line">                 <span class="keyword">AND</span> igv.vchrtypecode <span class="operator">=</span> <span class="string">&#x27;5&#x27;</span></span><br><span class="line">                 <span class="keyword">AND</span> igv.vchrid <span class="operator">=</span> infvhr.id);</span><br><span class="line">  <span class="keyword">BEGIN</span></span><br><span class="line">    <span class="comment">-- 日志开始</span></span><br><span class="line">    g_log_msg :<span class="operator">=</span> to_char(SYSDATE, <span class="string">&#x27;yyyy-mm-dd hh24:mi:ss&#x27;</span>) <span class="operator">||</span> <span class="string">&#x27; &#x27;</span> <span class="operator">||</span></span><br><span class="line">                 l_api_name <span class="operator">||</span> <span class="string">&#x27; 程序开始&#x27;</span>;</span><br><span class="line">    <span class="built_in">log</span>(g_log_msg);</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">OPEN</span> cur_receipt_headers;</span><br><span class="line">    LOOP</span><br><span class="line">      <span class="keyword">FETCH</span> cur_receipt_headers BULK <span class="keyword">COLLECT</span></span><br><span class="line">        <span class="keyword">INTO</span> l_rec_header_list LIMIT <span class="number">1000</span>;</span><br><span class="line">  </span><br><span class="line">      FORALL i <span class="keyword">IN</span> l_rec_header_list.first .. l_rec_header_list.last</span><br><span class="line">        <span class="keyword">INSERT</span> <span class="keyword">INTO</span> INF_GL_VOUCHER <span class="keyword">VALUES</span> l_rec_header_list (i);</span><br><span class="line">  </span><br><span class="line">      <span class="comment">-- 每1000条提交一次</span></span><br><span class="line">      <span class="keyword">COMMIT</span>;</span><br><span class="line">  </span><br><span class="line">      EXIT <span class="keyword">WHEN</span> cur_receipt_headers<span class="operator">%</span>NOTFOUND;</span><br><span class="line">    <span class="keyword">END</span> LOOP;</span><br><span class="line">    <span class="keyword">CLOSE</span> cur_receipt_headers;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">-- 日志结束</span></span><br><span class="line">    g_log_msg :<span class="operator">=</span> to_char(SYSDATE, <span class="string">&#x27;yyyy-mm-dd hh24:mi:ss&#x27;</span>) <span class="operator">||</span> <span class="string">&#x27; &#x27;</span> <span class="operator">||</span></span><br><span class="line">                 l_api_name <span class="operator">||</span> <span class="string">&#x27; 程序开始&#x27;</span>;</span><br><span class="line">    <span class="built_in">log</span>(g_log_msg);</span><br><span class="line">  EXCEPTION</span><br><span class="line">    <span class="keyword">WHEN</span> OTHERS <span class="keyword">THEN</span></span><br><span class="line">      x_return_status :<span class="operator">=</span> g_error;</span><br><span class="line">      x_msg_data      :<span class="operator">=</span> l_api_name <span class="operator">||</span> <span class="string">&#x27;-&gt;&#x27;</span> <span class="operator">||</span> SQLERRM <span class="operator">||</span></span><br><span class="line">                         dbms_utility.format_error_backtrace;</span><br><span class="line">      <span class="built_in">log</span>(x_msg_data);</span><br><span class="line">  <span class="keyword">END</span> sp_ar_receipt_headers;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * @Author  : KALOSORA</span></span><br><span class="line"><span class="comment">  * @Purpose : 整理本地数据集，刷新 PENDING 的字段</span></span><br><span class="line"><span class="comment">  *</span></span><br><span class="line"><span class="comment">  * @Param   ：x_return_status 返回的参数状态</span></span><br><span class="line"><span class="comment">  * @Param   ：x_return_status 返回的消息</span></span><br><span class="line"><span class="comment">  * @Version : 1.0</span></span><br><span class="line"><span class="comment">  * @Since   : 2021/1/19 9:12:35</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="keyword">PROCEDURE</span> update_local_data(x_return_status <span class="keyword">OUT</span> NOCOPY VARCHAR2,</span><br><span class="line">                              x_msg_count     <span class="keyword">OUT</span> NOCOPY NUMBER,</span><br><span class="line">                              x_msg_data      <span class="keyword">OUT</span> NOCOPY VARCHAR2) <span class="keyword">IS</span></span><br><span class="line">    l_api_name CONSTANT VARCHAR2(<span class="number">100</span>) :<span class="operator">=</span> <span class="string">&#x27;update_local_data&#x27;</span>;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">-- 批量更新的数据结构</span></span><br><span class="line">    TYPE record_update_type <span class="keyword">IS</span> RECORD(</span><br><span class="line">      id          inf_gl_voucheritemass.id<span class="operator">%</span>TYPE,</span><br><span class="line">      vchrid      inf_gl_voucheritemass.vchrid<span class="operator">%</span>TYPE,</span><br><span class="line">      unitcode    inf_gl_voucheritemass.unitcode<span class="operator">%</span>TYPE,</span><br><span class="line">      vchrnum     inf_gl_voucheritemass.vchrnum<span class="operator">%</span>TYPE,</span><br><span class="line">      MD_CUSTOMER inf_gl_voucheritemass.MD_CUSTOMER<span class="operator">%</span>TYPE,</span><br><span class="line">      MD_CFITEM   inf_gl_voucheritemass.MD_CFITEM<span class="operator">%</span>TYPE,</span><br><span class="line">      MD_INDUSTRY inf_gl_voucheritemass.md_industry<span class="operator">%</span>TYPE);</span><br><span class="line">    TYPE record_update_tbl <span class="keyword">IS</span> <span class="keyword">TABLE</span> <span class="keyword">OF</span> record_update_type;</span><br><span class="line">    record_update record_update_tbl;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">-- 应付数据集</span></span><br><span class="line">    <span class="keyword">CURSOR</span> cur_ap_data <span class="keyword">IS</span></span><br><span class="line">      <span class="keyword">SELECT</span> igvm.id,</span><br><span class="line">             igvm.vchrid,</span><br><span class="line">             igv.unitcode,</span><br><span class="line">             igv.vchrnum,</span><br><span class="line">             igv.def_01 MD_CUSTOMER,</span><br><span class="line">             igv.def_02 MD_CFITEM,</span><br><span class="line">             DECODE((<span class="keyword">SELECT</span> ffvs.FLEX_VALUE</span><br><span class="line">                      <span class="keyword">FROM</span> fnd_flex_values_vl ffvs, fnd_flex_value_sets ffv</span><br><span class="line">                     <span class="keyword">WHERE</span> <span class="number">1</span> <span class="operator">=</span> <span class="number">1</span></span><br><span class="line">                       <span class="keyword">AND</span> ffvs.FLEX_VALUE_SET_ID <span class="operator">=</span> ffv.FLEX_VALUE_SET_ID</span><br><span class="line">                       <span class="keyword">AND</span> ffv.FLEX_VALUE_SET_NAME <span class="operator">=</span></span><br><span class="line">                           <span class="string">&#x27;GJ_INTER_VIM_INDUSTRY&#x27;</span></span><br><span class="line">                       <span class="keyword">AND</span> ffvs.FLEX_VALUE <span class="operator">=</span> igvm.SUBJECTCODE</span><br><span class="line">                       <span class="keyword">AND</span> ffvs.ENABLED_FLAG <span class="operator">=</span> <span class="string">&#x27;Y&#x27;</span></span><br><span class="line">                       <span class="keyword">AND</span> nvl(ffvs.END_DATE_ACTIVE, SYSDATE) <span class="operator">&gt;=</span> SYSDATE),</span><br><span class="line">                    <span class="keyword">NULL</span>,</span><br><span class="line">                    <span class="keyword">NULL</span>,</span><br><span class="line">                    (<span class="keyword">SELECT</span> flv.DESCRIPTION</span><br><span class="line">                       <span class="keyword">FROM</span> fnd_lookup_values flv</span><br><span class="line">                      <span class="keyword">WHERE</span> <span class="number">1</span> <span class="operator">=</span> <span class="number">1</span></span><br><span class="line">                        <span class="keyword">AND</span> flv.LOOKUP_TYPE <span class="operator">=</span> <span class="string">&#x27;GJ_INTER_LEGAL_TYPE&#x27;</span></span><br><span class="line">                        <span class="keyword">AND</span> flv.LANGUAGE <span class="operator">=</span> <span class="string">&#x27;ZHS&#x27;</span></span><br><span class="line">                        <span class="keyword">AND</span> flv.ENABLED_FLAG <span class="operator">=</span> <span class="string">&#x27;Y&#x27;</span></span><br><span class="line">                        <span class="keyword">AND</span> nvl(flv.END_DATE_ACTIVE, SYSDATE) <span class="operator">&gt;=</span> SYSDATE</span><br><span class="line">                        <span class="keyword">AND</span> flv.LOOKUP_CODE <span class="operator">=</span> igv.unitcode)) MD_INDUSTRY</span><br><span class="line">        <span class="keyword">FROM</span> inf_gl_voucher igv, inf_gl_voucheritemass igvm</span><br><span class="line">       <span class="keyword">WHERE</span> <span class="number">1</span> <span class="operator">=</span> <span class="number">1</span></span><br><span class="line">         <span class="keyword">AND</span> igv.id <span class="operator">=</span> igvm.vchrid</span><br><span class="line">         <span class="keyword">AND</span> igv.vchrtypecode <span class="keyword">IN</span> (<span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;2&#x27;</span>)</span><br><span class="line">         <span class="keyword">AND</span> igvm.vchrnum <span class="operator">=</span> <span class="string">&#x27;PENDING&#x27;</span>;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">-- 应收数据集</span></span><br><span class="line">    <span class="keyword">CURSOR</span> cur_ar_data <span class="keyword">IS</span></span><br><span class="line">      <span class="keyword">SELECT</span> igvm.id,</span><br><span class="line">             igvm.vchrid,</span><br><span class="line">             igv.unitcode,</span><br><span class="line">             igv.vchrnum,</span><br><span class="line">             igv.def_01 MD_CUSTOMER,</span><br><span class="line">             igv.def_02 MD_CFITEM,</span><br><span class="line">             DECODE((<span class="keyword">SELECT</span> ffvs.FLEX_VALUE</span><br><span class="line">                      <span class="keyword">FROM</span> fnd_flex_values_vl ffvs, fnd_flex_value_sets ffv</span><br><span class="line">                     <span class="keyword">WHERE</span> <span class="number">1</span> <span class="operator">=</span> <span class="number">1</span></span><br><span class="line">                       <span class="keyword">AND</span> ffvs.FLEX_VALUE_SET_ID <span class="operator">=</span> ffv.FLEX_VALUE_SET_ID</span><br><span class="line">                       <span class="keyword">AND</span> ffv.FLEX_VALUE_SET_NAME <span class="operator">=</span></span><br><span class="line">                           <span class="string">&#x27;GJ_INTER_VIM_INDUSTRY&#x27;</span></span><br><span class="line">                       <span class="keyword">AND</span> ffvs.FLEX_VALUE <span class="operator">=</span> igvm.SUBJECTCODE</span><br><span class="line">                       <span class="keyword">AND</span> ffvs.ENABLED_FLAG <span class="operator">=</span> <span class="string">&#x27;Y&#x27;</span></span><br><span class="line">                       <span class="keyword">AND</span> nvl(ffvs.END_DATE_ACTIVE, SYSDATE) <span class="operator">&gt;=</span> SYSDATE),</span><br><span class="line">                    <span class="keyword">NULL</span>,</span><br><span class="line">                    <span class="keyword">NULL</span>,</span><br><span class="line">                    (<span class="keyword">SELECT</span> flv.DESCRIPTION</span><br><span class="line">                       <span class="keyword">FROM</span> fnd_lookup_values flv</span><br><span class="line">                      <span class="keyword">WHERE</span> <span class="number">1</span> <span class="operator">=</span> <span class="number">1</span></span><br><span class="line">                        <span class="keyword">AND</span> flv.LOOKUP_TYPE <span class="operator">=</span> <span class="string">&#x27;GJ_INTER_LEGAL_TYPE&#x27;</span></span><br><span class="line">                        <span class="keyword">AND</span> flv.LANGUAGE <span class="operator">=</span> <span class="string">&#x27;ZHS&#x27;</span></span><br><span class="line">                        <span class="keyword">AND</span> flv.ENABLED_FLAG <span class="operator">=</span> <span class="string">&#x27;Y&#x27;</span></span><br><span class="line">                        <span class="keyword">AND</span> nvl(flv.END_DATE_ACTIVE, SYSDATE) <span class="operator">&gt;=</span> SYSDATE</span><br><span class="line">                        <span class="keyword">AND</span> flv.LOOKUP_CODE <span class="operator">=</span> igv.unitcode)) MD_INDUSTRY</span><br><span class="line">        <span class="keyword">FROM</span> inf_gl_voucher igv, inf_gl_voucheritemass igvm</span><br><span class="line">       <span class="keyword">WHERE</span> <span class="number">1</span> <span class="operator">=</span> <span class="number">1</span></span><br><span class="line">         <span class="keyword">AND</span> igv.id <span class="operator">=</span> igvm.vchrid</span><br><span class="line">         <span class="keyword">AND</span> igv.vchrtypecode <span class="keyword">IN</span> (<span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;5&#x27;</span>)</span><br><span class="line">         <span class="keyword">AND</span> igvm.vchrnum <span class="operator">=</span> <span class="string">&#x27;PENDING&#x27;</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">BEGIN</span></span><br><span class="line">    <span class="comment">-- 日志开始</span></span><br><span class="line">    g_log_msg :<span class="operator">=</span> to_char(SYSDATE, <span class="string">&#x27;yyyy-mm-dd hh24:mi:ss&#x27;</span>) <span class="operator">||</span> <span class="string">&#x27; &#x27;</span> <span class="operator">||</span></span><br><span class="line">                 l_api_name <span class="operator">||</span> <span class="string">&#x27; 程序开始&#x27;</span>;</span><br><span class="line">    <span class="built_in">log</span>(g_log_msg);</span><br><span class="line">  </span><br><span class="line">    <span class="comment">-- 更新应付数据集</span></span><br><span class="line">    <span class="keyword">OPEN</span> cur_ap_data;</span><br><span class="line">    LOOP</span><br><span class="line">      <span class="keyword">FETCH</span> cur_ap_data BULK <span class="keyword">COLLECT</span></span><br><span class="line">        <span class="keyword">INTO</span> record_update LIMIT <span class="number">1000</span>;</span><br><span class="line">  </span><br><span class="line">      FORALL i <span class="keyword">IN</span> <span class="number">1</span> .. record_update.count</span><br><span class="line">        <span class="keyword">UPDATE</span> inf_gl_voucheritemass</span><br><span class="line">           <span class="keyword">SET</span> MD_CUSTOMER <span class="operator">=</span> <span class="keyword">NULL</span>,</span><br><span class="line">               MD_supplier <span class="operator">=</span> record_update(i).MD_CUSTOMER,</span><br><span class="line">               MD_CFITEM   <span class="operator">=</span> record_update(i).MD_CFITEM,</span><br><span class="line">               MD_INDUSTRY <span class="operator">=</span> record_update(i).MD_INDUSTRY,</span><br><span class="line">               unitcode    <span class="operator">=</span> record_update(i).unitcode,</span><br><span class="line">               vchrnum     <span class="operator">=</span> record_update(i).vchrnum</span><br><span class="line">         <span class="keyword">WHERE</span> <span class="number">1</span> <span class="operator">=</span> <span class="number">1</span></span><br><span class="line">           <span class="keyword">AND</span> id <span class="operator">=</span> record_update(i).id</span><br><span class="line">           <span class="keyword">AND</span> vchrid <span class="operator">=</span> record_update(i).vchrid;</span><br><span class="line">  </span><br><span class="line">      <span class="keyword">COMMIT</span>;</span><br><span class="line">  </span><br><span class="line">      EXIT <span class="keyword">WHEN</span> cur_ap_data<span class="operator">%</span>NOTFOUND;</span><br><span class="line">    <span class="keyword">END</span> LOOP;</span><br><span class="line">    <span class="keyword">CLOSE</span> cur_ap_data;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">-- 清空数据集</span></span><br><span class="line">    record_update.delete;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">-- 更新应收数据集</span></span><br><span class="line">    <span class="keyword">OPEN</span> cur_ar_data;</span><br><span class="line">    LOOP</span><br><span class="line">      <span class="keyword">FETCH</span> cur_ar_data BULK <span class="keyword">COLLECT</span></span><br><span class="line">        <span class="keyword">INTO</span> record_update LIMIT <span class="number">1000</span>;</span><br><span class="line">  </span><br><span class="line">      FORALL i <span class="keyword">IN</span> <span class="number">1</span> .. record_update.count</span><br><span class="line">        <span class="keyword">UPDATE</span> inf_gl_voucheritemass</span><br><span class="line">           <span class="keyword">SET</span> MD_supplier <span class="operator">=</span> <span class="keyword">NULL</span>,</span><br><span class="line">               MD_CUSTOMER <span class="operator">=</span> record_update(i).MD_CUSTOMER,</span><br><span class="line">               MD_CFITEM   <span class="operator">=</span> record_update(i).MD_CFITEM,</span><br><span class="line">               MD_INDUSTRY <span class="operator">=</span> record_update(i).MD_INDUSTRY,</span><br><span class="line">               unitcode    <span class="operator">=</span> record_update(i).unitcode,</span><br><span class="line">               vchrnum     <span class="operator">=</span> record_update(i).vchrnum</span><br><span class="line">         <span class="keyword">WHERE</span> <span class="number">1</span> <span class="operator">=</span> <span class="number">1</span></span><br><span class="line">           <span class="keyword">AND</span> id <span class="operator">=</span> record_update(i).id</span><br><span class="line">           <span class="keyword">AND</span> vchrid <span class="operator">=</span> record_update(i).vchrid;</span><br><span class="line">  </span><br><span class="line">      <span class="keyword">COMMIT</span>;</span><br><span class="line">  </span><br><span class="line">      EXIT <span class="keyword">WHEN</span> cur_ar_data<span class="operator">%</span>NOTFOUND;</span><br><span class="line">    <span class="keyword">END</span> LOOP;</span><br><span class="line">    <span class="keyword">CLOSE</span> cur_ar_data;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">-- 日志结束</span></span><br><span class="line">    g_log_msg :<span class="operator">=</span> to_char(SYSDATE, <span class="string">&#x27;yyyy-mm-dd hh24:mi:ss&#x27;</span>) <span class="operator">||</span> <span class="string">&#x27; &#x27;</span> <span class="operator">||</span></span><br><span class="line">                 l_api_name <span class="operator">||</span> <span class="string">&#x27; 程序开始&#x27;</span>;</span><br><span class="line">    <span class="built_in">log</span>(g_log_msg);</span><br><span class="line">  </span><br><span class="line">  EXCEPTION</span><br><span class="line">    <span class="keyword">WHEN</span> OTHERS <span class="keyword">THEN</span></span><br><span class="line">      x_return_status :<span class="operator">=</span> g_error;</span><br><span class="line">      x_msg_data      :<span class="operator">=</span> l_api_name <span class="operator">||</span> <span class="string">&#x27;-&gt;&#x27;</span> <span class="operator">||</span> SQLERRM <span class="operator">||</span></span><br><span class="line">                         dbms_utility.format_error_backtrace;</span><br><span class="line">      <span class="built_in">log</span>(x_msg_data);</span><br><span class="line">  <span class="keyword">END</span> update_local_data;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * @Author  : KALOSORA</span></span><br><span class="line"><span class="comment">  * @Purpose : 将本地整理好的数据集插入到中间库</span></span><br><span class="line"><span class="comment">  *</span></span><br><span class="line"><span class="comment">  * @Param   ：x_return_status 返回的参数状态</span></span><br><span class="line"><span class="comment">  * @Param   ：x_return_status 返回的消息</span></span><br><span class="line"><span class="comment">  * @Version : 1.0</span></span><br><span class="line"><span class="comment">  * @Since   : 2021/1/19 9:12:35</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="keyword">PROCEDURE</span> sp_remote_data(x_return_status <span class="keyword">OUT</span> NOCOPY VARCHAR2,</span><br><span class="line">                           x_msg_count     <span class="keyword">OUT</span> NOCOPY NUMBER,</span><br><span class="line">                           x_msg_data      <span class="keyword">OUT</span> NOCOPY VARCHAR2) <span class="keyword">IS</span></span><br><span class="line">    l_api_name CONSTANT VARCHAR2(<span class="number">100</span>) :<span class="operator">=</span> <span class="string">&#x27;sp_remote_data&#x27;</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">BEGIN</span></span><br><span class="line">    <span class="comment">-- 日志开始</span></span><br><span class="line">    g_log_msg :<span class="operator">=</span> to_char(SYSDATE, <span class="string">&#x27;yyyy-mm-dd hh24:mi:ss&#x27;</span>) <span class="operator">||</span> <span class="string">&#x27; &#x27;</span> <span class="operator">||</span></span><br><span class="line">                 l_api_name <span class="operator">||</span> <span class="string">&#x27; 程序开始&#x27;</span>;</span><br><span class="line">    <span class="built_in">log</span>(g_log_msg);</span><br><span class="line">  </span><br><span class="line">    <span class="comment">-- 插入到凭证头表</span></span><br><span class="line">    <span class="keyword">INSERT</span> <span class="keyword">INTO</span> INF_GL_VOUCHER<span class="variable">@gj_congl_middb_prod</span></span><br><span class="line">      <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> INF_GL_VOUCHER;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">-- 插入到凭证行表</span></span><br><span class="line">    <span class="keyword">INSERT</span> <span class="keyword">INTO</span> INF_GL_VOUCHERITEMASS<span class="variable">@gj_congl_middb_prod</span></span><br><span class="line">      <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> INF_GL_VOUCHERITEMASS;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">-- 日志结束</span></span><br><span class="line">    g_log_msg :<span class="operator">=</span> to_char(SYSDATE, <span class="string">&#x27;yyyy-mm-dd hh24:mi:ss&#x27;</span>) <span class="operator">||</span> <span class="string">&#x27; &#x27;</span> <span class="operator">||</span></span><br><span class="line">                 l_api_name <span class="operator">||</span> <span class="string">&#x27; 程序开始&#x27;</span>;</span><br><span class="line">    <span class="built_in">log</span>(g_log_msg);</span><br><span class="line">  </span><br><span class="line">  EXCEPTION</span><br><span class="line">    <span class="keyword">WHEN</span> OTHERS <span class="keyword">THEN</span></span><br><span class="line">      x_return_status :<span class="operator">=</span> g_error;</span><br><span class="line">      x_msg_data      :<span class="operator">=</span> l_api_name <span class="operator">||</span> <span class="string">&#x27;-&gt;&#x27;</span> <span class="operator">||</span> SQLERRM <span class="operator">||</span></span><br><span class="line">                         dbms_utility.format_error_backtrace;</span><br><span class="line">      <span class="built_in">log</span>(x_msg_data);</span><br><span class="line">  <span class="keyword">END</span> sp_remote_data;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * @Author  : KALOSORA</span></span><br><span class="line"><span class="comment">  * @Purpose : 全量同步，清空本地数据集和中间库</span></span><br><span class="line"><span class="comment">  *</span></span><br><span class="line"><span class="comment">  * @Param   ：x_return_status 返回的参数状态</span></span><br><span class="line"><span class="comment">  * @Param   ：x_return_status 返回的消息</span></span><br><span class="line"><span class="comment">  * @Version : 1.0</span></span><br><span class="line"><span class="comment">  * @Since   : 2021/1/19 9:12:35</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="keyword">PROCEDURE</span> sp_sync_all(x_return_status <span class="keyword">OUT</span> NOCOPY VARCHAR2,</span><br><span class="line">                        x_msg_count     <span class="keyword">OUT</span> NOCOPY NUMBER,</span><br><span class="line">                        x_msg_data      <span class="keyword">OUT</span> NOCOPY VARCHAR2) <span class="keyword">IS</span></span><br><span class="line">    l_api_name CONSTANT VARCHAR2(<span class="number">100</span>) :<span class="operator">=</span> <span class="string">&#x27;sp_remote_data&#x27;</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">BEGIN</span></span><br><span class="line">    <span class="comment">-- 日志开始</span></span><br><span class="line">    g_log_msg :<span class="operator">=</span> to_char(SYSDATE, <span class="string">&#x27;yyyy-mm-dd hh24:mi:ss&#x27;</span>) <span class="operator">||</span> <span class="string">&#x27; &#x27;</span> <span class="operator">||</span></span><br><span class="line">                 l_api_name <span class="operator">||</span> <span class="string">&#x27; 程序开始&#x27;</span>;</span><br><span class="line">    <span class="built_in">log</span>(g_log_msg);</span><br><span class="line">  </span><br><span class="line">    <span class="comment">-- 清空本地数据集</span></span><br><span class="line">    <span class="keyword">DELETE</span> <span class="keyword">FROM</span> INF_GL_VOUCHER;</span><br><span class="line">    <span class="keyword">DELETE</span> <span class="keyword">FROM</span> INF_GL_VOUCHERITEMASS;</span><br><span class="line">    <span class="keyword">COMMIT</span>;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">-- 清空中间库</span></span><br><span class="line">    <span class="keyword">DELETE</span> <span class="keyword">FROM</span> INF_GL_VOUCHER<span class="variable">@gj_congl_middb_prod</span>;</span><br><span class="line">    <span class="keyword">DELETE</span> <span class="keyword">FROM</span> INF_GL_VOUCHERITEMASS<span class="variable">@gj_congl_middb_prod</span>;</span><br><span class="line">    <span class="keyword">COMMIT</span>;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">-- 日志结束</span></span><br><span class="line">    g_log_msg :<span class="operator">=</span> to_char(SYSDATE, <span class="string">&#x27;yyyy-mm-dd hh24:mi:ss&#x27;</span>) <span class="operator">||</span> <span class="string">&#x27; &#x27;</span> <span class="operator">||</span></span><br><span class="line">                 l_api_name <span class="operator">||</span> <span class="string">&#x27; 程序结束&#x27;</span>;</span><br><span class="line">    <span class="built_in">log</span>(g_log_msg);</span><br><span class="line">  </span><br><span class="line">  EXCEPTION</span><br><span class="line">    <span class="keyword">WHEN</span> OTHERS <span class="keyword">THEN</span></span><br><span class="line">      x_return_status :<span class="operator">=</span> g_error;</span><br><span class="line">      x_msg_data      :<span class="operator">=</span> l_api_name <span class="operator">||</span> <span class="string">&#x27;-&gt;&#x27;</span> <span class="operator">||</span> SQLERRM <span class="operator">||</span></span><br><span class="line">                         dbms_utility.format_error_backtrace;</span><br><span class="line">      <span class="built_in">log</span>(x_msg_data);</span><br><span class="line">  <span class="keyword">END</span> sp_sync_all;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/*==================================================</span></span><br><span class="line"><span class="comment">  Procedure Name :</span></span><br><span class="line"><span class="comment">      raise_exception</span></span><br><span class="line"><span class="comment">  Description:</span></span><br><span class="line"><span class="comment">      This procedure perform to 处理请求</span></span><br><span class="line"><span class="comment">  Argument:</span></span><br><span class="line"><span class="comment">      x_return_status             : Input Status : E(Error)/U(Unexception)/S(Success)</span></span><br><span class="line"><span class="comment">  History:</span></span><br><span class="line"><span class="comment">      1.00   2020-09-02  LIYIHUI   Creation</span></span><br><span class="line"><span class="comment">  ==================================================*/</span></span><br><span class="line">  <span class="keyword">PROCEDURE</span> process_request(p_init_msg_list <span class="keyword">IN</span> VARCHAR2 <span class="keyword">DEFAULT</span> fnd_api.g_false,</span><br><span class="line">                            p_commit        <span class="keyword">IN</span> VARCHAR2 <span class="keyword">DEFAULT</span> fnd_api.g_false,</span><br><span class="line">                            x_return_status <span class="keyword">OUT</span> NOCOPY VARCHAR2,</span><br><span class="line">                            x_msg_count     <span class="keyword">OUT</span> NOCOPY NUMBER,</span><br><span class="line">                            x_msg_data      <span class="keyword">OUT</span> NOCOPY VARCHAR2) <span class="keyword">IS</span></span><br><span class="line">    l_api_name       CONSTANT VARCHAR2(<span class="number">30</span>) :<span class="operator">=</span> <span class="string">&#x27;process_request&#x27;</span>;</span><br><span class="line">    l_savepoint_name CONSTANT VARCHAR2(<span class="number">30</span>) :<span class="operator">=</span> <span class="string">&#x27;sp_process_request&#x27;</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">BEGIN</span></span><br><span class="line">    x_return_status :<span class="operator">=</span> cux_api.start_activity(p_pkg_name       <span class="operator">=</span><span class="operator">&gt;</span> g_pkg_name,</span><br><span class="line">                                              p_api_name       <span class="operator">=</span><span class="operator">&gt;</span> l_api_name,</span><br><span class="line">                                              p_savepoint_name <span class="operator">=</span><span class="operator">&gt;</span> l_savepoint_name,</span><br><span class="line">                                              p_init_msg_list  <span class="operator">=</span><span class="operator">&gt;</span> p_init_msg_list);</span><br><span class="line">    raise_exception(x_return_status <span class="operator">=</span><span class="operator">&gt;</span> x_return_status);</span><br><span class="line">  </span><br><span class="line">    <span class="comment">-------------API body start</span></span><br><span class="line">  </span><br><span class="line">    <span class="comment">-- 0.全量同步</span></span><br><span class="line">    sp_sync_all(x_return_status <span class="operator">=</span><span class="operator">&gt;</span> x_return_status,</span><br><span class="line">                x_msg_count     <span class="operator">=</span><span class="operator">&gt;</span> x_msg_count,</span><br><span class="line">                x_msg_data      <span class="operator">=</span><span class="operator">&gt;</span> x_msg_data);</span><br><span class="line">    raise_exception(x_return_status);</span><br><span class="line">  </span><br><span class="line">    <span class="comment">-- 1.凭证分录同步</span></span><br><span class="line">    sp_vchrnum_lines(x_return_status <span class="operator">=</span><span class="operator">&gt;</span> x_return_status,</span><br><span class="line">                     x_msg_count     <span class="operator">=</span><span class="operator">&gt;</span> x_msg_count,</span><br><span class="line">                     x_msg_data      <span class="operator">=</span><span class="operator">&gt;</span> x_msg_data);</span><br><span class="line">    raise_exception(x_return_status);</span><br><span class="line">  </span><br><span class="line">    <span class="comment">-- 2.应付发票凭证头同步</span></span><br><span class="line">    sp_ap_invoice_headers(x_return_status <span class="operator">=</span><span class="operator">&gt;</span> x_return_status,</span><br><span class="line">                          x_msg_count     <span class="operator">=</span><span class="operator">&gt;</span> x_msg_count,</span><br><span class="line">                          x_msg_data      <span class="operator">=</span><span class="operator">&gt;</span> x_msg_data);</span><br><span class="line">    raise_exception(x_return_status);</span><br><span class="line">  </span><br><span class="line">    <span class="comment">-- 3.应付付款凭证头同步</span></span><br><span class="line">    sp_ap_payment_headers(x_return_status <span class="operator">=</span><span class="operator">&gt;</span> x_return_status,</span><br><span class="line">                          x_msg_count     <span class="operator">=</span><span class="operator">&gt;</span> x_msg_count,</span><br><span class="line">                          x_msg_data      <span class="operator">=</span><span class="operator">&gt;</span> x_msg_data);</span><br><span class="line">    raise_exception(x_return_status);</span><br><span class="line">  </span><br><span class="line">    <span class="comment">-- 4.应收发票凭证头同步</span></span><br><span class="line">    sp_ar_invoice_headers(x_return_status <span class="operator">=</span><span class="operator">&gt;</span> x_return_status,</span><br><span class="line">                          x_msg_count     <span class="operator">=</span><span class="operator">&gt;</span> x_msg_count,</span><br><span class="line">                          x_msg_data      <span class="operator">=</span><span class="operator">&gt;</span> x_msg_data);</span><br><span class="line">    raise_exception(x_return_status);</span><br><span class="line">  </span><br><span class="line">    <span class="comment">-- 5.应收收款凭证头同步</span></span><br><span class="line">    sp_ar_receipt_headers(x_return_status <span class="operator">=</span><span class="operator">&gt;</span> x_return_status,</span><br><span class="line">                          x_msg_count     <span class="operator">=</span><span class="operator">&gt;</span> x_msg_count,</span><br><span class="line">                          x_msg_data      <span class="operator">=</span><span class="operator">&gt;</span> x_msg_data);</span><br><span class="line">    raise_exception(x_return_status);</span><br><span class="line">  </span><br><span class="line">    <span class="comment">-- 6.更新本地数据集</span></span><br><span class="line">    update_local_data(x_return_status <span class="operator">=</span><span class="operator">&gt;</span> x_return_status,</span><br><span class="line">                      x_msg_count     <span class="operator">=</span><span class="operator">&gt;</span> x_msg_count,</span><br><span class="line">                      x_msg_data      <span class="operator">=</span><span class="operator">&gt;</span> x_msg_data);</span><br><span class="line">    raise_exception(x_return_status);</span><br><span class="line">  </span><br><span class="line">    <span class="comment">-- 7.期初凭证同步</span></span><br><span class="line">    sp_nc_voucher(x_return_status <span class="operator">=</span><span class="operator">&gt;</span> x_return_status,</span><br><span class="line">                  x_msg_count     <span class="operator">=</span><span class="operator">&gt;</span> x_msg_count,</span><br><span class="line">                  x_msg_data      <span class="operator">=</span><span class="operator">&gt;</span> x_msg_data);</span><br><span class="line">    raise_exception(x_return_status);</span><br><span class="line">  </span><br><span class="line">    <span class="comment">-- 8.插入数据到中间库</span></span><br><span class="line">    sp_remote_data(x_return_status <span class="operator">=</span><span class="operator">&gt;</span> x_return_status,</span><br><span class="line">                   x_msg_count     <span class="operator">=</span><span class="operator">&gt;</span> x_msg_count,</span><br><span class="line">                   x_msg_data      <span class="operator">=</span><span class="operator">&gt;</span> x_msg_data);</span><br><span class="line">    raise_exception(x_return_status);</span><br><span class="line">  </span><br><span class="line">    <span class="comment">-------------API body end</span></span><br><span class="line">  </span><br><span class="line">    x_return_status :<span class="operator">=</span> cux_api.end_activity(p_pkg_name  <span class="operator">=</span><span class="operator">&gt;</span> g_pkg_name,</span><br><span class="line">                                            p_api_name  <span class="operator">=</span><span class="operator">&gt;</span> l_api_name,</span><br><span class="line">                                            p_commit    <span class="operator">=</span><span class="operator">&gt;</span> p_commit,</span><br><span class="line">                                            x_msg_count <span class="operator">=</span><span class="operator">&gt;</span> x_msg_count,</span><br><span class="line">                                            x_msg_data  <span class="operator">=</span><span class="operator">&gt;</span> x_msg_data);</span><br><span class="line">  EXCEPTION</span><br><span class="line">    <span class="keyword">WHEN</span> fnd_api.g_exc_error <span class="keyword">THEN</span></span><br><span class="line">      x_return_status :<span class="operator">=</span> cux_api.handle_exceptions(p_pkg_name       <span class="operator">=</span><span class="operator">&gt;</span> g_pkg_name,</span><br><span class="line">                                                   p_api_name       <span class="operator">=</span><span class="operator">&gt;</span> l_api_name,</span><br><span class="line">                                                   p_savepoint_name <span class="operator">=</span><span class="operator">&gt;</span> l_savepoint_name,</span><br><span class="line">                                                   p_exc_name       <span class="operator">=</span><span class="operator">&gt;</span> cux_api.g_exc_name_error,</span><br><span class="line">                                                   x_msg_count      <span class="operator">=</span><span class="operator">&gt;</span> x_msg_count,</span><br><span class="line">                                                   x_msg_data       <span class="operator">=</span><span class="operator">&gt;</span> x_msg_data);</span><br><span class="line">    <span class="keyword">WHEN</span> fnd_api.g_exc_unexpected_error <span class="keyword">THEN</span></span><br><span class="line">      x_return_status :<span class="operator">=</span> cux_api.handle_exceptions(p_pkg_name       <span class="operator">=</span><span class="operator">&gt;</span> g_pkg_name,</span><br><span class="line">                                                   p_api_name       <span class="operator">=</span><span class="operator">&gt;</span> l_api_name,</span><br><span class="line">                                                   p_savepoint_name <span class="operator">=</span><span class="operator">&gt;</span> l_savepoint_name,</span><br><span class="line">                                                   p_exc_name       <span class="operator">=</span><span class="operator">&gt;</span> cux_api.g_exc_name_unexp,</span><br><span class="line">                                                   x_msg_count      <span class="operator">=</span><span class="operator">&gt;</span> x_msg_count,</span><br><span class="line">                                                   x_msg_data       <span class="operator">=</span><span class="operator">&gt;</span> x_msg_data);</span><br><span class="line">    <span class="keyword">WHEN</span> OTHERS <span class="keyword">THEN</span></span><br><span class="line">      x_return_status :<span class="operator">=</span> cux_api.handle_exceptions(p_pkg_name       <span class="operator">=</span><span class="operator">&gt;</span> g_pkg_name,</span><br><span class="line">                                                   p_api_name       <span class="operator">=</span><span class="operator">&gt;</span> l_api_name,</span><br><span class="line">                                                   p_savepoint_name <span class="operator">=</span><span class="operator">&gt;</span> l_savepoint_name,</span><br><span class="line">                                                   p_exc_name       <span class="operator">=</span><span class="operator">&gt;</span> cux_api.g_exc_name_others,</span><br><span class="line">                                                   x_msg_count      <span class="operator">=</span><span class="operator">&gt;</span> x_msg_count,</span><br><span class="line">                                                   x_msg_data       <span class="operator">=</span><span class="operator">&gt;</span> x_msg_data);</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">END</span> process_request;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/*==================================================</span></span><br><span class="line"><span class="comment">  Procedure Name :</span></span><br><span class="line"><span class="comment">      main</span></span><br><span class="line"><span class="comment">  Description:</span></span><br><span class="line"><span class="comment">      This procedure perform to 报表主函数</span></span><br><span class="line"><span class="comment">  Argument:</span></span><br><span class="line"><span class="comment">      errbuf               : concurrent return message buffer</span></span><br><span class="line"><span class="comment">      retcode              : concurrent return status code</span></span><br><span class="line"><span class="comment">                             0 success / 1 warning / 2 error</span></span><br><span class="line"><span class="comment">      p_book_id         : 账簿ID</span></span><br><span class="line"><span class="comment">      p_date_from       : 日期从</span></span><br><span class="line"><span class="comment">      p_date_to         : 至</span></span><br><span class="line"><span class="comment">      p_item_from       : 研发项目从</span></span><br><span class="line"><span class="comment">      p_item_to         : 至</span></span><br><span class="line"><span class="comment">  </span></span><br><span class="line"><span class="comment">  History:</span></span><br><span class="line"><span class="comment">      1.00   2020-09-02  LIYIHUI   Creation</span></span><br><span class="line"><span class="comment">  ==================================================*/</span></span><br><span class="line">  <span class="keyword">PROCEDURE</span> main(errbuf <span class="keyword">OUT</span> VARCHAR2, retcode <span class="keyword">OUT</span> VARCHAR2) <span class="keyword">IS</span></span><br><span class="line">    l_return_status VARCHAR2(<span class="number">1</span>);</span><br><span class="line">    l_msg_count     NUMBER;</span><br><span class="line">    l_msg_data      VARCHAR2(<span class="number">4000</span>);</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">BEGIN</span></span><br><span class="line">  </span><br><span class="line">    <span class="comment">--output header</span></span><br><span class="line">    errbuf  :<span class="operator">=</span> <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    retcode :<span class="operator">=</span> <span class="keyword">NULL</span>;</span><br><span class="line">    cux_conc_utl.log_header;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">-- 处理请求</span></span><br><span class="line">    process_request(p_init_msg_list <span class="operator">=</span><span class="operator">&gt;</span> fnd_api.g_true,</span><br><span class="line">                    p_commit        <span class="operator">=</span><span class="operator">&gt;</span> fnd_api.g_false,</span><br><span class="line">                    x_return_status <span class="operator">=</span><span class="operator">&gt;</span> l_return_status,</span><br><span class="line">                    x_msg_count     <span class="operator">=</span><span class="operator">&gt;</span> l_msg_count,</span><br><span class="line">                    x_msg_data      <span class="operator">=</span><span class="operator">&gt;</span> l_msg_data);</span><br><span class="line">    raise_exception(l_return_status);</span><br><span class="line">  </span><br><span class="line">    <span class="comment">--output foot</span></span><br><span class="line">    cux_conc_utl.log_footer;</span><br><span class="line">  </span><br><span class="line">  EXCEPTION</span><br><span class="line">    <span class="keyword">WHEN</span> fnd_api.g_exc_error <span class="keyword">THEN</span></span><br><span class="line">      cux_conc_utl.log_message_list;</span><br><span class="line">      retcode :<span class="operator">=</span> <span class="string">&#x27;1&#x27;</span>;</span><br><span class="line">      fnd_msg_pub.count_and_get(p_encoded <span class="operator">=</span><span class="operator">&gt;</span> fnd_api.g_false,</span><br><span class="line">                                p_count   <span class="operator">=</span><span class="operator">&gt;</span> l_msg_count,</span><br><span class="line">                                p_data    <span class="operator">=</span><span class="operator">&gt;</span> l_msg_data);</span><br><span class="line">      IF l_msg_count <span class="operator">&gt;</span> <span class="number">1</span> <span class="keyword">THEN</span></span><br><span class="line">        l_msg_data :<span class="operator">=</span> fnd_msg_pub.get_detail(p_msg_index <span class="operator">=</span><span class="operator">&gt;</span> fnd_msg_pub.g_first,</span><br><span class="line">                                             p_encoded   <span class="operator">=</span><span class="operator">&gt;</span> fnd_api.g_false);</span><br><span class="line">      <span class="keyword">END</span> IF;</span><br><span class="line">      errbuf :<span class="operator">=</span> l_msg_data;</span><br><span class="line">    <span class="keyword">WHEN</span> fnd_api.g_exc_unexpected_error <span class="keyword">THEN</span></span><br><span class="line">      cux_conc_utl.log_message_list;</span><br><span class="line">      retcode :<span class="operator">=</span> <span class="string">&#x27;2&#x27;</span>;</span><br><span class="line">      fnd_msg_pub.count_and_get(p_encoded <span class="operator">=</span><span class="operator">&gt;</span> fnd_api.g_false,</span><br><span class="line">                                p_count   <span class="operator">=</span><span class="operator">&gt;</span> l_msg_count,</span><br><span class="line">                                p_data    <span class="operator">=</span><span class="operator">&gt;</span> l_msg_data);</span><br><span class="line">      IF l_msg_count <span class="operator">&gt;</span> <span class="number">1</span> <span class="keyword">THEN</span></span><br><span class="line">        l_msg_data :<span class="operator">=</span> fnd_msg_pub.get_detail(p_msg_index <span class="operator">=</span><span class="operator">&gt;</span> fnd_msg_pub.g_first,</span><br><span class="line">                                             p_encoded   <span class="operator">=</span><span class="operator">&gt;</span> fnd_api.g_false);</span><br><span class="line">      <span class="keyword">END</span> IF;</span><br><span class="line">      errbuf :<span class="operator">=</span> l_msg_data;</span><br><span class="line">    <span class="keyword">WHEN</span> OTHERS <span class="keyword">THEN</span></span><br><span class="line">      fnd_msg_pub.add_exc_msg(p_pkg_name       <span class="operator">=</span><span class="operator">&gt;</span> g_pkg_name,</span><br><span class="line">                              p_procedure_name <span class="operator">=</span><span class="operator">&gt;</span> <span class="string">&#x27;MAIN&#x27;</span>,</span><br><span class="line">                              p_error_text     <span class="operator">=</span><span class="operator">&gt;</span> substrb(SQLERRM, <span class="number">1</span>, <span class="number">240</span>));</span><br><span class="line">      cux_conc_utl.log_message_list;</span><br><span class="line">      retcode :<span class="operator">=</span> <span class="string">&#x27;2&#x27;</span>;</span><br><span class="line">      errbuf  :<span class="operator">=</span> SQLERRM;</span><br><span class="line">  <span class="keyword">END</span> main;</span><br><span class="line"><span class="keyword">END</span> gj_congl_voucher_sync_v2;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h2><h3 id="查看异常"><a href="#查看异常" class="headerlink" title="查看异常"></a>查看异常</h3><p>1.查询表</p><blockquote><p>SELECT * FROM user_errors;</p></blockquote><p><img src="/2021/01/14/Oracle%E9%AB%98%E7%BA%A7SQL/20210114110305-vsys3mo-image.png" alt="image.png"></p><p>2.SQL * Plus 环境中</p><blockquote><p>show errors;</p></blockquote><h3 id="查看警告信息"><a href="#查看警告信息" class="headerlink" title="查看警告信息"></a>查看警告信息</h3><p>PL &#x2F; SQL 警告的消息代码的格式为 PLW- nnnnn</p><h4 id="警告信息等级"><a href="#警告信息等级" class="headerlink" title="警告信息等级"></a>警告信息等级</h4><p><img src="/2021/01/14/Oracle%E9%AB%98%E7%BA%A7SQL/20210114111226-ptev80c-image.png" alt="image.png"></p><h4 id="查询警告信息等级"><a href="#查询警告信息等级" class="headerlink" title="查询警告信息等级"></a>查询警告信息等级</h4><p><img src="/2021/01/14/Oracle%E9%AB%98%E7%BA%A7SQL/20210114110436-cjr1nsx-image.png" alt="image.png"></p><p>可以通过 <code>alter system</code> 修改服务器参数文件</p><p><img src="/2021/01/14/Oracle%E9%AB%98%E7%BA%A7SQL/20210114110950-tv4vuix-image.png" alt="image.png"></p><p>可以通过 <code>alter session</code> 修改当前会话</p><p><img src="/2021/01/14/Oracle%E9%AB%98%E7%BA%A7SQL/20210114110909-34wb3zz-image.png" alt="image.png"></p><h4 id="修改异常信息"><a href="#修改异常信息" class="headerlink" title="修改异常信息"></a>修改异常信息</h4><p>启用部分</p><blockquote><p>Alter session set plsql_warnings&#x3D;’enable:performance’, ‘enable:severe’;</p></blockquote><p><img src="/2021/01/14/Oracle%E9%AB%98%E7%BA%A7SQL/20210114111333-shvvs9p-image.png" alt="image.png"></p><p>启用全部</p><blockquote><p>Alter session set plsql_warnings&#x3D;’enable:all’;</p></blockquote><p>针对过程&#x2F;函数启用编译警告</p><blockquote><p>alter package gj_bc_vld_data_utl compile plsql_warnings &#x3D; ‘enable:all’;</p></blockquote><p><img src="/2021/01/14/Oracle%E9%AB%98%E7%BA%A7SQL/20210114112359-krrpg5r-image.png" alt="image.png"></p><p>编辑警告</p><p><img src="/2021/01/14/Oracle%E9%AB%98%E7%BA%A7SQL/20210114112826-lh12olm-image.png" alt="image.png"></p><h3 id="异常处理准则"><a href="#异常处理准则" class="headerlink" title="异常处理准则"></a>异常处理准则</h3><ol><li>尽可能编写命名异常的异常处理程序，而不要使用 <code>OTHERS</code> 异常处理程序。</li><li>对于每个异常处理程序，请仔细决定是让它提交事务，回滚它还是让它继续。</li><li>每个 PL &#x2F; SQL 程序的顶层都包含一个异常处理程序，避免未处理的异常。并且在子程序中显示抛出异常<code>RAISE</code> 或在 <code>RAISE_APPLICATION_ERROR</code>。</li></ol><h3 id="异常实例"><a href="#异常实例" class="headerlink" title="异常实例"></a>异常实例</h3><p>1.自定义异常实例</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> account_status (</span><br><span class="line">  due_date <span class="type">DATE</span>,</span><br><span class="line">  today    <span class="type">DATE</span></span><br><span class="line">) AUTHID DEFINER</span><br><span class="line"><span class="keyword">IS</span></span><br><span class="line">  past_due  EXCEPTION;  <span class="comment">-- declare exception</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">  IF due_date <span class="operator">&lt;</span> today <span class="keyword">THEN</span></span><br><span class="line">    RAISE past_due;  <span class="comment">-- explicitly raise exception</span></span><br><span class="line">  <span class="keyword">END</span> IF;</span><br><span class="line">EXCEPTION</span><br><span class="line">  <span class="keyword">WHEN</span> past_due <span class="keyword">THEN</span>  <span class="comment">-- handle exception</span></span><br><span class="line">    DBMS_OUTPUT.PUT_LINE (<span class="string">&#x27;Account past due.&#x27;</span>);</span><br><span class="line"><span class="keyword">END</span>;</span><br><span class="line"><span class="operator">/</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">  account_status (TO_DATE(<span class="string">&#x27;01-JUL-2010&#x27;</span>, <span class="string">&#x27;DD-MON-YYYY&#x27;</span>),</span><br><span class="line">                  TO_DATE(<span class="string">&#x27;09-JUL-2010&#x27;</span>, <span class="string">&#x27;DD-MON-YYYY&#x27;</span>));</span><br><span class="line"><span class="keyword">END</span>;</span><br><span class="line"><span class="operator">/</span></span><br></pre></td></tr></table></figure><p>2.使用<code>RAISE_APPLICATION_ERROR</code>自定义异常实例</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> account_status (</span><br><span class="line">  due_date <span class="type">DATE</span>,</span><br><span class="line">  today    <span class="type">DATE</span></span><br><span class="line">) AUTHID DEFINER</span><br><span class="line"><span class="keyword">IS</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">  IF due_date <span class="operator">&lt;</span> today <span class="keyword">THEN</span>                   <span class="comment">-- explicitly raise exception</span></span><br><span class="line">    RAISE_APPLICATION_ERROR(<span class="number">-20000</span>, <span class="string">&#x27;Account past due.&#x27;</span>);</span><br><span class="line">  <span class="keyword">END</span> IF;</span><br><span class="line"><span class="keyword">END</span>;</span><br><span class="line"><span class="operator">/</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">DECLARE</span></span><br><span class="line">  past_due  EXCEPTION;                       <span class="comment">-- declare exception</span></span><br><span class="line">  PRAGMA EXCEPTION_INIT (past_due, <span class="number">-20000</span>);  <span class="comment">-- assign error code to exception</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">  account_status (TO_DATE(<span class="string">&#x27;01-JUL-2010&#x27;</span>, <span class="string">&#x27;DD-MON-YYYY&#x27;</span>),</span><br><span class="line">                  TO_DATE(<span class="string">&#x27;09-JUL-2010&#x27;</span>, <span class="string">&#x27;DD-MON-YYYY&#x27;</span>));   <span class="comment">-- invoke procedure</span></span><br><span class="line"></span><br><span class="line">EXCEPTION</span><br><span class="line">  <span class="keyword">WHEN</span> past_due <span class="keyword">THEN</span>                         <span class="comment">-- handle exception</span></span><br><span class="line">    DBMS_OUTPUT.PUT_LINE(TO_CHAR(SQLERRM(<span class="number">-20000</span>)));</span><br><span class="line"><span class="keyword">END</span>;</span><br><span class="line"><span class="operator">/</span></span><br></pre></td></tr></table></figure><p>实验：数据同步接口为例</p><p>package定义</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">OR</span> REPLACE PACKAGE gj_inter_company_sync <span class="keyword">IS</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * @Author  : KALOSORA</span></span><br><span class="line"><span class="comment">  * @Purpose : 输出运行日志</span></span><br><span class="line"><span class="comment">  * @Param   : p_api_name 函数/过程名称</span></span><br><span class="line"><span class="comment">  * @Param   : p_api_name 日志等级 info/debug/error</span></span><br><span class="line"><span class="comment">  * @Param   : p_log_status 日志状态 start/end</span></span><br><span class="line"><span class="comment">  * @Param   : p_message 日志消息 </span></span><br><span class="line"><span class="comment">  * @Version : 1.0</span></span><br><span class="line"><span class="comment">  * @Since   : 2021/1/19 9:12:35 </span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="keyword">PROCEDURE</span> <span class="built_in">log</span>(p_api_name   <span class="keyword">IN</span> VARCHAR2,</span><br><span class="line">                p_log_level  <span class="keyword">IN</span> VARCHAR2,</span><br><span class="line">                p_log_status <span class="keyword">IN</span> VARCHAR2,</span><br><span class="line">                p_message    <span class="keyword">IN</span> VARCHAR2);</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * @Author  : KALOSORA</span></span><br><span class="line"><span class="comment">  * @Purpose : 自动根据快码GJ_INTER_COMPANY更新到客商弹性域中</span></span><br><span class="line"><span class="comment">  * @Param   ：x_return_status 返回的参数状态</span></span><br><span class="line"><span class="comment">  * @Param   ：x_return_status 返回的消息</span></span><br><span class="line"><span class="comment">  * @Version : 1.0</span></span><br><span class="line"><span class="comment">  * @Since   : 2021/1/19 9:12:35</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="keyword">PROCEDURE</span> process_flex_sync(x_return_status <span class="keyword">OUT</span> NOCOPY VARCHAR2,</span><br><span class="line">                              x_return_msg    <span class="keyword">OUT</span> NOCOPY VARCHAR2);</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * @Author  : KALOSORA</span></span><br><span class="line"><span class="comment">  * @Purpose : 程序入口</span></span><br><span class="line"><span class="comment">  * @Param   ：x_return_status 返回的参数状态</span></span><br><span class="line"><span class="comment">  * @Param   ：x_return_status 返回的消息</span></span><br><span class="line"><span class="comment">  * @Version : 1.0</span></span><br><span class="line"><span class="comment">  * @Since   : 2021/1/19 9:12:35</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="keyword">PROCEDURE</span> main(x_return_status <span class="keyword">OUT</span> NOCOPY VARCHAR2,</span><br><span class="line">                 x_return_msg    <span class="keyword">OUT</span> NOCOPY VARCHAR2);</span><br><span class="line"></span><br><span class="line"><span class="keyword">END</span> gj_inter_company_sync;</span><br></pre></td></tr></table></figure><p>package内容</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">OR</span> REPLACE PACKAGE BODY gj_inter_company_sync <span class="keyword">IS</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">-- ==========================================================</span></span><br><span class="line">  <span class="comment">-- 日志参数</span></span><br><span class="line">  g_conc_request_id NUMBER :<span class="operator">=</span> fnd_global.conc_request_id;</span><br><span class="line">  g_log_info        VARCHAR2(<span class="number">6</span>) :<span class="operator">=</span> <span class="string">&#x27;INFO&#x27;</span>;</span><br><span class="line">  g_log_error       VARCHAR2(<span class="number">6</span>) :<span class="operator">=</span> <span class="string">&#x27;ERROR&#x27;</span>;</span><br><span class="line">  g_log_start       VARCHAR2(<span class="number">6</span>) :<span class="operator">=</span> <span class="string">&#x27;START&#x27;</span>;</span><br><span class="line">  g_log_end         VARCHAR2(<span class="number">6</span>) :<span class="operator">=</span> <span class="string">&#x27;END&#x27;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">-- 自定义应用异常</span></span><br><span class="line">  APP_UNKNOWN_EXCEPTION EXCEPTION;</span><br><span class="line">  PRAGMA EXCEPTION_INIT(APP_UNKNOWN_EXCEPTION, <span class="number">-20000</span>);</span><br><span class="line">  <span class="comment">-- ==========================================================</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">PROCEDURE</span> <span class="built_in">log</span>(p_api_name   <span class="keyword">IN</span> VARCHAR2,</span><br><span class="line">                p_log_level  <span class="keyword">IN</span> VARCHAR2,</span><br><span class="line">                p_log_status <span class="keyword">IN</span> VARCHAR2,</span><br><span class="line">                p_message    <span class="keyword">IN</span> VARCHAR2) <span class="keyword">IS</span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">BEGIN</span></span><br><span class="line">    IF g_conc_request_id <span class="operator">&gt;</span> <span class="number">0</span> <span class="keyword">THEN</span></span><br><span class="line">      fnd_file.PUT_LINE(fnd_file.LOG,</span><br><span class="line">                        <span class="string">&#x27;[&#x27;</span> <span class="operator">||</span> p_api_name <span class="operator">||</span> <span class="string">&#x27;] &#x27;</span> <span class="operator">||</span> p_log_level <span class="operator">||</span> <span class="string">&#x27; &#x27;</span> <span class="operator">||</span></span><br><span class="line">                        to_char(SYSDATE, <span class="string">&#x27;yyyy-mm-dd hh24:mi:ss&#x27;</span>) <span class="operator">||</span> <span class="string">&#x27; &#x27;</span> <span class="operator">||</span></span><br><span class="line">                        p_log_status <span class="operator">||</span> <span class="string">&#x27; - &#x27;</span> <span class="operator">||</span> p_message);</span><br><span class="line">    <span class="keyword">ELSE</span></span><br><span class="line">      dbms_output.put_line(<span class="string">&#x27;[&#x27;</span> <span class="operator">||</span> p_api_name <span class="operator">||</span> <span class="string">&#x27;] &#x27;</span> <span class="operator">||</span> p_log_level <span class="operator">||</span> <span class="string">&#x27; &#x27;</span> <span class="operator">||</span></span><br><span class="line">                           to_char(SYSDATE, <span class="string">&#x27;yyyy-mm-dd hh24:mi:ss&#x27;</span>) <span class="operator">||</span> <span class="string">&#x27; &#x27;</span> <span class="operator">||</span></span><br><span class="line">                           p_log_status <span class="operator">||</span> <span class="string">&#x27; - &#x27;</span> <span class="operator">||</span> p_message);</span><br><span class="line">    <span class="keyword">END</span> IF;</span><br><span class="line">  <span class="keyword">END</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">PROCEDURE</span> process_flex_sync(x_return_status <span class="keyword">OUT</span> NOCOPY VARCHAR2,</span><br><span class="line">                              x_return_msg    <span class="keyword">OUT</span> NOCOPY VARCHAR2) <span class="keyword">IS</span></span><br><span class="line">    l_api_name VARCHAR2(<span class="number">30</span>) :<span class="operator">=</span> <span class="built_in">upper</span>(<span class="string">&#x27;process_flex_sync&#x27;</span>);</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">CURSOR</span> cur_vendor <span class="keyword">IS</span></span><br><span class="line">      <span class="keyword">SELECT</span> flv.LOOKUP_CODE, company.id, company.inter_company</span><br><span class="line">        <span class="keyword">FROM</span> fnd_lookup_values flv,</span><br><span class="line">             (<span class="keyword">SELECT</span> pv.vendor_id   ID,</span><br><span class="line">                     pv.vendor_name company_name,</span><br><span class="line">                     pv.attribute2  inter_company</span><br><span class="line">                <span class="keyword">FROM</span> po_vendors pv</span><br><span class="line">               <span class="keyword">WHERE</span> <span class="number">1</span> <span class="operator">=</span> <span class="number">1</span></span><br><span class="line">                 <span class="keyword">AND</span> pv.attribute2 <span class="keyword">IS</span> <span class="keyword">NULL</span>) company</span><br><span class="line">       <span class="keyword">WHERE</span> <span class="number">1</span> <span class="operator">=</span> <span class="number">1</span></span><br><span class="line">         <span class="keyword">AND</span> company.company_name <span class="operator">=</span> flv.DESCRIPTION</span><br><span class="line">         <span class="keyword">AND</span> flv.LOOKUP_TYPE <span class="operator">=</span> <span class="string">&#x27;GJ_INTER_COMPANY&#x27;</span></span><br><span class="line">         <span class="keyword">AND</span> flv.LANGUAGE <span class="operator">=</span> <span class="string">&#x27;ZHS&#x27;</span>;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">CURSOR</span> cur_customer <span class="keyword">IS</span></span><br><span class="line">      <span class="keyword">SELECT</span> flv.LOOKUP_CODE, company.id, company.inter_company</span><br><span class="line">        <span class="keyword">FROM</span> fnd_lookup_values flv,</span><br><span class="line">             (<span class="keyword">SELECT</span> hca.CUST_ACCOUNT_ID ID,</span><br><span class="line">                     hp.party_name       company_name,</span><br><span class="line">                     hca.ATTRIBUTE5      inter_company</span><br><span class="line">                <span class="keyword">FROM</span> hz_parties hp, hz_cust_accounts hca</span><br><span class="line">               <span class="keyword">WHERE</span> <span class="number">1</span> <span class="operator">=</span> <span class="number">1</span></span><br><span class="line">                 <span class="keyword">AND</span> hp.PARTY_ID <span class="operator">=</span> hca.PARTY_ID</span><br><span class="line">                 <span class="keyword">AND</span> hca.ATTRIBUTE5 <span class="keyword">IS</span> <span class="keyword">NULL</span>) company</span><br><span class="line">       <span class="keyword">WHERE</span> <span class="number">1</span> <span class="operator">=</span> <span class="number">1</span></span><br><span class="line">         <span class="keyword">AND</span> company.company_name <span class="operator">=</span> flv.DESCRIPTION</span><br><span class="line">         <span class="keyword">AND</span> flv.LOOKUP_TYPE <span class="operator">=</span> <span class="string">&#x27;GJ_INTER_COMPANY&#x27;</span></span><br><span class="line">         <span class="keyword">AND</span> flv.LANGUAGE <span class="operator">=</span> <span class="string">&#x27;ZHS&#x27;</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">BEGIN</span></span><br><span class="line">  </span><br><span class="line">    <span class="built_in">log</span>(l_api_name, g_log_info, g_log_start, <span class="keyword">NULL</span>);</span><br><span class="line">  </span><br><span class="line">    <span class="comment">-- 1. 更新供应商弹性域</span></span><br><span class="line">    <span class="keyword">FOR</span> rec_vendor <span class="keyword">IN</span> cur_vendor LOOP</span><br><span class="line">      <span class="keyword">UPDATE</span> po_vendors</span><br><span class="line">         <span class="keyword">SET</span> attribute2 <span class="operator">=</span> rec_vendor.LOOKUP_CODE</span><br><span class="line">       <span class="keyword">WHERE</span> <span class="number">1</span> <span class="operator">=</span> <span class="number">1</span></span><br><span class="line">         <span class="keyword">AND</span> vendor_id <span class="operator">=</span> rec_vendor.id;</span><br><span class="line">    <span class="keyword">END</span> LOOP;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">-- 2. 更新客户弹性域</span></span><br><span class="line">    <span class="keyword">FOR</span> rec_customer <span class="keyword">IN</span> cur_customer LOOP</span><br><span class="line">      <span class="keyword">UPDATE</span> hz_cust_accounts</span><br><span class="line">         <span class="keyword">SET</span> attribute5 <span class="operator">=</span> rec_customer.LOOKUP_CODE</span><br><span class="line">       <span class="keyword">WHERE</span> <span class="number">1</span> <span class="operator">=</span> <span class="number">1</span></span><br><span class="line">         <span class="keyword">AND</span> CUST_ACCOUNT_ID <span class="operator">=</span> rec_customer.id;</span><br><span class="line">    <span class="keyword">END</span> LOOP;</span><br><span class="line">  </span><br><span class="line">    <span class="built_in">log</span>(l_api_name, g_log_info, g_log_end, <span class="keyword">NULL</span>);</span><br><span class="line">  </span><br><span class="line">  EXCEPTION</span><br><span class="line">    <span class="keyword">WHEN</span> OTHERS <span class="keyword">THEN</span></span><br><span class="line">      x_return_status :<span class="operator">=</span> SQLCODE;</span><br><span class="line">      x_return_msg    :<span class="operator">=</span> SQLERRM <span class="operator">||</span> dbms_utility.format_error_backtrace;</span><br><span class="line">      <span class="built_in">log</span>(l_api_name, g_log_error, g_log_end, x_return_msg);</span><br><span class="line">      RAISE APP_UNKNOWN_EXCEPTION;</span><br><span class="line">  <span class="keyword">END</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">PROCEDURE</span> main(x_return_status <span class="keyword">OUT</span> NOCOPY VARCHAR2,</span><br><span class="line">                 x_return_msg    <span class="keyword">OUT</span> NOCOPY VARCHAR2) <span class="keyword">IS</span></span><br><span class="line">    l_return_status VARCHAR2(<span class="number">10</span>);</span><br><span class="line">    l_return_msg    VARCHAR2(<span class="number">4000</span>);</span><br><span class="line">  <span class="keyword">BEGIN</span></span><br><span class="line">    <span class="comment">-- 日志开始</span></span><br><span class="line">    cux_conc_utl.log_header;</span><br><span class="line">  </span><br><span class="line">    process_flex_sync(x_return_status <span class="operator">=</span><span class="operator">&gt;</span> l_return_status,</span><br><span class="line">                      x_return_msg    <span class="operator">=</span><span class="operator">&gt;</span> l_return_msg);</span><br><span class="line">  </span><br><span class="line">    <span class="comment">-- 日志结束</span></span><br><span class="line">    cux_conc_utl.log_footer;</span><br><span class="line">  <span class="keyword">END</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">END</span> gj_inter_company_sync;</span><br></pre></td></tr></table></figure><p>4.异常事务处理</p><p>使用 <code>SAVEPOINT start_transaction;</code> 记录保存点</p><p>使用 <code>rollback to [savepoint_name]</code> 回滚保存点</p><p>【注意】在使用savepoint期间不能主动 <code>commit</code> ，否则保存点会消失</p><h2 id="条件编译"><a href="#条件编译" class="headerlink" title="条件编译"></a>条件编译</h2><p>可以根据不同的判断条件，编译&#x2F;执行不同的程序</p><p>语法 <code>$plsql标识符</code>。注意<code>$</code>和标识符之间不能有空格</p><p>实例：输出plsql环境参数</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">  DBMS_OUTPUT.PUT_LINE(<span class="string">&#x27;$$PLSCOPE_SETTINGS = &#x27;</span>     <span class="operator">||</span> $$PLSCOPE_SETTINGS);</span><br><span class="line">  DBMS_OUTPUT.PUT_LINE(<span class="string">&#x27;$$PLSQL_CCFLAGS = &#x27;</span>        <span class="operator">||</span> $$PLSQL_CCFLAGS);</span><br><span class="line">  DBMS_OUTPUT.PUT_LINE(<span class="string">&#x27;$$PLSQL_CODE_TYPE = &#x27;</span>      <span class="operator">||</span> $$PLSQL_CODE_TYPE);</span><br><span class="line">  DBMS_OUTPUT.PUT_LINE(<span class="string">&#x27;$$PLSQL_OPTIMIZE_LEVEL = &#x27;</span> <span class="operator">||</span> $$PLSQL_OPTIMIZE_LEVEL);</span><br><span class="line">  DBMS_OUTPUT.PUT_LINE(<span class="string">&#x27;$$PLSQL_WARNINGS = &#x27;</span>       <span class="operator">||</span> $$PLSQL_WARNINGS);</span><br><span class="line">  DBMS_OUTPUT.PUT_LINE(<span class="string">&#x27;$$NLS_LENGTH_SEMANTICS = &#x27;</span> <span class="operator">||</span> $$NLS_LENGTH_SEMANTICS);</span><br><span class="line"><span class="keyword">END</span>;</span><br><span class="line"><span class="operator">/</span></span><br></pre></td></tr></table></figure><p>实例2：根据数据库版本执行不同的指令</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">  $IF DBMS_DB_VERSION.VER_LE_10_1 $<span class="keyword">THEN</span>  <span class="comment">-- selection directive begins</span></span><br><span class="line">    $ERROR <span class="string">&#x27;unsupported database release&#x27;</span> $<span class="keyword">END</span>  <span class="comment">-- error directive</span></span><br><span class="line">  $<span class="keyword">ELSE</span></span><br><span class="line">    DBMS_OUTPUT.PUT_LINE (</span><br><span class="line">      <span class="string">&#x27;Release &#x27;</span> <span class="operator">||</span> DBMS_DB_VERSION.VERSION <span class="operator">||</span> <span class="string">&#x27;.&#x27;</span> <span class="operator">||</span></span><br><span class="line">      DBMS_DB_VERSION.RELEASE <span class="operator">||</span> <span class="string">&#x27; is supported.&#x27;</span></span><br><span class="line">    );</span><br><span class="line">  <span class="comment">-- This COMMIT syntax is newly supported in 10.2:</span></span><br><span class="line">  <span class="keyword">COMMIT</span> WRITE IMMEDIATE NOWAIT;</span><br><span class="line">  $<span class="keyword">END</span>  <span class="comment">-- selection directive ends</span></span><br><span class="line"><span class="keyword">END</span>;</span><br><span class="line"><span class="operator">/</span></span><br></pre></td></tr></table></figure><p>其他的环境变量</p><p>可以通过 <code>$$[参数名称]</code> 代替在sql命令窗口中的 <code>show parameter [参数名称]</code>，以达到在plsql开发工具中查看服务器参数的效果</p><ul><li><code>$$PLSQL_LINE</code>：获取当前package&#x2F;function的行号</li><li><code>$$PLSQL_UNIT</code>：获取当前程序名称</li><li><code>$$PLSQL_UNIT_OWNER</code>：获取当前程序owner</li><li><code>$$PLSQL_UNIT_TYPE</code>：获取当前程序类型</li></ul><h2 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h2><p>用到的时候再来总结</p><blockquote><p><a href="https://docs.oracle.com/en/database/oracle/oracle-database/12.2/adfns/regexp.html#GUID-1935FD80-A3CD-413F-BD2E-BBEFE64000B2">https://docs.oracle.com/en/database/oracle/oracle-database/12.2/adfns/regexp.html#GUID-1935FD80-A3CD-413F-BD2E-BBEFE64000B2</a></p></blockquote><h2 id="数据库锁"><a href="#数据库锁" class="headerlink" title="数据库锁"></a>数据库锁</h2><p>同上</p><h2 id="闪回技术"><a href="#闪回技术" class="headerlink" title="闪回技术"></a>闪回技术</h2><p><strong>Oracle Flashback</strong></p><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><p>查询实例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">AS</span> <span class="keyword">OF</span> <span class="type">TIMESTAMP</span></span><br><span class="line">TO_TIMESTAMP(<span class="string">&#x27;2004-04-04 09:30:00&#x27;</span>, <span class="string">&#x27;YYYY-MM-DD HH:MI:SS&#x27;</span>)</span><br><span class="line"><span class="keyword">WHERE</span> last_name <span class="operator">=</span> <span class="string">&#x27;Chung&#x27;</span>;</span><br></pre></td></tr></table></figure><p>数据恢复实例</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> employees (</span><br><span class="line">  <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> employees</span><br><span class="line">  <span class="keyword">AS</span> <span class="keyword">OF</span> <span class="type">TIMESTAMP</span></span><br><span class="line">  TO_TIMESTAMP(<span class="string">&#x27;2004-04-04 09:30:00&#x27;</span>, <span class="string">&#x27;YYYY-MM-DD HH:MI:SS&#x27;</span>)</span><br><span class="line">  <span class="keyword">WHERE</span> last_name <span class="operator">=</span> <span class="string">&#x27;Chung&#x27;</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>闪回事务</p><blockquote><p><a href="https://docs.oracle.com/en/database/oracle/oracle-database/12.2/adfns/flashback.html#GUID-03D1CAAE-D940-444A-8771-B1BC636D105D">https://docs.oracle.com/en/database/oracle/oracle-database/12.2/adfns/flashback.html#GUID-03D1CAAE-D940-444A-8771-B1BC636D105D</a></p></blockquote><h2 id="消息队列"><a href="#消息队列" class="headerlink" title="消息队列"></a>消息队列</h2><p><strong>Oracle AQ</strong></p><p>‍</p><h1 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h1><h2 id="用于管理PLSQL的表"><a href="#用于管理PLSQL的表" class="headerlink" title="用于管理PLSQL的表"></a>用于管理PLSQL的表</h2><p><img src="/2021/01/14/Oracle%E9%AB%98%E7%BA%A7SQL/20210121130638-toyvo67-image.png" alt="image.png"></p><h2 id="编程规范"><a href="#编程规范" class="headerlink" title="编程规范"></a>编程规范</h2><h4 id="正确地使用数据类型"><a href="#正确地使用数据类型" class="headerlink" title="正确地使用数据类型"></a>正确地使用数据类型</h4><p>尽可能精确地指定数据类型</p><ul><li>整数时指定NUMBER(n)，而不要使用NUMBER。</li><li>VARCHAR2(n)的精度尽可能准确。</li></ul><h2 id="官方参考手册"><a href="#官方参考手册" class="headerlink" title="官方参考手册"></a>官方参考手册</h2><p>1.SQL语言参考手册，即<code>SQL Language Reference</code></p><blockquote><p><a href="https://docs.oracle.com/en/database/oracle/oracle-database/12.2/lnpls/dynamic-sql.html#GUID-7E2F596F-9CA3-4DC8-8333-0C117962DB73">https://docs.oracle.com/en/database/oracle/oracle-database/12.2/lnpls/dynamic-sql.html#GUID-7E2F596F-9CA3-4DC8-8333-0C117962DB73</a></p></blockquote><p>‍</p>]]></content>
      
      
      <categories>
          
          <category> Database </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Oracle </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Oracle性能分析工具</title>
      <link href="/2021/01/13/Oracle%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90%E5%B7%A5%E5%85%B7/"/>
      <url>/2021/01/13/Oracle%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90%E5%B7%A5%E5%85%B7/</url>
      
        <content type="html"><![CDATA[<h1 id="Oracle性能分析工具"><a href="#Oracle性能分析工具" class="headerlink" title="Oracle性能分析工具"></a>Oracle性能分析工具</h1><p>‍</p><h2 id="PL-SQL跟踪"><a href="#PL-SQL跟踪" class="headerlink" title="PL&#x2F;SQL跟踪"></a>PL&#x2F;SQL跟踪</h2><p><strong>PL&#x2F;SQL Hierarchical Profiler (HPROF)</strong></p><h3 id="HPROF实例"><a href="#HPROF实例" class="headerlink" title="HPROF实例"></a>HPROF实例</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 0. 在ftp上创建目录，或首先确保目录存在</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 1. 创建目录定义</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">OR</span> REPLACE DIRECTORY PLSHPROF_DIR <span class="keyword">as</span> <span class="string">&#x27;/home/oratest&#x27;</span>;</span><br><span class="line"><span class="comment">-- 注意：如果没有权限，可能需要授权</span></span><br><span class="line"><span class="keyword">GRANT</span> READ, WRITE <span class="keyword">ON</span> DIRECTORY PLSHPROF_DIR <span class="keyword">TO</span> APPS;</span><br><span class="line"></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">  DBMS_HPROF.START_PROFILING(<span class="string">&#x27;PLSHPROF_DIR&#x27;</span>, <span class="string">&#x27;gjhprof_test_210121.trc&#x27;</span>);</span><br><span class="line"><span class="keyword">END</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">DECLARE</span></span><br><span class="line">  l_return_status VARCHAR2(<span class="number">1</span>);</span><br><span class="line">  l_msg_data      VARCHAR2(<span class="number">4000</span>);</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">  gj_congl_voucher_sync_test.main(errbuf  <span class="operator">=</span><span class="operator">&gt;</span> l_return_status,</span><br><span class="line">                                  retcode <span class="operator">=</span><span class="operator">&gt;</span> l_msg_data);</span><br><span class="line"><span class="keyword">END</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">  <span class="comment">-- Stop profiling</span></span><br><span class="line">  DBMS_HPROF.STOP_PROFILING;</span><br><span class="line"><span class="keyword">END</span>;</span><br></pre></td></tr></table></figure><p>文件输出：</p><p><img src="/2021/01/13/Oracle%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90%E5%B7%A5%E5%85%B7/20210121135255-jik6qlq-image.png" alt="image.png"></p><p>从PLHPROF中生成的是plsql虚拟机源代码，难以读懂，一般会再次使用<strong>分析器</strong>转化成易读的数据。</p><p>以下为PLHPROF生成的部分源代码</p><p><img src="/2021/01/13/Oracle%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90%E5%B7%A5%E5%85%B7/20210121140215-011boo9-image.png" alt="image.png"></p><p>‍</p><h3 id="使用分析器"><a href="#使用分析器" class="headerlink" title="使用分析器"></a>使用分析器</h3><p>两种方式</p><ul><li>第一种：hprof格式化命令</li><li>第二张：使用<code>dbmshptab.sql</code></li></ul><h4 id="hprof格式化"><a href="#hprof格式化" class="headerlink" title="hprof格式化"></a>hprof格式化</h4><p>命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">plshprof -output gjhprof_test_210121 gjhprof_test_210121.trc</span><br></pre></td></tr></table></figure><p>输出结果</p><p><img src="/2021/01/13/Oracle%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90%E5%B7%A5%E5%85%B7/20210121144414-djmcyku-image.png" alt="image.png"></p><p>分析报表</p><p><img src="/2021/01/13/Oracle%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90%E5%B7%A5%E5%85%B7/20210121144436-huv3p6c-image.png" alt="image.png"></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ol><li>定义跟踪文件目录并授权</li><li>开启PLSQL程序跟踪</li><li>格式化报告</li></ol><p>‍</p><h2 id="SQL跟踪"><a href="#SQL跟踪" class="headerlink" title="SQL跟踪"></a>SQL跟踪</h2><p><strong>ORACLE SQL TRACE (10046)</strong></p><p>‍</p><h3 id="跟踪文件所在位置"><a href="#跟踪文件所在位置" class="headerlink" title="跟踪文件所在位置"></a>跟踪文件所在位置</h3><p>方法1：登陆到数据库服务器上，查找日志文件 <code>alert_PROD.log</code> 的目录，即为trace文件所在目录</p><p>方法2：通过命令 <code>show parameter user_dump_dest;</code> 可以看到日志文件所在位置。不适用于修改过路径的情况。</p><p>一般路径名</p><blockquote><p>&#x2F;u01&#x2F;test&#x2F;db&#x2F;12.1.0&#x2F;admin&#x2F;TEST_erp1&#x2F;diag&#x2F;rdbms&#x2F;test&#x2F;TEST&#x2F;trace</p></blockquote><p>一般格式</p><blockquote><p>$ORACLE_HOME&#x2F;admin&#x2F;TEST_erp1&#x2F;diag&#x2F;rdbms&#x2F;test&#x2F;TEST&#x2F;trace</p></blockquote><p>方法3：查看当前session生成的trace文件名，然后到数据库服务器中搜索</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">/</span><span class="operator">/</span> 查找trace文件名</span><br><span class="line"><span class="keyword">SELECT</span> c.value <span class="operator">||</span> <span class="string">&#x27;/&#x27;</span> <span class="operator">||</span> d.instance_name <span class="operator">||</span> <span class="string">&#x27;_ora_&#x27;</span> <span class="operator">||</span> a.spid <span class="operator">||</span> <span class="string">&#x27;.trc&#x27;</span> trace</span><br><span class="line">  <span class="keyword">FROM</span> v$process a, v$session b, v$<span class="keyword">parameter</span> c, v$instance d</span><br><span class="line"> <span class="keyword">WHERE</span> a.addr <span class="operator">=</span> b.paddr</span><br><span class="line">   <span class="keyword">AND</span> b.audsid <span class="operator">=</span> userenv(<span class="string">&#x27;sessionid&#x27;</span>)</span><br><span class="line">   <span class="keyword">AND</span> c.name <span class="operator">=</span> <span class="string">&#x27;user_dump_dest&#x27;</span>;</span><br></pre></td></tr></table></figure><p>结果：后缀名为所求，路径部分不一定准确</p><p><img src="/2021/01/13/Oracle%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90%E5%B7%A5%E5%85%B7/20210113093245-h2p2nlg-image.png" alt="image.png"></p><p>方法4：对plsql进行跟踪</p><p>sid和serial可以从v$session中获取</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">exec</span> dbms_system.set_sql_trace_in_session(sid，serial#,<span class="literal">true</span>);</span><br></pre></td></tr></table></figure><p><img src="/2021/01/13/Oracle%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90%E5%B7%A5%E5%85%B7/20210113095225-xvmw0r6-image.png" alt="image.png"></p><p>执行完毕存储过程后</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">exec</span> dbms_system.set_sql_trace_in_session(sid，serial#,<span class="literal">false</span>);</span><br></pre></td></tr></table></figure><p>‍</p><h3 id="启用跟踪"><a href="#启用跟踪" class="headerlink" title="启用跟踪"></a>启用跟踪</h3><p>【注意】这里仅修改当前会话设置</p><p>开启跟踪</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> session <span class="keyword">set</span> sql_trace <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">alter</span> session <span class="keyword">set</span> timed_statistics <span class="operator">=</span> <span class="literal">true</span>;  <span class="operator">/</span><span class="operator">/</span>同步打开计时信息(可选)</span><br></pre></td></tr></table></figure><p>然后执行sql语句</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> gd.iface_id,</span><br><span class="line">       gd.source_txn_id,</span><br><span class="line">       gd.po_header_id,</span><br><span class="line">       gd.po_line_id,</span><br><span class="line">       pll.line_location_id,</span><br><span class="line">       pll.receiving_routing_id,</span><br><span class="line">       pda.po_distribution_id,</span><br><span class="line">       gd.vendor_id,</span><br><span class="line">       gd.vendor_site_id,</span><br><span class="line">       gd.shipment_header_id,</span><br><span class="line">       gd.shipment_line_id,</span><br><span class="line">       gd.organization_id,</span><br><span class="line">       gd.quantity,</span><br><span class="line">       gd.item_id,</span><br><span class="line">       gd.lot_number,</span><br><span class="line">       gd.subinventory_code,</span><br><span class="line">       gd.locator_id,</span><br><span class="line">       gd.process_date,</span><br><span class="line">       pha.org_id,</span><br><span class="line">       gd.created_by</span><br><span class="line">  <span class="keyword">FROM</span> gj_bc_po_deliver_iface gd,</span><br><span class="line">       po_headers_all         pha,</span><br><span class="line">       po_lines_all           pla,</span><br><span class="line">       po_line_locations_all  pll,</span><br><span class="line">       po_distributions_all   pda</span><br><span class="line"> <span class="keyword">WHERE</span> gd.po_header_id <span class="operator">=</span> pha.po_header_id</span><br><span class="line">   <span class="keyword">AND</span> pha.po_header_id <span class="operator">=</span> pla.po_header_id</span><br><span class="line">   <span class="keyword">AND</span> pla.po_line_id <span class="operator">=</span> pll.po_line_id</span><br><span class="line">   <span class="keyword">AND</span> gd.po_line_id <span class="operator">=</span> pla.po_line_id</span><br><span class="line">   <span class="keyword">AND</span> gd.po_line_location_id <span class="operator">=</span> pll.line_location_id</span><br><span class="line">   <span class="keyword">AND</span> pll.line_location_id <span class="operator">=</span> pda.line_location_id</span><br><span class="line"> <span class="keyword">ORDER</span> <span class="keyword">BY</span> gd.po_header_id;</span><br></pre></td></tr></table></figure><p>关闭sql跟踪</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> session <span class="keyword">set</span> sql_trace <span class="operator">=</span> <span class="literal">false</span>;</span><br></pre></td></tr></table></figure><p>‍</p><h3 id="格式化跟踪文件"><a href="#格式化跟踪文件" class="headerlink" title="格式化跟踪文件"></a>格式化跟踪文件</h3><p>使用cp命令复制到根目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cp</span> /u01/test/db/12.1.0/admin/TEST_erp1/diag/rdbms/test/TEST/trace/TEST_ora_31641.trc /home/oratest</span><br></pre></td></tr></table></figure><p>格式化跟踪文件</p><p>使用tkprof命令，如果要查看执行计划，需要提供可以连接到数据库的账号密码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tkprof TEST_ora_31641.trc TEST_ora_31641.txt explain=apps/apps aggregate=<span class="built_in">yes</span> sys=no waits=<span class="built_in">yes</span> <span class="built_in">sort</span>=fchela</span><br></pre></td></tr></table></figure><p>‍</p><p>‍</p>]]></content>
      
      
      <categories>
          
          <category> Database </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Oracle </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Oracle数据库管理</title>
      <link href="/2021/01/12/Oracle%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AE%A1%E7%90%86/"/>
      <url>/2021/01/12/Oracle%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AE%A1%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h1 id="Oracle数据库管理"><a href="#Oracle数据库管理" class="headerlink" title="Oracle数据库管理"></a>Oracle数据库管理</h1><h2 id="版本适用范围"><a href="#版本适用范围" class="headerlink" title="版本适用范围"></a>版本适用范围</h2><p>Oracle 12.2</p><h2 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h2><p>通过setenv或者export设置ORACLE_HOME和ORACLE_SID</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">setenv ORACLE_SID orcl</span><br><span class="line">setenv ORACLE_HOME /u01/app/oracle/product/12.1.0/db_1</span><br><span class="line">setenv LD_LIBRARY_PATH $ ORACLE_HOME / lib：/ usr / lib：/ usr / dt / lib：/ usr / openwin / lib：/ usr / ccs / lib</span><br></pre></td></tr></table></figure><h2 id="连接到数据库"><a href="#连接到数据库" class="headerlink" title="连接到数据库"></a>连接到数据库</h2><p>1.无登陆的方式</p><blockquote><p>sqlplus &#x2F; nolog</p></blockquote><p>2.以最高权限登陆，操作系统认证的方式进行连接，不需要密码。</p><p>需要设置最高权限的用户组，并且切换到该用户下。多实例的情况下需要切换SID</p><blockquote><p>sqlplus &#x2F; as sysdba</p></blockquote><p>切换SID</p><blockquote><p>export ORACLE_SID&#x3D;[SID]</p></blockquote><p>3.切换连接</p><p>连接到sqlplus后，更改用户</p><blockquote><p>conn 账户&#x2F;密码</p></blockquote><p>切换到远程数据库</p><p>connect [用户名]@”[IP&#x2F;域名]:[端口]&#x2F;[数据库服务名]”</p><blockquote><p>connect apps@”10.38.1.140:1552&#x2F;DEV”</p></blockquote><p>或</p><blockquote><p>conn apps@”10.38.1.140:1552&#x2F;DEV”</p></blockquote><h2 id="查询数据库版本号"><a href="#查询数据库版本号" class="headerlink" title="查询数据库版本号"></a>查询数据库版本号</h2><blockquote><p>SELECT *<br>FROM product_component_version;</p></blockquote><p><img src="/2021/01/12/Oracle%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AE%A1%E7%90%86/20210112131119-2g9l1pb-image.png" alt="image.png"></p><h2 id="ORACLE参数"><a href="#ORACLE参数" class="headerlink" title="ORACLE参数"></a>ORACLE参数</h2><h3 id="初始化参数"><a href="#初始化参数" class="headerlink" title="初始化参数"></a>初始化参数</h3><h4 id="初始化参数文件"><a href="#初始化参数文件" class="headerlink" title="初始化参数文件"></a>初始化参数文件</h4><p>对于任意参数文件的修改，都需要重启数据库实例后才会生效。</p><p>参数文件存放于 <code>$ORACLE_HOME/dbs</code> 目录下，并且文件名为 <code>init[SID].ora</code></p><p>如：下图，其中initTest.ora是初始化的参数文件</p><p><img src="/2021/01/12/Oracle%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AE%A1%E7%90%86/20210112145658-adh2nkd-image.png" alt="image.png"></p><h4 id="查看初始化参数"><a href="#查看初始化参数" class="headerlink" title="查看初始化参数"></a>查看初始化参数</h4><blockquote><p>show parameter [参数选项]</p></blockquote><p>可用参数选项如下</p><p><img src="/2021/01/12/Oracle%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AE%A1%E7%90%86/20210112144807-ai95qe8-image.png" alt="image.png"></p><p>例如：查看重做日志表空间</p><blockquote><p>show parameter undo_tablespace</p></blockquote><h4 id="修改初始化参数"><a href="#修改初始化参数" class="headerlink" title="修改初始化参数"></a>修改初始化参数</h4><p>使用 <code>alter session set [参数] = [参数值]</code> 进行当前会话临时修改，不会影响其他会话，该参数也不会被保存。</p><p>如修改当前会话的日期格式</p><blockquote><p>ALTER SESSION SET NLS_DATE_FORMAT &#x3D; ‘yyyy-mm-dd hh24:mi:ss’;</p></blockquote><p>从动态性能视图中查询所有的初始化参数</p><blockquote><p>SELECT *<br>FROM v$parameter;</p></blockquote><p>结果如下：</p><p><img src="/2021/01/12/Oracle%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AE%A1%E7%90%86/20210112151055-20tri5o-image.png" alt="image.png"></p><blockquote><p>该视图的说明</p><p><a href="https://docs.oracle.com/en/database/oracle/oracle-database/12.2/refrn/V-PARAMETER.html#GUID-C86F3AB0-1191-447F-8EDF-4727D8693754">https://docs.oracle.com/en/database/oracle/oracle-database/12.2/refrn/V-PARAMETER.html#GUID-C86F3AB0-1191-447F-8EDF-4727D8693754</a></p></blockquote><h3 id="服务器参数"><a href="#服务器参数" class="headerlink" title="服务器参数"></a>服务器参数</h3><h4 id="服务器参数文件"><a href="#服务器参数文件" class="headerlink" title="服务器参数文件"></a>服务器参数文件</h4><ul><li>pfile：文本文件，可以直接修改</li><li>spfile：二进制保存，只能通过命令修改</li></ul><p>持久化存放在 <code>$ORACLE_HOME/dbs</code> 目录下，并且由初始化参数文件中的 <code>SPFILE</code> 参数指定，并且文件名为 <code>spfile[SID].ora</code> 或默认的 <code>spfile.ora</code></p><p><img src="/2021/01/12/Oracle%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AE%A1%E7%90%86/20210112151628-xx3flv3-image.png" alt="image.png"></p><p><strong>Oracle启动过程</strong></p><p>在Oracle启动实例时，会先启动进程加载参数文件，然后根据参数加载实例。</p><p>如果创建了spfile，则oracle会使用启动进程，并从spfile中加载数据库配置；如果没有则直接加载初始化参数文件。</p><p><strong>查询是否启用spfile</strong></p><p>如果查询不为空则启用spfile</p><blockquote><p>SELECT name,value FROM v$parameter WHERE name&#x3D;’spfile’;</p></blockquote><p><img src="/2021/01/12/Oracle%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AE%A1%E7%90%86/20210112152043-q309olb-image.png" alt="image.png"></p><h4 id="修改参数文件"><a href="#修改参数文件" class="headerlink" title="修改参数文件"></a>修改参数文件</h4><blockquote><p>Alter system set parameter&#x3D;value &lt;comment&#x3D;’text’&gt; <deffered> &lt;scope&#x3D;memory|spfile|both&gt; &lt;sid&#x3D;’sid|*’&gt;</deffered></p></blockquote><h4 id="查看参数文件"><a href="#查看参数文件" class="headerlink" title="查看参数文件"></a>查看参数文件</h4><p>如果value不为空，则启用服务器参数文件</p><p><img src="/2021/01/12/Oracle%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AE%A1%E7%90%86/20210112153043-5md8d7k-image.png" alt="image.png"></p><p>这个图可以发现，没有持久化服务器参数文件。</p><h2 id="常用视图"><a href="#常用视图" class="headerlink" title="常用视图"></a>常用视图</h2><h3 id="静态数据字典"><a href="#静态数据字典" class="headerlink" title="静态数据字典"></a>静态数据字典</h3><h4 id="权限控制"><a href="#权限控制" class="headerlink" title="权限控制"></a>权限控制</h4><ul><li>dba_[表名]：显示所有对象，仅允许有dba权限的用户访问</li><li>all_[表名]：显示所有用户下的对象，允许跨用户访问（如果有权限）</li><li>user_[表名]：仅显示当前用户下的对象</li><li>cdb_[表名]：如果启用多租户架构的容器数据库，则可以跨租户查看（如果有权限）</li></ul><h4 id="数据库对象"><a href="#数据库对象" class="headerlink" title="数据库对象"></a>数据库对象</h4><ul><li>ALL_ALL_TABLES：当前用户可以访问的所有表</li><li>ALL_ARGUMENTS：当前用户可以访问的所有函数和过程</li><li>ALL_CATALOG：当前用户可访问的表，聚类，视图，同义词和序列</li><li>ALL_COL_COMMENTS：当前用户下所有存在注释的字段</li><li>ALL_COLL_TYPES：当前用户下可访问的所有集合类型</li><li>ALL_CONS_COLUMNS：当前用户下可以访问的包含约束的字段</li><li>ALL_CONSTRAINTS：当前用户下可以访问的所有表中的约束</li><li>ALL_DB_LINKS：当前用户下可以访问的所有dblink</li><li>ALL_DEPENDENCIES：当前用户下所有的依赖关系，注意查询时 <code>referenced_link_name</code> 不要为空</li><li>ALL_ERRORS：查询当前用户下所有对象的异常信息，根据字段 <code>sequence</code> 排序</li><li>ALL_IND_COLUMNS：查看当前用户下包含索引的列</li><li>ALL_INDEXES：当前用户下全部索引</li><li>ALL_JOBS：当前用户下所有定时任务</li><li>ALL_OBJECTS：当前用户下所有对象</li><li>ALL_SOURCE：查看所有package中的函数定义</li></ul><h4 id="数据库文件"><a href="#数据库文件" class="headerlink" title="数据库文件"></a>数据库文件</h4><ul><li>ALL_DIRECTORIES：当前用户下可以访问的文件目录</li></ul><h3 id="动态性能视图"><a href="#动态性能视图" class="headerlink" title="动态性能视图"></a>动态性能视图</h3><p>动态性能视图以 <code>v$</code>开头</p><p>只有dba权限的用户能够访问，每一个性能视图都是由数据库实例都是动态生成的，无法进行更新。</p><ul><li><p>V$INSTANCE：当前数据库实例</p></li><li><p>V$SGA：查看SGA信息</p></li><li><p>V$SGAINFO：查看SGA详细信息</p></li><li><p>V$PARAMETER：查看初始化参数</p></li><li><p>V$VERSION：查看数据库版本</p></li><li><p>V$OPTION：查看数据库产品信息</p></li><li><p>V$SESSION：查看会话信息</p></li><li><p>V$PROCESS：查看进程信息</p></li><li><p>V$LOCK：查看占有锁的会话</p></li><li><p>V$TABLESPACE：表空间信息</p></li><li><p>v$parameter：查看所有参数信息</p></li><li><p>数据文件</p><ul><li>V$CONTROLFILE：控制文件路径</li><li>V$DATAFILE：数据文件路径</li><li>V$LOGFILE：日志文件路径</li></ul></li><li><p>SQL</p><ul><li>v$sql：执行过的sql详细信息</li><li>v$sqltext：sql文本，可以与上面的表关联</li><li>注意：并不是所有的 SQL 语句都可以从 V$SQL 中找到，因为 ORACLE 会动态地<br>更新共享池的信息，将一些过旧的 SQL 从共享池中删除</li></ul></li></ul><p>SQL 的解析的过程中，会把硬解析之后的 SQL 放在放在共享池中，如果我们清空了共享池，那么就需要重新做硬分析。</p><blockquote><p>alter system flush shared_pool;</p></blockquote><h5 id="查看sql性能"><a href="#查看sql性能" class="headerlink" title="查看sql性能"></a>查看sql性能</h5><blockquote><p>select * from v$sql ;</p><p>SELECT sql_text,<br>cpu_time &#x2F; (1000 * 1000) t_cpu,<br>TRUNC (elapsed_time &#x2F; (1000 * 1000)) t_elap,<br>(cpu_time &#x2F; elapsed_time &#x2F; (1000 * 1000)) * 100 pct<br>FROM v$sql<br>WHERE sql_text LIKE ‘SELECT OFFER_GROUP_ID_SEQ.NEXTVAL FROM DUA%’;</p></blockquote><p>对于已经执行完毕的会话，可以在 V$SQL 视图中找到它的执行时间和消耗的 CPU 时间，这些信息对我们分析一些性能上存在问题的 SQL 有用处。比如对比 SQL 消耗的 CPU 和执行时间，就可以大致知道 SQL 语句执行中是否有长时间的等待事件：</p><h2 id="官方参考手册"><a href="#官方参考手册" class="headerlink" title="官方参考手册"></a>官方参考手册</h2><p>1.Database Administrator’s Guide</p><blockquote><p>官方文档 <a href="https://docs.oracle.com/en/database/oracle/oracle-database/12.2/admin/getting-started-with-database-administration.html#GUID-9563BFC5-2A73-4271-9108-B4149018B8AD">https://docs.oracle.com/en/database/oracle/oracle-database/12.2/admin/getting-started-with-database-administration.html#GUID-9563BFC5-2A73-4271-9108-B4149018B8AD</a></p></blockquote><p>2.Database Reference</p><blockquote><p>官方文档 <a href="https://docs.oracle.com/en/database/oracle/oracle-database/12.2/refrn/basic-initialization-parameters.html#GUID-D75F1A77-47E2-4F35-B145-44B3A10ED85C">https://docs.oracle.com/en/database/oracle/oracle-database/12.2/refrn/basic-initialization-parameters.html#GUID-D75F1A77-47E2-4F35-B145-44B3A10ED85C</a></p></blockquote><p>‍</p><p>‍</p>]]></content>
      
      
      <categories>
          
          <category> Database </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Oracle </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Oracle技术分享 - DAY 3</title>
      <link href="/2021/01/08/Oracle%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%ABDAY3/"/>
      <url>/2021/01/08/Oracle%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%ABDAY3/</url>
      
        <content type="html"><![CDATA[<h1 id="Oracle技术分享-DAY-3"><a href="#Oracle技术分享-DAY-3" class="headerlink" title="Oracle技术分享 - DAY 3"></a>Oracle技术分享 - DAY 3</h1><h2 id="容器数据库"><a href="#容器数据库" class="headerlink" title="容器数据库"></a>容器数据库</h2><p>【注意】容器数据库（多租户结构）为19c新特性</p><p>查看容器数据库（PDB，pluggable database，即可插拔数据库）</p><blockquote><p>show pdbs;</p></blockquote><p>执行结果</p><p><img src="/2021/01/08/Oracle%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%ABDAY3/20210108104034-j1u0pxb-image.png" alt="image.png"></p><ul><li>PDB$SEED：种子数据库，是克隆的模版容器数据库</li></ul><p>启动PDB</p><blockquote><p>alter pluggable database pdb open;</p></blockquote><p>启动结果</p><p><img src="/2021/01/08/Oracle%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%ABDAY3/20210108104323-mlrgqjo-image.png" alt="image.png"></p><p>进入容器数据库</p><blockquote><p>alter session set container&#x3D;pdb;</p></blockquote><p>查看当前容器</p><blockquote><p>show con_name</p></blockquote><p>结果：</p><p><img src="/2021/01/08/Oracle%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%ABDAY3/20210108104524-bxbwmt1-image.png" alt="image.png"></p><p>切换到容器数据库，查看示例数据库</p><p><img src="/2021/01/08/Oracle%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%ABDAY3/20210108104912-ec6r1n5-image.png" alt="image.png"></p><h2 id="SQL优化"><a href="#SQL优化" class="headerlink" title="SQL优化"></a>SQL优化</h2><h3 id="SQL执行顺序"><a href="#SQL执行顺序" class="headerlink" title="SQL执行顺序"></a>SQL执行顺序</h3><p>示例sql</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    employee_id,</span><br><span class="line">    last_name,</span><br><span class="line">    first_name,</span><br><span class="line">    department_name</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    employees    e,</span><br><span class="line">    departments  d</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">        e.department_id <span class="operator">=</span> d.department_id</span><br><span class="line">    <span class="keyword">AND</span> last_name <span class="keyword">LIKE</span> <span class="string">&#x27;%T%&#x27;</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span></span><br><span class="line">    last_name;</span><br></pre></td></tr></table></figure><p>from -&gt; where -&gt; select -&gt; order by</p><p>从结果集中筛选结果，并选取结果列，最后排序</p><h2 id="SQL解释计划"><a href="#SQL解释计划" class="headerlink" title="SQL解释计划"></a>SQL解释计划</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>读取原则：从上往下读，从里往外读，靠上边的和靠里边的先执行</p><ul><li>rowid：oracle生成的物理地址</li><li>FULL SCAN：全扫描</li><li>UNIQUE SCAN：索引扫描（索引都是有序存放，需要消耗存储空间，保存的是不同的rowid）</li></ul><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>【注意】从sql developer上看可能显示会好一些</p><p>sql developer的解释计划示例</p><p><img src="/2021/01/08/Oracle%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%ABDAY3/20210108113704-iwnd7y5-image.png" alt="image.png"></p><p>plsql developer的解释计划示例</p><p><img src="/2021/01/08/Oracle%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%ABDAY3/20210108113428-blv9yjj-image.png" alt="image.png"></p><ul><li><p>Rows：解释计划结果集预估行数</p></li><li><p>Cost：解释计划步骤的系统开销</p></li><li><p>ORACLE多表关联查询的方式</p><ul><li>NESTED  LOOPS ：嵌套循环连接，CBO下的优化器，oracle会自动评估外层循环的基表，即自动评估左连接的基表</li><li>HASH JOIN：为id生成hash值，把hash值相同的数据关联（10g以后），适合大表之间的连接</li><li>Sorted Merge：排序后两表合并</li></ul></li></ul><h5 id="STEP1-保证信息一致"><a href="#STEP1-保证信息一致" class="headerlink" title="STEP1 保证信息一致"></a>STEP1 保证信息一致</h5><p><strong>要确保解释计划出来的数据，与数据库中实际的数据一致。</strong></p><p>查看表的统计信息</p><blockquote><p>SELECT table_name, num_rows, blocks FROM user_tables;</p></blockquote><p>oracle每日晚上22：00 - 凌晨2：00自动收集，oracle的执行计划会根据收集的统计信息来评估解释计划。</p><p>对于新建的数据表，由于没有收集统计信息，在解释计划中的 Rows 可能跟实际新建的表不符合，此时要主动收集一下数据库的信息。</p><p>【注意】统计信息的收集尽量不要与业务时间冲突，非常消耗性能。</p><p><img src="/2021/01/08/Oracle%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%ABDAY3/20210108135557-7i7j601-image.png" alt="image.png"></p><p>收集统计信息</p><blockquote><p>exec dbms_stats.gather_table_status(‘HR’,’Employees’);</p></blockquote><p>【注意】如果由于统计不准，导致选错执行计划，会导致查询变得非常缓慢。</p><p>【注意】12c以后：执行sql的时候有一次改变执行计划的可能性，可能会把嵌套循环连接变成 Hash Join。在执行前会扫描索引并收集一次信息，根据查询的结果和解释计划进行比较，如果差异较大则会改变执行计划。</p><h5 id="STEP2-优化工具"><a href="#STEP2-优化工具" class="headerlink" title="STEP2 优化工具"></a>STEP2 优化工具</h5><h6 id="概览"><a href="#概览" class="headerlink" title="概览"></a>概览</h6><ul><li><p>ORACLE STA优化脚本</p><ul><li>语句改写</li><li>收集表信息</li><li>修改执行计划</li><li>构建分区表</li><li>构建索引</li><li>构建物化视图</li></ul></li><li><p>AWR报告</p></li><li><p>SQL Developer</p></li></ul><h6 id="ORACLE-STA"><a href="#ORACLE-STA" class="headerlink" title="ORACLE STA"></a>ORACLE STA</h6><p>查找sql的id，该查询会从内存中获取近期执行的sql语句</p><blockquote><p>SELECT * FROM v$sql WHERE sql_test LIKE ‘%%’;</p></blockquote><p>结果如下：</p><p><img src="/2021/01/08/Oracle%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%ABDAY3/20210108144306-bu3f899-image.png" alt="image.png"></p><p>使用STA工具优化</p><blockquote><p>@?&#x2F;rdbms&#x2F;admin&#x2F;sqltrpt.sql</p></blockquote><p>结果如下，会显示近期15条最消耗性能的sql</p><p><img src="/2021/01/08/Oracle%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%ABDAY3/20210108144612-gk5uivt-image.png" alt="image.png"></p><p>此时输入sql的id，则可以生成优化建议，并且可以看到改正后的执行计划</p><p>#TODO# 建议实际操作一下</p><h6 id="SQL-Developer"><a href="#SQL-Developer" class="headerlink" title="SQL Developer"></a>SQL Developer</h6><p>1.自动诊断</p><p>路径：查看 -&gt; DBA -&gt; 性能 -&gt; 自动数据库诊断监视器</p><p>每小时会自动生成性能诊断报告</p><p><img src="/2021/01/08/Oracle%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%ABDAY3/20210108145531-j8qynfz-image.png" alt="image.png"></p><p>2.实时监控</p><p>路径：查看 -&gt; DBA -&gt; 优化 -&gt; 实时SQL监视</p><p><img src="/2021/01/08/Oracle%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%ABDAY3/20210108150004-b9ymlhy-image.png" alt="image.png"></p><h6 id="AWR报告部分"><a href="#AWR报告部分" class="headerlink" title="AWR报告部分"></a>AWR报告部分</h6><p>找到 <code>ADDM Reports</code></p><h6 id="Cloud-Control"><a href="#Cloud-Control" class="headerlink" title="Cloud Control"></a>Cloud Control</h6><p><strong>Oracle Enterprise Manager Cloud Control</strong></p><p>可视化的oracle数据库管理系统，见虚拟机2</p><p>‍</p><h2 id="Oracle性能分析"><a href="#Oracle性能分析" class="headerlink" title="Oracle性能分析"></a>Oracle性能分析</h2><h3 id="AWR报告"><a href="#AWR报告" class="headerlink" title="AWR报告"></a>AWR报告</h3><p>通过SQL Developer可视化生成报告；抑或是采用命令方式生成。</p><p><img src="/2021/01/08/Oracle%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%ABDAY3/20210107144303-q5mxlcl-image.png" alt="image.png"></p><p>命令方式</p><blockquote><p>@?&#x2F;rdbms&#x2F;admin&#x2F;awrrpt.sql</p></blockquote><p>‍</p><p>简单的性能分析</p><ul><li><p>Report Summary</p><ul><li>确定系统类型：分析&#x2F;交易 类型</li><li>Redo Size （Per Second）：Redo量小，可能是分析类型的系统；如果大的话可能是交易类型的系统</li><li>Logical read（从内存里取数称为逻辑度）：如果量大，则可能为大量的select查询</li><li>Transactions：每秒事务数</li></ul></li><li><p>SQL ordered by Elapsed Time</p><ul><li>Elapsed Time：在报告生成时间内执行总时间，等于执行次数 * 每秒执行时间</li><li>Executions：执行次数</li><li>Elapsed Time per Exec（s）：每秒执行时间</li><li>SQL Id：SQL查询id，不同的库是一样的。生成方式：把SQL转换成ASCII码，然后针对ASCII码生成hash码。</li></ul></li><li><p>SQL ordered by Gets</p><ul><li>逻辑读</li><li>Buffer Gets：逻辑读总时间</li><li>Executions：执行次数</li><li>Gets per Exec：单次逻辑读时间</li></ul></li><li><p>SQL ordered by Reads</p><ul><li>物理读</li></ul></li><li><p>Top 5 Evnets</p><ul><li>最消耗性能的5个事件</li></ul></li></ul><h3 id="通过SQL-Developer优化"><a href="#通过SQL-Developer优化" class="headerlink" title="通过SQL Developer优化"></a>通过SQL Developer优化</h3><p>查看实时SQL监视</p><p>路径：查看 -&gt; DBA</p><p><img src="/2021/01/08/Oracle%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%ABDAY3/20210107150651-e24lbrr-image.png" alt="image.png"></p><p>查看SQL顶级报告</p><p>路径：查看 -&gt; 报告 -&gt; 数据字典报告 -&gt; 数据库管理 -&gt; 顶级SQL</p><p><img src="/2021/01/08/Oracle%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%ABDAY3/20210107151223-xwmrbzy-image.png" alt="image.png"></p><h3 id="SQL-优化手册"><a href="#SQL-优化手册" class="headerlink" title="SQL 优化手册"></a>SQL 优化手册</h3><p><strong>SQL Tuning Guide</strong></p><p><strong>Database Performance Tuning Guide</strong></p><p><img src="/2021/01/08/Oracle%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%ABDAY3/20210107151748-0hv2l22-image.png" alt="image.png"></p><ul><li><p>Shared Pool Check，即软解析，存放常用解析后的结果</p></li><li><p>Soft Parse，即软解析，如果软解析过大，可能会出现在 <code>Shared Pool Check</code> 中出现资源争抢，超出资源限制的请求将进入队列等待。</p></li><li><p>Hard Parse，即硬解析，语句首次执行，消耗CPU</p><ul><li>OLAP（分析类型事务），实现硬解析，不要有软解析</li><li>OLTP（处理类型事务），尽可能多地实现软解析</li><li>尽可能在写SQL的时候，保证大小写，因为SQL语句是通过ASCII码生成hashCode来判断是否实现软解析，而大小写的ASCII码不同，会导致硬解析。</li></ul></li><li><p>Optimization，即优化器，当sql进入硬解析的时候，优化器会判断是走索引还是全表扫描。</p><ul><li><p>RBO，即rule-based optimizer，指基于规则的优化</p></li><li><p>CBO，即cost-based optimizer，指基于开销的优化，需要考虑诸多因素的成本，给出最符合条件的sql结果（10g以后，CBO为默认优化模式）</p><ul><li>CPU</li><li>IO</li><li>内存</li></ul></li></ul></li></ul><p>查看优化器</p><blockquote><p>show parameter optimizer</p></blockquote><p><img src="/2021/01/08/Oracle%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%ABDAY3/20210108103708-6hwelcf-image.png" alt="image.png"></p><p>修改优化器模式</p><blockquote><p>alter system set optimizer_mode &#x3D; ‘rule’</p></blockquote><p>‍</p><h4 id="软解析与硬解析实例"><a href="#软解析与硬解析实例" class="headerlink" title="软解析与硬解析实例"></a>软解析与硬解析实例</h4><p>实例1：</p><blockquote><p>select count(*) from test1;  –硬解析</p><p>select count(*) from TEST1;  –修改表名再次执行，也是硬解析</p></blockquote><p>实例2：</p><p>使用绑定变量，则多次执行也会被判断为软解析</p><blockquote><p>select count(*) from TEST1 where id&#x3D; :x ;  –使用绑定变量</p></blockquote><p>实例3：</p><p>分析型系统，少有软解析。<strong>如果是分析型数据检索大量数据，尽量全表扫描，不要走索引；如果是检索少量数据，走索引速度会更快。</strong></p><p>分析类型的数据是倾斜的，查找的数据是不定的，不均匀的。如果采用绑定变量的方式，实现软解析，那么面对倾斜数据时，根据软解析复用执行计划，针对应该走索引和全表扫描的查询，都执行同样的执行计划显然是不合理的。</p><p>降低分析型系统（如数据仓库等）响应时间的方法：</p><ul><li><p>使物理读变为逻辑读</p></li><li><p>使用更好的压缩技术</p></li><li><p>使用更好的并行查询技术，使用大量的进程并行查询</p></li><li><p>更换硬盘，提高IO速度</p></li><li><p>更好的扫描算法</p></li><li><p>Oracle In-Memory Database内存数据库会自动删除索引，更适合于分析类型。</p></li></ul><p>#TODO# 实践的方法？如：AWR报告分析、SQL优化技巧实战</p>]]></content>
      
      
      <categories>
          
          <category> Database </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Oracle </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Oracle技术分享 - DAY 2</title>
      <link href="/2021/01/07/Oracle%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%ABDAY2/"/>
      <url>/2021/01/07/Oracle%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%ABDAY2/</url>
      
        <content type="html"><![CDATA[<h1 id="Oracle技术分享-DAY-2"><a href="#Oracle技术分享-DAY-2" class="headerlink" title="Oracle技术分享 - DAY 2"></a>Oracle技术分享 - DAY 2</h1><h2 id="Oracle-Data-Guard"><a href="#Oracle-Data-Guard" class="headerlink" title="Oracle Data Guard"></a>Oracle Data Guard</h2><p>主从库数据同步技术</p><ul><li>同步模式：产生阻塞，事务处理效率可能会变低</li><li>异步模式：当主库出现问题，可能产生数据丢失</li></ul><h3 id="保护模式"><a href="#保护模式" class="headerlink" title="保护模式"></a>保护模式</h3><ol><li>最大保护模式（同步）</li><li>最大性能模式（异步）</li><li>最大可用模式（当网络出问题时切换为最大性能模式）</li></ol><h3 id="ADG读写分离"><a href="#ADG读写分离" class="headerlink" title="ADG读写分离"></a>ADG读写分离</h3><p>ADG，即Active Data Guard，属于Oracle选件功能，用于保持Master和Slave库的数据同步。</p><blockquote><p>数据库的四种状态</p><ul><li>close：数据库处于关闭状态</li><li>nomount：仅读取spfile参数文件</li><li>mount：进一步读取ctl结尾的控制文件</li><li>open：读取到了dbf数据文件</li></ul></blockquote><p>在ADG状态下的Slave库，处于 <code>open</code> 以及 <code>read only</code> 状态</p><p>在DG状态下的Slave库，处于 <code>mount</code> 状态，当主库发生问题时，备库才可以读写</p><p>查看当前数据库是主库还是从库</p><blockquote><p>select database_role from v$database</p></blockquote><p><code>Primary</code> 表示主库，<code>StandBy</code> 表示备库。</p><p>‍</p><h2 id="Oracle-RAC"><a href="#Oracle-RAC" class="headerlink" title="Oracle RAC"></a>Oracle RAC</h2><p>Oracle 数据库集群（10g以后）</p><h3 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h3><ul><li>ASM：即Auto Storage Management，自动存储管理</li><li>Oracle Voting Disk：集群决策磁盘，用于节点发生故障时的决策</li><li>Oracle OCR：共享存储</li><li>Clusterware</li><li>服务间可通信（宽带尽可能快），允许心跳连接</li></ul><h3 id="数据一致性问题"><a href="#数据一致性问题" class="headerlink" title="数据一致性问题"></a>数据一致性问题</h3><p>RAC架构下，一份数据所有集群共享。</p><p>集群容易产生数据一致性问题：</p><blockquote><p>Instance A 修改数据为50</p><p>Instance B 修改数据为100</p><p>共享存储原数据为 20，此时需要统一的数据访问控制</p></blockquote><p>RAC下数据自动划分区域，把多个数据库合成一个逻辑上的整体。多个数据库实例之间通过心跳连接相互访问。</p><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><p>见实验环境虚拟机2</p><p>检索rac上的数据文件，只有通过 <code>asmcmd</code> 命令才能进入rac数据文件目录。</p><p>目录下存放oracle的关键文件，如数据文件、日志文件、控制文件等。</p><blockquote><p>select file_name from dba_data_files;</p><p>asmcmd</p></blockquote><p>除了 <code>asmcmd</code> 外，提供sqlplus的连接方式</p><blockquote><p>sqlplus &#x2F; as sysasm</p></blockquote><p>其他</p><ul><li><p>RAC可以保证高可用性</p></li><li><p>不会额外消耗IO，通过心跳连接发送不同实例的数据块（Cache Fusion技术）</p><ul><li>当大量Cache Fusion产生时（多次跨实例访问数据块），会导致单个实例性能下降</li><li>如果应用允许分库分表，使用微服务架构，能够带来更高的性能。即业务拆分</li></ul></li><li><p>需要在rac上运行应用进行测试，保证性能不下降</p></li><li><p>通过Grd提供统一的权限管理机制，所有权限请求都是串行执行。</p></li></ul><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>数据库排名参考</p><blockquote><p><a href="https://db-engines.com/en/ranking">https://db-engines.com/en/ranking</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Database </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Oracle </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Oracle技术分享 - DAY 1</title>
      <link href="/2021/01/06/Oracle%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%ABDAY1/"/>
      <url>/2021/01/06/Oracle%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%ABDAY1/</url>
      
        <content type="html"><![CDATA[<h1 id="Oracle技术分享-DAY-1"><a href="#Oracle技术分享-DAY-1" class="headerlink" title="Oracle技术分享 - DAY 1"></a>Oracle技术分享 - DAY 1</h1><p><strong>数据库版本 Oracle 19C</strong></p><h2 id="工具相关"><a href="#工具相关" class="headerlink" title="工具相关"></a>工具相关</h2><ul><li>Enterprise Manager Cloud Control （B&#x2F;S架构）</li><li>SQL Developer</li><li>SQL Plus</li></ul><h2 id="网页相关"><a href="#网页相关" class="headerlink" title="网页相关"></a>网页相关</h2><ul><li>文档中心：docs.oracle.com</li><li>metalink帮助中心：support.oracle.com</li></ul><h2 id="手册相关"><a href="#手册相关" class="headerlink" title="手册相关"></a>手册相关</h2><blockquote><p>以下手册名字，均来自 docs.oracle.com</p></blockquote><p>运维</p><ul><li><code>Database Administrator&#39;s Guide</code> 数据库管理手册</li><li><code>Database Reference</code> 数据库状态相关信息</li></ul><p>开发</p><ul><li><code>Database Development Guide</code>  数据库开发参考手册（重要）</li><li><code>SQL Language Reference</code> SQL语言参考手册</li><li><code>Database PL/SQL Packages and Types Reference</code> PLSQL程序包</li><li><code>Oracle Database Data Warehousing Guide</code> 数据仓库参考手册</li><li><code>Database PL/SQL Packages and Types Reference</code> Oracle标准PLSQL程序包参考手册</li></ul><p>数据库原理</p><ul><li><code>Database Concepts</code></li></ul><p>性能优化</p><ul><li><code>Database Performance Tuning Guide</code> 数据库性能优化指南</li><li><code>SQL Tuning Guide</code> SQL调优指南</li></ul><h3 id="Database-Reference"><a href="#Database-Reference" class="headerlink" title="Database Reference"></a>Database Reference</h3><h4 id="数据字典"><a href="#数据字典" class="headerlink" title="数据字典"></a>数据字典</h4><p><strong>查询结果来自于磁盘</strong></p><ul><li><p>cdb_[table_name] (多租户环境下)</p></li><li><p>dba_[table_name]</p></li><li><p>all_[table_name]</p></li><li><p>user_[table_name]</p></li></ul><h4 id="动态性能"><a href="#动态性能" class="headerlink" title="动态性能"></a>动态性能</h4><p><strong>查询结果来自于内存</strong></p><ul><li>v$[table_name]</li></ul><h4 id="初始化参数"><a href="#初始化参数" class="headerlink" title="初始化参数"></a>初始化参数</h4><h2 id="创建数据库实例"><a href="#创建数据库实例" class="headerlink" title="创建数据库实例"></a>创建数据库实例</h2><h4 id="设置环境变量"><a href="#设置环境变量" class="headerlink" title="设置环境变量"></a>设置环境变量</h4><p>执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi .bash_profile</span><br></pre></td></tr></table></figure><p>添加Oracle环境变量，并保存退出</p><p>【注意】可以使用 <code>shift + 双击z键</code> ，与<code>:wq</code> 等效</p><p><img src="/2021/01/06/Oracle%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%ABDAY1/20210106143902-t2tovtv-image.png" alt="Oracle技术分享DAY1.png"></p><p>再次执行命令，使环境变量生效</p><p>【注意】使用 <code>. + 空格</code> 等同于 <code>source</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">. ./.bash_profile</span><br></pre></td></tr></table></figure><p>最终结果如下图所示</p><p><img src="/2021/01/06/Oracle%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%ABDAY1/20210106144346-qkbwbsa-image.png" alt="Oracle技术分享DAY1.png"></p><h4 id="通过图形化界面创建"><a href="#通过图形化界面创建" class="headerlink" title="通过图形化界面创建"></a>通过图形化界面创建</h4><p>【注意】以下没有特别说明，均适用默认配置</p><p>选中 <code>创建数据库</code> 并点击下一步</p><p>选中 <code>高级配置</code></p><p>来到如下图界面</p><p><img src="/2021/01/06/Oracle%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%ABDAY1/20210106145800-ot0aj04-image.png" alt="Oracle技术分享DAY1.png"></p><ul><li>一般用途或事务处理：指OLTP类型的业务，适用于高并发，事务量大的情况。</li><li>数据仓库：对于分析、读取数据需求量大的情况，如运行报表等。</li></ul><p>选中<code>定制数据库</code>，并点击下一步</p><p><img src="/2021/01/06/Oracle%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%ABDAY1/20210106150452-3gta6ry-image.png" alt="Oracle技术分享DAY1.png"></p><ul><li>SID：数据库唯一标示</li><li>创建为容器数据库：12C以后的多租户的新特性</li></ul><p>设置默认端口和监听</p><p><img src="/2021/01/06/Oracle%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%ABDAY1/20210106152015-3vvywa8-image.png" alt="Oracle技术分享DAY1.png"></p><p>最终结果如下</p><p><img src="/2021/01/06/Oracle%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%ABDAY1/20210106152942-r9guqf8-image.png" alt="Oracle技术分享DAY1.png"></p><h2 id="Oracle-内存数据库"><a href="#Oracle-内存数据库" class="headerlink" title="Oracle 内存数据库"></a>Oracle 内存数据库</h2><p><strong>Oracle Database In-Memory</strong></p><blockquote><p>在线实验室 <a href="https://apexapps.oracle.com/pls/apex/dbpm/r/livelabs/home">https://apexapps.oracle.com/pls/apex/dbpm/r/livelabs/home</a></p></blockquote><p>选择DBA</p><p><img src="/2021/01/06/Oracle%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%ABDAY1/20210109114722-sjc7bh9-image.png" alt="Oracle技术分享DAY1.png"></p><p>选择内存数据库</p><p><img src="/2021/01/06/Oracle%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%ABDAY1/20210109114803-mnskv49-image.png" alt="Oracle技术分享DAY1.png"></p><p>点击 Reserve WorkShop</p><p><img src="/2021/01/06/Oracle%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%ABDAY1/20210109114846-rdn34od-image.png" alt="Oracle技术分享DAY1.png"></p><p>启动puttyGen生成public key，然后复制到oracle表单中</p><p><img src="/2021/01/06/Oracle%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%ABDAY1/20210109115033-8hloqxd-image.png" alt="Oracle技术分享DAY1.png"></p><p>等待环境加载</p><p><img src="/2021/01/06/Oracle%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%ABDAY1/20210109115131-zb7n35l-image.png" alt="Oracle技术分享DAY1.png"></p><p>点击此处进入，获取环境信息</p><p><img src="/2021/01/06/Oracle%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%ABDAY1/20210109115408-mn1dvwu-image.png" alt="Oracle技术分享DAY1.png"></p><p>环境信息如下，并把ip和username填入xshell</p><p><img src="/2021/01/06/Oracle%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%ABDAY1/20210109120200-3r2tskq-image.png" alt="Oracle技术分享DAY1.png"></p><p>然后在xshell中导入密钥，注意私钥必须为 <code>OpenSSH</code> 格式</p><p><img src="/2021/01/06/Oracle%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%ABDAY1/20210109120249-7pjpxxm-image.png" alt="Oracle技术分享DAY1.png"></p><p>‍</p><h2 id="Oracle实验"><a href="#Oracle实验" class="headerlink" title="Oracle实验"></a>Oracle实验</h2><p>启动数据库实例，并查看实例状态</p><blockquote><p>select status from v$instance;</p></blockquote><p><img src="/2021/01/06/Oracle%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%ABDAY1/20210107102412-3iqjzmy-image.png" alt="Oracle技术分享DAY1.png"></p><p>查看监听状态 &amp; 启动监听</p><blockquote><p>lsnrctl status</p><p>lsnrctl start</p></blockquote><p>切换Oracle SID</p><blockquote><p>export ORACLE_SID&#x3D;TEST</p></blockquote><p>无需用户名&amp;密码进入数据库</p><p>当使用Oracle用户组和Oracle用户安装数据库时，以最高系统权限进入数据库（操作系统权限验证）</p><blockquote><p>sqlplus &#x2F; as sysdba</p></blockquote><h3 id="使用SQL-Developer管理插件"><a href="#使用SQL-Developer管理插件" class="headerlink" title="使用SQL Developer管理插件"></a>使用SQL Developer管理插件</h3><h4 id="查看数据库状态"><a href="#查看数据库状态" class="headerlink" title="查看数据库状态"></a>查看数据库状态</h4><p>路径：查看 -&gt; DBA</p><p><img src="/2021/01/06/Oracle%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%ABDAY1/20210107102551-w1krc1d-image.png" alt="Oracle技术分享DAY1.png"></p><p>左下角会出现新的页签，点击绿色加号添加数据库</p><p><img src="/2021/01/06/Oracle%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%ABDAY1/20210107102641-mftkw1d-image.png" alt="Oracle技术分享DAY1.png"></p><p>查看数据库状态</p><p><img src="/2021/01/06/Oracle%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%ABDAY1/20210107102923-7a5rfrk-image.png" alt="Oracle技术分享DAY1.png"></p><p>创建表空间</p><p><img src="/2021/01/06/Oracle%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%ABDAY1/20210107110233-km60pzn-image.png" alt="Oracle技术分享DAY1.png"></p><h4 id="查看数据库报告"><a href="#查看数据库报告" class="headerlink" title="查看数据库报告"></a>查看数据库报告</h4><p>路径：查看 -&gt; 报告</p><p><img src="/2021/01/06/Oracle%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%ABDAY1/20210107103057-tp3zaj0-image.png" alt="Oracle技术分享DAY1.png"></p><p>以查看用户锁为例</p><p>路径：数据字典报告 -&gt; 数据库管理 -&gt; 锁定 -&gt; 按用户统计的锁</p><p><img src="/2021/01/06/Oracle%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%ABDAY1/20210107103337-twtqz63-image.png" alt="Oracle技术分享DAY1.png"></p><h3 id="数据库文件"><a href="#数据库文件" class="headerlink" title="数据库文件"></a>数据库文件</h3><p>查看数据库文件，进入目录</p><blockquote><p>&#x2F;u01&#x2F;app&#x2F;oracle&#x2F;oradata&#x2F;</p><p>ls</p></blockquote><p>测试环境如下图：</p><p><img src="/2021/01/06/Oracle%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%ABDAY1/20210107104008-bi1e9ai-image.png" alt="Oracle技术分享DAY1.png"></p><h5 id="控制文件"><a href="#控制文件" class="headerlink" title="控制文件"></a>控制文件</h5><p><code>control.ctl</code></p><p>不同的环境，可能有多个控制文件，采用多路复用技术</p><p><img src="/2021/01/06/Oracle%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%ABDAY1/20210107104259-nidd29e-image.png" alt="Oracle技术分享DAY1.png"></p><h5 id="重做日志"><a href="#重做日志" class="headerlink" title="重做日志"></a>重做日志</h5><p><code>redo.log</code></p><p>多组日志文件日志内容都相同，循环复入，写满切换。</p><p><img src="/2021/01/06/Oracle%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%ABDAY1/20210107104919-rw55dvz-image.png" alt="Oracle技术分享DAY1.png"></p><h5 id="数据文件"><a href="#数据文件" class="headerlink" title="数据文件"></a>数据文件</h5><p>以 <code>dbf</code> 结尾</p><p><img src="/2021/01/06/Oracle%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%ABDAY1/20210107105030-a0nllmj-image.png" alt="Oracle技术分享DAY1.png"></p><blockquote><p>逻辑结构</p><p>块 -&gt; 区 -&gt; 段 -&gt; 表空间 -&gt; 数据库</p><p>段：存放数据的对象，如表段、索引段等</p><p>块：Oracle数据库存储的最小单元，默认大小为8k</p></blockquote><h5 id="参数文件"><a href="#参数文件" class="headerlink" title="参数文件"></a>参数文件</h5><p>进入Oracle安装目录下的 <code>dbs</code> 目录</p><p>以实验环境为例</p><blockquote><p>cd &#x2F;u01&#x2F;app&#x2F;oracle&#x2F;product&#x2F;19.3.0&#x2F;dbhome_1&#x2F;dbs</p></blockquote><p>参数文件如下图</p><p><img src="/2021/01/06/Oracle%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%ABDAY1/20210107110644-s4amgnn-image.png" alt="Oracle技术分享DAY1.png"></p><p>在Oracle启动实例时，会先启动进程加载参数文件，然后根据参数加载实例</p><p>【注意】服务器参数文件必须为spfile[SID].ora，其中SID必须一致</p><p>查看数据库实例，可以根据下划线结尾，获取SID</p><blockquote><p>ps -ef | grep smon</p></blockquote><p><img src="/2021/01/06/Oracle%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%ABDAY1/20210107111220-nb8sesk-image.png" alt="Oracle技术分享DAY1.png"></p><p>此时可以知道，SID&#x3D;TEST</p><p><strong>服务名和SID的区别？</strong></p><p>SID是数据库实例的唯一识别号。如果是ORACLE RAC下，多个实例就会有多个SID。而SERVER_NAME是数据库实例的名称，用于标示外部系统，我数据库叫”SERVICE_NAME”。对于外部系统而言，既可以用SID进行连接，也可以用SERVER_NAME进行连接。同一个实例下，SID和SERVER_NAME是唯一对应的。</p><h3 id="停库指令"><a href="#停库指令" class="headerlink" title="停库指令"></a>停库指令</h3><p>1.立即停止</p><blockquote><p>shutdown immediate</p></blockquote><p>2.内存断电停止</p><blockquote><p>shutdown abort</p></blockquote><p>这种停止方式会导致数据不一致。</p><p>内存数据库、SQL调优</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>1.Oracle学习工具</p><p><img src="/2021/01/06/Oracle%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%ABDAY1/20210109120622-as3cfhr-image.png" alt="Oracle技术分享DAY1.png"></p><p>2.Oracle体系结构</p><p><img src="/2021/01/06/Oracle%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%ABDAY1/20210109120652-9li7bxf-image.png" alt="Oracle技术分享DAY1.png"></p><p>‍</p>]]></content>
      
      
      <categories>
          
          <category> Database </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Oracle </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java 多线程断点续传</title>
      <link href="/2020/11/28/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E6%96%AD%E7%82%B9%E7%BB%AD%E4%BC%A0/"/>
      <url>/2020/11/28/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E6%96%AD%E7%82%B9%E7%BB%AD%E4%BC%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="多线程断点续传"><a href="#多线程断点续传" class="headerlink" title="多线程断点续传"></a>多线程断点续传</h1><p>‍</p><h2 id="步骤拆分"><a href="#步骤拆分" class="headerlink" title="步骤拆分"></a>步骤拆分</h2><p>1.下载文件</p><p>2.断点续传</p><p>3.多线程下载</p><p>4.多线程断点续传</p><p>‍</p><h2 id="下载文件"><a href="#下载文件" class="headerlink" title="下载文件"></a>下载文件</h2><h3 id="断点续传下载"><a href="#断点续传下载" class="headerlink" title="断点续传下载"></a>断点续传下载</h3><h4 id="步骤分解"><a href="#步骤分解" class="headerlink" title="步骤分解"></a>步骤分解</h4><ol><li><p>推荐至少两个线程，当然也可以一个HttpURLConnection打开后，获取完文件长度，再关闭；然后再打开，然后设置文件数据范围</p><ol><li>主线程：HttpURLConnection.getContentLengthLong() 获取文件大小</li><li>子线程：HttpURLConnection.setRequestProperty(“Range”, “bytes&#x3D;” + filePos + “-“ + fileEnd) 获取文件数据范围</li></ol></li><li><p>File.length()与HttpURLConnection.getContentLengthLong()比较文件大小</p></li><li><p>RandomAccessFile写入文件（如下）</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">RandomAccessFile</span> <span class="variable">raf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RandomAccessFile</span>(fileDir, <span class="string">&quot;rws&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 搜索续传的起始位置</span></span><br><span class="line">        raf.seek(filePos);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 文件写入</span></span><br><span class="line">        <span class="type">byte</span>[] buffer = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="type">int</span> length;</span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> connection.getInputStream();</span><br><span class="line">        <span class="keyword">while</span> ((length = is.read(buffer)) != -<span class="number">1</span>) &#123;</span><br><span class="line">            raf.write(buffer, <span class="number">0</span>, length);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        raf.close();</span><br></pre></td></tr></table></figure><p>‍</p><h4 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.playgroud;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.net.HttpURLConnection;</span><br><span class="line"><span class="keyword">import</span> java.net.MalformedURLException;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 单线程下的断点续传</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DownloadTest</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 下载的URL</span></span><br><span class="line">    <span class="keyword">private</span> String url;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 文件下载路径</span></span><br><span class="line">    <span class="keyword">private</span> String storePath;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 文件名</span></span><br><span class="line">    <span class="keyword">private</span> String fileName;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 文件下载的容量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">long</span> <span class="variable">fileReqLength</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">DownloadTest</span><span class="params">(String url, String storePath)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.url = url;</span><br><span class="line">        <span class="built_in">this</span>.storePath = storePath;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// TODO 考虑获取不到文件名的情况</span></span><br><span class="line">        <span class="comment">// 获取文件名</span></span><br><span class="line">        <span class="built_in">this</span>.fileName = url.substring(url.lastIndexOf(<span class="string">&#x27;/&#x27;</span>) + <span class="number">1</span>, url</span><br><span class="line">                .contains(<span class="string">&quot;?&quot;</span>) ? url.lastIndexOf(<span class="string">&#x27;?&#x27;</span>) : url.length());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 下载文件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">download</span><span class="params">(String url, <span class="type">long</span> fileStart, <span class="type">long</span> fileEnd)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">URL</span> <span class="variable">downloadURL</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">HttpURLConnection</span> <span class="variable">connection</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            downloadURL = <span class="keyword">new</span> <span class="title class_">URL</span>(url);</span><br><span class="line">            connection = (HttpURLConnection) downloadURL.openConnection();</span><br><span class="line">            connection.setRequestProperty(<span class="string">&quot;Range&quot;</span>, <span class="string">&quot;bytes=&quot;</span> + fileStart + <span class="string">&quot;-&quot;</span> + fileEnd);</span><br><span class="line">            connection.connect();</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">&quot;开始断点续传...&quot;</span>);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            connection.disconnect();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">RandomAccessFile</span> <span class="variable">raf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RandomAccessFile</span>(storePath + <span class="string">&quot;/&quot;</span> + fileName, <span class="string">&quot;rws&quot;</span>);</span><br><span class="line">            raf.seek(fileStart);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 写入到文件</span></span><br><span class="line">            <span class="type">int</span> length;</span><br><span class="line">            <span class="type">byte</span>[] buffer = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">            <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> connection.getInputStream();</span><br><span class="line">            <span class="keyword">while</span> ((length = is.read(buffer)) != -<span class="number">1</span>) &#123;</span><br><span class="line">                raf.write(buffer, <span class="number">0</span>, length);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            raf.close();</span><br><span class="line">            is.close();</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;文件续传失败!&quot;</span>);</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;文件下载完成!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">openHttpConnection</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">URL</span> <span class="variable">downloadURL</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">HttpURLConnection</span> <span class="variable">connection</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;连接中...&quot;</span>);</span><br><span class="line">            downloadURL = <span class="keyword">new</span> <span class="title class_">URL</span>(url);</span><br><span class="line">            connection = (HttpURLConnection) downloadURL.openConnection();</span><br><span class="line">            connection.connect();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;URL无效&quot;</span>);</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// http请求设置</span></span><br><span class="line">        connection.setConnectTimeout(<span class="number">10000</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            connection.connect();</span><br><span class="line">            <span class="keyword">if</span> (connection.getResponseCode() == <span class="number">200</span>) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;连接服务器成功!&quot;</span>);</span><br><span class="line"></span><br><span class="line">                fileReqLength = connection.getContentLength();</span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;连接服务器失败: &quot;</span> + connection.getResponseCode()</span><br><span class="line">                        + <span class="string">&quot;:&quot;</span> + connection.getResponseMessage());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;连接文件服务器失败!&quot;</span>);</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            connection.disconnect();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 连接文件服务器</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 打开http连接，获取文件总大小</span></span><br><span class="line">        openHttpConnection();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 文件全路径</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">downloadFile</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(storePath + <span class="string">&quot;/&quot;</span> + fileName);</span><br><span class="line">        System.out.println(<span class="string">&quot;文件名: &quot;</span> + downloadFile.toString());</span><br><span class="line">        System.out.println(<span class="string">&quot;文件类型: &quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;文件大小: &quot;</span> + (fileReqLength / <span class="number">1024</span> / <span class="number">1024</span>) + <span class="string">&quot;MB&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!downloadFile.exists()) &#123;</span><br><span class="line">            <span class="comment">// 文件不存在则直接下载</span></span><br><span class="line">            download(url, <span class="number">0</span>, fileReqLength);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 文件存在，则比较文件大小</span></span><br><span class="line">            <span class="type">long</span> <span class="variable">fileLocalLength</span> <span class="operator">=</span> downloadFile.length();</span><br><span class="line">            <span class="keyword">if</span> (fileReqLength == fileLocalLength) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;文件已下载完成!&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;文件已连接，已下载: &quot;</span> + (fileLocalLength / <span class="number">1024</span> / <span class="number">1024</span>)</span><br><span class="line">                        + <span class="string">&quot;MB&quot;</span> + <span class="string">&quot;；剩余: &quot;</span> + (fileReqLength - fileLocalLength) / <span class="number">1024</span> / <span class="number">1024</span> + <span class="string">&quot;MB&quot;</span>);</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 断点续传</span></span><br><span class="line">                <span class="type">long</span> <span class="variable">filePos</span> <span class="operator">=</span> fileLocalLength;</span><br><span class="line">                download(url, filePos, fileReqLength);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Main Thread</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">storePath</span> <span class="operator">=</span> <span class="string">&quot;/Users/kalosora/Desktop&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;http://dldir1.qq.com/qqfile/qq/QQ7.9/16621/QQ7.9.exe&quot;</span>;</span><br><span class="line">        <span class="type">DownloadTest</span> <span class="variable">downloadTest</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DownloadTest</span>(url, storePath);</span><br><span class="line"></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(downloadTest);</span><br><span class="line">        t1.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>‍</p><p>普通文件下载</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DownloadTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 下载的URL</span></span><br><span class="line">    <span class="keyword">private</span> String url;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 文件下载路径</span></span><br><span class="line">    <span class="keyword">private</span> String storePath;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 文件名称</span></span><br><span class="line">    <span class="keyword">private</span> String fileName;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">DownloadTest</span><span class="params">(String url, String storePath, String fileName)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.url = url;</span><br><span class="line">        <span class="built_in">this</span>.storePath = storePath;</span><br><span class="line">        <span class="built_in">this</span>.fileName = fileName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 下载文件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">download</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">URL</span> <span class="variable">downloadURL</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URL</span>(url);</span><br><span class="line">        <span class="type">HttpURLConnection</span> <span class="variable">connection</span> <span class="operator">=</span> (HttpURLConnection) downloadURL.openConnection();</span><br><span class="line">        <span class="comment">//File tempFile = new File(storePath);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置超时时间，单位ms</span></span><br><span class="line">        connection.setConnectTimeout(<span class="number">10000</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取文件长度,单位byte</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">fileLength</span> <span class="operator">=</span> connection.getContentLengthLong();</span><br><span class="line">        <span class="comment">// FIXME 文件大小判断不准确</span></span><br><span class="line">        System.out.println(<span class="string">&quot;文件大小: &quot;</span> + fileLength / <span class="number">1024</span> / <span class="number">1024</span> + <span class="string">&quot;MB&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// TODO 获取文件类型和文件名 lastIndexOf</span></span><br><span class="line">        System.out.println(<span class="string">&quot;文件类型:&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 在本地新建文件</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">fileDir</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(storePath + <span class="string">&quot;/&quot;</span> + fileName);</span><br><span class="line">        System.out.println(<span class="string">&quot;文件路径:&quot;</span> + fileDir);</span><br><span class="line">        <span class="keyword">if</span>(!fileDir.exists())</span><br><span class="line">        &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 写入文件</span></span><br><span class="line">            <span class="comment">// TODO 断点续传</span></span><br><span class="line"><span class="comment">//            RandomAccessFile raf = new RandomAccessFile(fileDir,&quot;rws&quot;);</span></span><br><span class="line"><span class="comment">//            raf.setLength(fileLength);</span></span><br><span class="line"><span class="comment">//            raf.close();</span></span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">&quot;下载中...&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(fileDir);</span><br><span class="line">            <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> connection.getInputStream();</span><br><span class="line">            <span class="type">byte</span>[] buffer = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">            <span class="type">int</span> length;</span><br><span class="line">            <span class="keyword">while</span> ((length = is.read(buffer)) != -<span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                fos.write(buffer,<span class="number">0</span>,length);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            is.close();</span><br><span class="line">            fos.close();</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">&quot;文件下载完毕！&quot;</span>);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Main Thread</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">storePath</span> <span class="operator">=</span> <span class="string">&quot;/Users/kalosora/Desktop&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;http://dldir1.qq.com/qqfile/qq/QQ7.9/16621/QQ7.9.exe&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> <span class="string">&quot;QQ7.9.exe&quot;</span>;</span><br><span class="line">        <span class="type">DownloadTest</span> <span class="variable">downloadTest</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DownloadTest</span>(url, storePath, fileName);</span><br><span class="line"></span><br><span class="line">        downloadTest.download();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>‍</p><h3 id="多线程下载"><a href="#多线程下载" class="headerlink" title="多线程下载"></a>多线程下载</h3><h4 id="步骤分解-1"><a href="#步骤分解-1" class="headerlink" title="步骤分解"></a>步骤分解</h4><ol><li>文件分块，与文件的起止下载位置</li></ol><blockquote><p>1、文件分块。 文件分块大小（blockSize）&#x3D; （文件大小 +线程数 - 1 ）&#x2F; 线程数 ;<br>2、确定每一个线程所要下载的 文件的起始和结束位置。<br>现假设为每个线程分别编号：0，1， 2，3；则<br>第一个线程负责的下载位置是： 0<em>blockSize - (0+1)</em> blockSize -1，<br>第二个线程负责的下载位置是： 1* blockSize - (1+1)<em>blockSize -1，</em>​<em>以此类推第i个线程负责的下载位置是：i</em> blockSize - (i+1)<em>blockSize -1；</em>​<em>即线程（编号为id）下载开始位置 start &#x3D; id</em> block;<br>即线程（编号为id）下载结束位置 end &#x3D; (id+1)*block -1;</p></blockquote><ol start="2"><li>线程同步：使用CountDownLatch同步各线程的任务，只有所有任务都完成了，才算执行完毕。</li></ol><p>‍</p><h4 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h4><p>核心代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.playgroud;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.RandomAccessFile;</span><br><span class="line"><span class="keyword">import</span> java.net.HttpURLConnection;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.CountDownLatch;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ExecutorService;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Executors;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.IntStream;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 多线程下载</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DownloadMultiply</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 下载的URL</span></span><br><span class="line">    <span class="keyword">private</span> String url;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 文件下载路径</span></span><br><span class="line">    <span class="keyword">private</span> String storePath;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 文件名</span></span><br><span class="line">    <span class="keyword">private</span> String fileName;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 文件下载的容量</span></span><br><span class="line">    <span class="keyword">private</span> Long fileReqLength;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 下载的线程数</span></span><br><span class="line">    <span class="keyword">private</span> Integer threadNum;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 线程同步器</span></span><br><span class="line">    <span class="keyword">private</span> CountDownLatch countDownLatch;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 构造函数</span></span><br><span class="line"><span class="comment">     * 1.参数设置：URL、文件保存路径、下载线程数</span></span><br><span class="line"><span class="comment">     * 2.获取下载的文件名、文件大小</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> url</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> storePath</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> threadNum</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">DownloadMultiply</span><span class="params">(String url, String storePath, Integer threadNum)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.url = url;</span><br><span class="line">        <span class="built_in">this</span>.storePath = storePath;</span><br><span class="line">        <span class="built_in">this</span>.threadNum = threadNum;</span><br><span class="line">        <span class="built_in">this</span>.fileReqLength = getFileReqLength(<span class="built_in">this</span>.url);</span><br><span class="line">        <span class="built_in">this</span>.countDownLatch = <span class="keyword">new</span> <span class="title class_">CountDownLatch</span>(threadNum);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// TODO 考虑获取不到文件名的情况</span></span><br><span class="line">        <span class="comment">// 获取文件名</span></span><br><span class="line">        <span class="built_in">this</span>.fileName = url.substring(url.lastIndexOf(<span class="string">&#x27;/&#x27;</span>) + <span class="number">1</span>, url</span><br><span class="line">                .contains(<span class="string">&quot;?&quot;</span>) ? url.lastIndexOf(<span class="string">&#x27;?&#x27;</span>) : url.length());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取下载的文件大小</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> url</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Long <span class="title function_">getFileReqLength</span><span class="params">(String url)</span> &#123;</span><br><span class="line">        <span class="type">URL</span> <span class="variable">downloadURL</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">HttpURLConnection</span> <span class="variable">connection</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">Long</span> <span class="variable">fileReqLength</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            downloadURL = <span class="keyword">new</span> <span class="title class_">URL</span>(url);</span><br><span class="line">            connection = (HttpURLConnection) downloadURL.openConnection();</span><br><span class="line">            connection.connect();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 获取文件大小</span></span><br><span class="line">            fileReqLength = connection.getContentLengthLong();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;无效的URL链接: &quot;</span> + e.getMessage());</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            connection.disconnect();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> fileReqLength;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 文件下载入口</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">fileDownload</span><span class="params">()</span> &#123;</span><br><span class="line">        Long threadLength;</span><br><span class="line">        Long remainLength;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 输出初始化信息</span></span><br><span class="line">        System.out.println(<span class="string">&quot;连接中...&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (fileReqLength &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;连接文件服务器成功!&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;当前任务下载线程数:&quot;</span> + threadNum);</span><br><span class="line">            System.out.println(<span class="string">&quot;文件名为:&quot;</span> + fileName + <span class="string">&quot;,共&quot;</span> + (fileReqLength / <span class="number">1024</span> / <span class="number">1024</span>) + <span class="string">&quot;MB&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;连接文件服务器失败&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 判断文件是否下载过:1.下载过且文件大小一致，则无需下载；</span></span><br><span class="line">        <span class="comment">// 2.如果没有下载过或者下载未完成，则继续下载，会影响各线程的下载长度</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">fileLocal</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(storePath + <span class="string">&quot;/&quot;</span> + fileName);</span><br><span class="line">        <span class="type">Long</span> <span class="variable">fileLocalLength</span> <span class="operator">=</span> fileLocal.length();</span><br><span class="line">        <span class="keyword">if</span> (fileLocalLength == fileReqLength) &#123;</span><br><span class="line">            <span class="comment">// TODO md5文件一致性校验</span></span><br><span class="line">            System.out.println(<span class="string">&quot;文件已完成下载！&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (!fileLocal.exists()) &#123;</span><br><span class="line">                <span class="comment">// 若文件不存在则创建</span></span><br><span class="line">                remainLength = fileReqLength;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    fileLocal.createNewFile();</span><br><span class="line">                    System.out.println(<span class="string">&quot;文件开始下载...&quot;</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;下载文件创建失败:&quot;</span> + e.getMessage());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 如果存在则计算剩余的下载量</span></span><br><span class="line">                remainLength = fileReqLength - fileLocalLength;</span><br><span class="line"></span><br><span class="line">                System.out.println(<span class="string">&quot;文件剩余:&quot;</span> + (remainLength / <span class="number">1024</span> / <span class="number">1024</span>) + <span class="string">&quot;MB&quot;</span>);</span><br><span class="line">                System.out.println(<span class="string">&quot;文件开始续传...&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 计算单个线程的下载量</span></span><br><span class="line">            <span class="comment">//threadLength = (remainLength % threadNum == 0 ? remainLength / threadNum : remainLength / (threadNum + 1));</span></span><br><span class="line">            threadLength = (remainLength + threadNum - <span class="number">1</span>) / threadNum;</span><br><span class="line">            System.out.println(<span class="string">&quot;单个线程下载量:&quot;</span> + (threadLength / <span class="number">1024</span> / <span class="number">1024</span>) + <span class="string">&quot;Mb，即 &quot;</span> + threadLength + <span class="string">&quot; byte&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">ExecutorService</span> <span class="variable">executorService</span> <span class="operator">=</span> Executors.newCachedThreadPool();</span><br><span class="line">        IntStream.range(<span class="number">0</span>, threadNum).forEach(x -&gt; &#123;</span><br><span class="line"></span><br><span class="line">            executorService.submit(<span class="keyword">new</span> <span class="title class_">downloadThread</span>(x, threadLength, countDownLatch));</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            countDownLatch.await();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;线程同步异常:&quot;</span> + e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">        executorService.shutdown();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;文件下载完成!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 内部类，开启下载线程</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">downloadThread</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 当前线程ID</span></span><br><span class="line">        <span class="keyword">private</span> Integer threadID;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 文件下载的起始位置</span></span><br><span class="line">        <span class="keyword">private</span> Long startPos;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 文件下载的结束位置</span></span><br><span class="line">        <span class="keyword">private</span> Long endPos;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 文件下载的长度</span></span><br><span class="line">        <span class="keyword">private</span> Long threadLength;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 线程同步器，运行完成后提交</span></span><br><span class="line">        <span class="keyword">private</span> CountDownLatch countDownLatch;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 构造函数，初始化文件下载的数据区域</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">downloadThread</span><span class="params">(Integer threadID, Long threadLength, CountDownLatch countDownLatch)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.threadID = threadID;</span><br><span class="line">            <span class="built_in">this</span>.threadLength = threadLength;</span><br><span class="line">            <span class="built_in">this</span>.countDownLatch = countDownLatch;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// TODO 未实现断点续传，仅能够多线程下载，断点续传需要创建临时文件记录上次下载的位置</span></span><br><span class="line">            <span class="comment">// 计算每个线程的下载位置</span></span><br><span class="line">            <span class="built_in">this</span>.startPos = threadID * threadLength;</span><br><span class="line">            <span class="built_in">this</span>.endPos = threadID * threadLength + threadLength - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;[线程&quot;</span> + threadID + <span class="string">&quot;] 从 &quot;</span> + startPos + <span class="string">&quot; ~ &quot;</span> + endPos);</span><br><span class="line"></span><br><span class="line">            <span class="type">URL</span> <span class="variable">downloadURL</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">            <span class="type">HttpURLConnection</span> <span class="variable">connection</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 打开HTTP连接</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                downloadURL = <span class="keyword">new</span> <span class="title class_">URL</span>(url);</span><br><span class="line">                connection = (HttpURLConnection) downloadURL.openConnection();</span><br><span class="line">                connection.setRequestProperty(<span class="string">&quot;Range&quot;</span>, <span class="string">&quot;bytes=&quot;</span> + startPos + <span class="string">&quot;-&quot;</span> + endPos);</span><br><span class="line">                connection.setConnectTimeout(<span class="number">100000</span>);</span><br><span class="line">                connection.connect();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;[线程&quot;</span> + threadID + <span class="string">&quot;] 无法访问URL链接: &quot;</span> + e.getMessage());</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 获取文件</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="type">RandomAccessFile</span> <span class="variable">raf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RandomAccessFile</span>(storePath + <span class="string">&quot;/&quot;</span> + fileName, <span class="string">&quot;rws&quot;</span>);</span><br><span class="line">                raf.seek(startPos);</span><br><span class="line"></span><br><span class="line">                <span class="type">int</span> length;</span><br><span class="line">                <span class="type">byte</span>[] buffer = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">                <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> connection.getInputStream();</span><br><span class="line">                <span class="keyword">while</span>((length = is.read(buffer)) != -<span class="number">1</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    raf.write(buffer,<span class="number">0</span>,length);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                is.close();</span><br><span class="line">                raf.close();</span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;[线程&quot;</span> + threadID + <span class="string">&quot;] 访问文件失败: &quot;</span> + e.getMessage());</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            connection.disconnect();</span><br><span class="line">            countDownLatch.countDown();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>‍</p><p>测试程序</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">playground</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Main Thread</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">storePath</span> <span class="operator">=</span> <span class="string">&quot;/Users/kalosora/Desktop&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;http://dldir1.qq.com/qqfile/qq/QQ7.9/16621/QQ7.9.exe&quot;</span>;</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">threadNum</span> <span class="operator">=</span> <span class="number">4</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">DownloadMultiply</span> <span class="variable">downloadMultiply</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DownloadMultiply</span>(url, storePath,threadNum);</span><br><span class="line">        downloadMultiply.fileDownload();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>‍</p><h3 id="多线程断点续传-1"><a href="#多线程断点续传-1" class="headerlink" title="多线程断点续传"></a>多线程断点续传</h3><p>可以有两种实现形式：</p><ol><li>有多少个线程就生成多少个文件，各自记录下载的起止位置，最后全部合并为一个文件（尝试失败，多个文件要处理比较复杂）</li><li>生成一个目标文件，生成一个（或根据线程数目）临时文件，在日志文件中记录各个线程的下载位置，则不需要合并文件，仅清除日志文件（推荐）</li></ol><h4 id="步骤分解-2"><a href="#步骤分解-2" class="headerlink" title="步骤分解"></a>步骤分解</h4><ul><li><p>优雅结束进程，以便在临时文件中记录下载的进度、下载的线程数、下载大小等内容</p><ul><li>写入一行，就记录一次位置，这样就不需要考虑优雅结束进程的问题；但是会导致部分数据丢失</li><li>一直写入，在接收到<code>interrupt</code>的时候，再记录；不会丢失数据，但是处理逻辑更复杂（尝试）</li><li>使用<code>Properties</code>类来记录</li></ul></li><li><p>文件合并（方式二）</p></li><li><p>文件一致性校验</p></li><li><p>迅雷链接的解析</p><ul><li>迅雷的编码规则为：原地址前面加”AA”，后面加”ZZ”，然后进行Base64编码，最后加上迅雷下载协议”Thunder:&#x2F;&#x2F;“组成完整的下载链接</li></ul></li></ul><p>‍</p><p>实例代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.playgroud;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.net.HttpURLConnection;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.CopyOnWriteArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.CountDownLatch;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ExecutorService;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Executors;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.IntStream;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 多线程断点续传</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 思路梳理</span></span><br><span class="line"><span class="comment"> * 1.判断文件是否存在</span></span><br><span class="line"><span class="comment"> * 1.1如果不存在则生成一个tmp文件，4个日志，分别记录每个线程的下载位置</span></span><br><span class="line"><span class="comment"> * 1.2如果tmp文件存在，则校验文件完整性，必须有4个日志文件，如果没有则清空任务并重新下载</span></span><br><span class="line"><span class="comment"> * 2.继续下载的位置 = id*block + （已下载的文件长度）</span></span><br><span class="line"><span class="comment"> * 3.下载截止的位置 = (id+1)*block - 1</span></span><br><span class="line"><span class="comment"> * 4.文件完整性校验</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 改进：Springboot 如果是把下载位置存到数据库，并且定时刷新，那么是否只需要一个tmp文件就可以解决？</span></span><br><span class="line"><span class="comment"> * 1.生成tmp文件，并且在数据库中生成4条记录，对应4个线程</span></span><br><span class="line"><span class="comment"> * 2.线程执行定时任务刷新文件的开始位置，此时截止位置仍然是固定的</span></span><br><span class="line"><span class="comment"> * 3.如果任务中断，则只需要重新寻址到数据库记录的开始位置，然后下载即可</span></span><br><span class="line"><span class="comment"> * 这样可以减少文件的个数，也能够降低任务中断带来的重新寻址问题</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DownloadMultiCon</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 下载的URL</span></span><br><span class="line">    <span class="keyword">private</span> String url;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 文件下载路径</span></span><br><span class="line">    <span class="keyword">private</span> String storePath;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 文件名</span></span><br><span class="line">    <span class="keyword">private</span> String fileName;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 临时文件名</span></span><br><span class="line">    <span class="keyword">private</span> String fileTemp;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 文件下载的容量</span></span><br><span class="line">    <span class="keyword">private</span> Long fileReqLength;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 下载的线程数</span></span><br><span class="line">    <span class="keyword">private</span> Integer threadNum;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 线程同步器</span></span><br><span class="line">    <span class="keyword">private</span> CountDownLatch countDownLatch;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 线程ID集合，每次初始化都记录下载的线程id</span></span><br><span class="line">    <span class="keyword">private</span> CopyOnWriteArrayList&lt;Integer&gt; threadIDList;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 静态变量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">THREAD_NAME</span> <span class="operator">=</span> <span class="string">&quot;download-thread-&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">THREAD_TEMP_FILE</span> <span class="operator">=</span> <span class="string">&quot;download-file-&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">THREAD_TEMP_KEY</span> <span class="operator">=</span> <span class="string">&quot;download-thread-key-&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 构造函数</span></span><br><span class="line"><span class="comment">     * 1.参数设置：URL、文件保存路径、下载线程数</span></span><br><span class="line"><span class="comment">     * 2.获取下载的文件名、文件大小</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> url</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> storePath</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> threadNum</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">DownloadMultiCon</span><span class="params">(String url, String storePath, Integer threadNum)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.url = url;</span><br><span class="line">        <span class="built_in">this</span>.storePath = storePath;</span><br><span class="line">        <span class="built_in">this</span>.threadNum = threadNum;</span><br><span class="line">        <span class="built_in">this</span>.fileReqLength = getFileReqLength(<span class="built_in">this</span>.url);</span><br><span class="line">        <span class="built_in">this</span>.countDownLatch = <span class="keyword">new</span> <span class="title class_">CountDownLatch</span>(threadNum + <span class="number">1</span>); <span class="comment">// 多一个守护线程负责中断下载线程</span></span><br><span class="line">        <span class="built_in">this</span>.threadIDList = <span class="keyword">new</span> <span class="title class_">CopyOnWriteArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// TODO 考虑获取不到文件名的情况</span></span><br><span class="line">        <span class="comment">// 获取文件名</span></span><br><span class="line">        <span class="built_in">this</span>.fileName = url.substring(url.lastIndexOf(<span class="string">&#x27;/&#x27;</span>) + <span class="number">1</span>, url</span><br><span class="line">                .contains(<span class="string">&quot;?&quot;</span>) ? url.lastIndexOf(<span class="string">&#x27;?&#x27;</span>) : url.length());</span><br><span class="line">        <span class="built_in">this</span>.fileTemp = fileName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取下载的文件大小</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> url</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Long <span class="title function_">getFileReqLength</span><span class="params">(String url)</span> &#123;</span><br><span class="line">        <span class="type">URL</span> <span class="variable">downloadURL</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">HttpURLConnection</span> <span class="variable">connection</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">Long</span> <span class="variable">fileReqLength</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            downloadURL = <span class="keyword">new</span> <span class="title class_">URL</span>(url);</span><br><span class="line">            connection = (HttpURLConnection) downloadURL.openConnection();</span><br><span class="line">            connection.connect();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 获取文件大小</span></span><br><span class="line">            fileReqLength = connection.getContentLengthLong();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;无效的URL链接: &quot;</span> + e.getMessage());</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            connection.disconnect();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> fileReqLength;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户线程，开启下载线程</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">downloadThread</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 当前线程ID</span></span><br><span class="line">        <span class="keyword">private</span> Integer threadID;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 文件下载的起始位置</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> Long startPos;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 文件下载的结束位置</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> Long endPos;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 文件下载的长度</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> Long threadLength;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 线程同步器，运行完成后提交</span></span><br><span class="line">        <span class="keyword">private</span> CountDownLatch countDownLatch;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 线程同步的数组</span></span><br><span class="line">        <span class="keyword">private</span> CopyOnWriteArrayList&lt;Integer&gt; threadIDList;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 构造函数，初始化文件下载的数据区域</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">downloadThread</span><span class="params">(Integer threadID, CountDownLatch countDownLatch, CopyOnWriteArrayList&lt;Integer&gt; threadIDList, Long threadLength)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.threadID = threadID;</span><br><span class="line">            <span class="built_in">this</span>.countDownLatch = countDownLatch;</span><br><span class="line">            <span class="built_in">this</span>.threadIDList = threadIDList;</span><br><span class="line">            <span class="built_in">this</span>.threadLength = threadLength;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 计算每个线程的下载位置</span></span><br><span class="line">            <span class="built_in">this</span>.startPos = threadID * threadLength;</span><br><span class="line">            <span class="built_in">this</span>.endPos = ((threadID + <span class="number">1</span>) * threadLength) - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 获取当前线程id，并加入到集合中</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">threadLocalID</span> <span class="operator">=</span> (<span class="type">int</span>) Thread.currentThread().getId();</span><br><span class="line">            threadIDList.add(threadLocalID);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 设置线程名称，通过截取可以获得每个线程的threadID，以便记录下载进度</span></span><br><span class="line">            Thread.currentThread().setName(THREAD_NAME + threadID);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 获取properties文件，获得下载的位置</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">fileThreadName</span> <span class="operator">=</span> storePath + <span class="string">&quot;/&quot;</span> + THREAD_TEMP_FILE + threadID + <span class="string">&quot;.properties&quot;</span>;</span><br><span class="line">            <span class="type">File</span> <span class="variable">fileThread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(fileThreadName);</span><br><span class="line">            <span class="type">Properties</span> <span class="variable">prop</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(fileThread);</span><br><span class="line">                prop.load(fis);</span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;获取线程文件 &quot;</span> + fileThreadName + <span class="string">&quot; 失败:&quot;</span> + e.getMessage());</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 如果配置文件为空，则设置key，否则读取key</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">propKey</span> <span class="operator">=</span> THREAD_TEMP_KEY + threadID;</span><br><span class="line">            Long realStartPos;</span><br><span class="line">            <span class="keyword">if</span> (prop.size() == <span class="number">0</span>) &#123;</span><br><span class="line">                realStartPos = startPos;</span><br><span class="line">                prop.setProperty(propKey, String.valueOf(realStartPos));</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                realStartPos = Long.valueOf(prop.getProperty(propKey));</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 获取剩余长度</span></span><br><span class="line">            <span class="type">Long</span> <span class="variable">remainLength</span> <span class="operator">=</span> endPos - realStartPos;</span><br><span class="line">            System.out.println(<span class="string">&quot;[下载线程&quot;</span> + threadID + <span class="string">&quot;]开始任务，剩余 &quot;</span> + remainLength + <span class="string">&quot; byte&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 获取下载范围</span></span><br><span class="line">            <span class="type">URL</span> <span class="variable">downloadURL</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">            <span class="type">HttpURLConnection</span> <span class="variable">connection</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                downloadURL = <span class="keyword">new</span> <span class="title class_">URL</span>(url);</span><br><span class="line">                connection = (HttpURLConnection) downloadURL.openConnection();</span><br><span class="line">                connection.setConnectTimeout(<span class="number">100000</span>);</span><br><span class="line">                connection.setRequestProperty(<span class="string">&quot;Range&quot;</span>, <span class="string">&quot;bytes=&quot;</span> + realStartPos + <span class="string">&quot;-&quot;</span> + endPos);</span><br><span class="line">                connection.connect();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;打开下载链接失败:&quot;</span> + e.getMessage());</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 链接到本地文件</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="type">RandomAccessFile</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RandomAccessFile</span>(storePath + <span class="string">&quot;/&quot;</span> + fileName, <span class="string">&quot;rws&quot;</span>);</span><br><span class="line">                file.seek(realStartPos);</span><br><span class="line"></span><br><span class="line">                <span class="type">byte</span>[] buffer = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">                <span class="type">int</span> <span class="variable">length</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">                <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> connection.getInputStream();</span><br><span class="line">                <span class="type">OutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(fileThreadName);</span><br><span class="line">                <span class="keyword">while</span>((length = is.read(buffer)) != -<span class="number">1</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    file.write(buffer,<span class="number">0</span>,length);</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// 每次写入都更新下载的开始位置</span></span><br><span class="line">                    realStartPos += length;</span><br><span class="line">                    prop.setProperty(propKey, String.valueOf(realStartPos));</span><br><span class="line">                    prop.store(fos,Thread.currentThread().getName() + <span class="string">&quot; - Update&quot;</span> );</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 释放资源</span></span><br><span class="line">                is.close();</span><br><span class="line">                fos.close();</span><br><span class="line">                file.close();</span><br><span class="line">                connection.disconnect();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;链接本地文件失败:&quot;</span> + e.getMessage());</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">&quot;[下载线程&quot;</span> + threadID + <span class="string">&quot;] 任务完成&quot;</span>);</span><br><span class="line">            countDownLatch.countDown();</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 守护线程，负责处理临时文件：记录每个线程的下载位置</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">logDeamonThred</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;[守护线程] 开始运行&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 把守护线程添加到线程集合中</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">threadLocalID</span> <span class="operator">=</span> (<span class="type">int</span>) Thread.currentThread().getId();</span><br><span class="line">            threadIDList.add(threadLocalID);</span><br><span class="line"></span><br><span class="line">            <span class="type">Scanner</span> <span class="variable">userScan</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">            <span class="type">String</span> <span class="variable">userInput</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">do</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;下载任务进行中，输入exit暂停任务...&quot;</span>);</span><br><span class="line">                userInput = userScan.nextLine();</span><br><span class="line">            &#125; <span class="keyword">while</span> (!userInput.equals(<span class="string">&quot;exit&quot;</span>));</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">&quot;用户请求暂停任务!&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 遍历线程ID，找到以后暂时挂起</span></span><br><span class="line">            Set&lt;Thread&gt; setOfThread = Thread.getAllStackTraces().keySet();</span><br><span class="line">            <span class="keyword">for</span> (Integer threadID : threadIDList) &#123;</span><br><span class="line">                <span class="keyword">for</span> (Thread thread : setOfThread) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (thread.getId() == threadID) &#123;</span><br><span class="line">                        thread.interrupt();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            userScan.close();</span><br><span class="line">            countDownLatch.countDown();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 文件下载入口</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">fileDownload</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Long</span> <span class="variable">threadLength</span> <span class="operator">=</span> fileReqLength / threadNum;</span><br><span class="line">        <span class="type">Long</span> <span class="variable">remainLength</span> <span class="operator">=</span> <span class="number">0L</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 输出初始化信息</span></span><br><span class="line">        System.out.println(<span class="string">&quot;连接中...&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (fileReqLength.longValue() &gt; <span class="number">0L</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;连接文件服务器成功!&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;当前任务下载线程数:&quot;</span> + threadNum);</span><br><span class="line">            System.out.println(<span class="string">&quot;文件名为:&quot;</span> + fileName + <span class="string">&quot;,共&quot;</span> + (fileReqLength / <span class="number">1024</span> / <span class="number">1024</span>) + <span class="string">&quot;MB&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;连接文件服务器失败&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 判断文件是否下载过:1.下载过且文件大小一致，则无需下载；</span></span><br><span class="line">        <span class="comment">// 2.如果没有下载过或者下载未完成，则继续下载</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">fileLocal</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(storePath + <span class="string">&quot;/&quot;</span> + fileName);</span><br><span class="line">        <span class="type">Long</span> <span class="variable">fileLocalLength</span> <span class="operator">=</span> fileLocal.length();</span><br><span class="line">        <span class="keyword">if</span> (fileLocalLength.longValue() == fileReqLength.longValue()) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;文件已经下载完成，无需下载！&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (fileLocalLength.longValue() &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// 文件不存在则创建</span></span><br><span class="line">            <span class="keyword">if</span> (!fileLocal.exists()) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    fileLocal.createNewFile();</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// 创建临时文件</span></span><br><span class="line">                    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; threadNum; i++) &#123;</span><br><span class="line">                        <span class="type">String</span> <span class="variable">fileThreadName</span> <span class="operator">=</span> storePath + <span class="string">&quot;/&quot;</span> + THREAD_TEMP_FILE + i + <span class="string">&quot;.properties&quot;</span>;</span><br><span class="line">                        <span class="type">File</span> <span class="variable">fileThread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(fileThreadName);</span><br><span class="line">                        <span class="keyword">if</span> (!fileThread.exists()) &#123;</span><br><span class="line">                            fileThread.createNewFile();</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;文件创建失败:&quot;</span> + e.getMessage());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// TODO 考虑临时文件缺失的问题</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 开启守护线程</span></span><br><span class="line">            <span class="type">Thread</span> <span class="variable">logThread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">logDeamonThred</span>());</span><br><span class="line">            logThread.setDaemon(<span class="literal">true</span>);</span><br><span class="line">            logThread.start();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 开启多线程，并将线程保存在集合中</span></span><br><span class="line">            <span class="type">ExecutorService</span> <span class="variable">executorService</span> <span class="operator">=</span> Executors.newCachedThreadPool();</span><br><span class="line">            IntStream.range(<span class="number">0</span>, threadNum).forEach(x -&gt; &#123;</span><br><span class="line"></span><br><span class="line">                executorService.submit(<span class="keyword">new</span> <span class="title class_">downloadThread</span>(x, countDownLatch, threadIDList, threadLength));</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                countDownLatch.await();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (</span><br><span class="line">                    InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            executorService.shutdown();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// TODO 清理临时文件</span></span><br><span class="line">        <span class="comment">// TODO 文件完整性校验</span></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;文件下载完成!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>‍</p><p>测试代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">playground</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Main Thread</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">storePath</span> <span class="operator">=</span> <span class="string">&quot;/Users/kalosora/Desktop/多线程下载&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;http://dldir1.qq.com/qqfile/qq/QQ7.9/16621/QQ7.9.exe&quot;</span>;</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">threadNum</span> <span class="operator">=</span> <span class="number">4</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">DownloadMultiCon</span> <span class="variable">downloadMultiCon</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DownloadMultiCon</span>(url, storePath,threadNum);</span><br><span class="line">        downloadMultiCon.fileDownload();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>‍</p><h4 id="改进：Web项目"><a href="#改进：Web项目" class="headerlink" title="改进：Web项目"></a>改进：Web项目</h4><p>#TODO#</p><ul><li><p>下载速度、进度的显示</p></li><li><p>多个任务下，线程间速度的均摊</p></li><li><p>解析迅雷、BT链接</p><ul><li>迅雷的编码规则为：原地址前面加”AA”，后面加”ZZ”，然后进行Base64编码，最后加上迅雷下载协议”thunder:&#x2F;&#x2F;“组成完整的下载链接</li><li><a href="https://github.com/mpetazzoni/ttorrent">BitTorrent Java实现</a></li></ul></li></ul><p>‍</p><h2 id="技术点总结"><a href="#技术点总结" class="headerlink" title="技术点总结"></a>技术点总结</h2><p>多线程断点续传</p><ol><li><p>断点续传需要提供的能力：</p><ol><li><code>RandomAccessFile</code>类提供随机文件读取与写入的能力</li><li><code>File</code>类提供文件创建、计算长度的能力</li><li><code>HttpURLConnection</code>类提供访问http请求、查找数据资源范围的能力</li></ol></li><li><p>多线程下载需要的能力：</p><ol><li><p><code>ExecutorService</code>类帮助进行线程管理</p></li><li><p><code>CountDownLatch</code>类帮助同步子线程任务进度</p></li><li><p>相关公式帮助计算</p><ol><li>单个线程的块大小：blockSize &#x3D; （文件大小 +线程数 - 1 ）&#x2F; 线程数 ;</li><li>下载的开始位置：start &#x3D; id* block;</li><li>下载的结束位置：end &#x3D; (id+1)*block -1;</li></ol></li></ol></li><li><p>多线程断点续传综合：</p><ol><li><code>Properties</code>类提供日志文件的读写能力，存放各个线程下载的信息</li></ol></li></ol><p>‍</p><h2 id="参考来源"><a href="#参考来源" class="headerlink" title="参考来源"></a>参考来源</h2><p>断点续传相关</p><p><a href="https://mp.weixin.qq.com/s/bI5xYq3jUtp-sviKlzHtNg">断点续传原理</a></p><p><a href="https://blog.csdn.net/Adelaide_Guo/article/details/77757132">断点续传与同步器的一个实例</a></p><p>‍</p><p>多线程相关</p><p><a href="https://blog.csdn.net/fzy629442466/article/details/85601315">多线程下载最简单实例</a></p><p>‍</p><p>多线程断点续传</p><p><a href="https://blog.csdn.net/carlislelee/article/details/52688693">如何优雅结束java进程</a></p><p><a href="https://github.com/niumoo/down-bit">断点续传完整实例-支持迅雷</a></p><p><a href="https://www.cnblogs.com/yuanyb/p/12296815.html">多线程断点续传的简单实例</a></p><p><a href="https://www.cnblogs.com/panhouye/p/6209635.html">多线程断点续传的详细讲解</a></p><p>‍</p><p>java如何实现BT下载</p><p><a href="https://www.zhihu.com/question/67773003">现成的JAVA BT库</a></p><p><a href="http://www.meilongkui.com/archives/320">eclipse bittorrent</a></p><p>‍</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java Core </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java 泛型</title>
      <link href="/2020/11/25/Java%E6%B3%9B%E5%9E%8B/"/>
      <url>/2020/11/25/Java%E6%B3%9B%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="Java泛型"><a href="#Java泛型" class="headerlink" title="Java泛型"></a>Java泛型</h1><h2 id="什么是泛型"><a href="#什么是泛型" class="headerlink" title="什么是泛型"></a>什么是泛型</h2><p>泛型程序设计，意味着编写的代码，可以针对多种不同类型的对象进行重用。</p><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>Java 泛型（generics）是 JDK 5 中引入的一个新特性， 泛型提供了编译时类型安全检测机制，该机制允许程序员在编译时检测到非法的类型。<strong>泛型的本质是参数化类型</strong>，也就是说所操作的数据类型被指定为一个参数。</p><p>‍</p><p>关于复用：</p><ul><li>纵向复用：继承、抽象类（模板）、接口（default、static方法）</li><li>横向复用：泛型</li></ul><p>‍</p><h4 id="如果没有泛型"><a href="#如果没有泛型" class="headerlink" title="如果没有泛型"></a>如果没有泛型</h4><p>不使用泛型的实例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ArrayList</span> <span class="variable">al</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">al.add(<span class="string">&quot;abc&quot;</span>);</span><br><span class="line">al.add(<span class="string">&quot;124&quot;</span>);</span><br><span class="line">al.add(<span class="string">&quot;32L&quot;</span>);</span><br></pre></td></tr></table></figure><p>通过上述实例可以看到，不使用泛型的数组，存放了 3 种类型的数据。</p><p>当我们需要读取的时候，就要对数组中每一个元素的类型了然于胸，如果不知道数组中元素的类型，就可能会遇到<code>ClassCastException</code> 异常。</p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>泛型能够使程序更易读，也更安全</p><blockquote><p>1.泛型的主要目标是提高 Java 程序的类型安全。编译时的强类型检查；通过知道使用泛型定义的变量的类型限制，编译器可以在一个高得多的程度上验证类型假设。没有泛型，这些假设就只存在于程序员的头脑中（或者如果幸运的话，还存在于代码注释中）。</p><p>2.同时泛型还能消除代码中的强制类型转换，所有的强制转换都是自动和隐式的。</p><p>3.代码复用性强：在框架设计时候，<code>BaseDao&lt;T&gt;</code>、<code>BaseService&lt;T&gt;</code>、<code>BaseDaoImpl&lt;T&gt;</code>、<code>BaseServiceImpl&lt;T&gt;</code>等；通过继承，实现抽象了所有公共方法，避免了每次都要写相同的代码。</p><p>如果说面向对象思想是通过从上至下的继承关系实现了纵向维度的代码复用；那么也可以说泛型编程思想是通过将平行关系的类联系起来实现了横向维度的代码复用；两者的组合就实现了更具有表现力的二维结构。</p></blockquote><p>‍</p><h2 id="泛型通配符"><a href="#泛型通配符" class="headerlink" title="泛型通配符"></a>泛型通配符</h2><p>通配符种类：</p><ul><li>？ 表示不确定的java类型</li><li>T (type) 表示具体的一个java类型</li><li>K V (key value) 分别代表java键值中的Key Value</li><li>E (element) 代表Element</li></ul><p>通配符的界限</p><ul><li>上界：<code>T extends [类型]</code>：只有继承 <code>[类型]</code> 的类型才能够传入</li><li>下界：<code>T super [类型]</code>：任何是<code>[类型]</code>的父类类型都能够传入</li></ul><p>实例</p><p>这里的 <code>Pair</code> 可以传入任意的对象，如Integer、String …</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Pair</span>&lt;T&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> T first;</span><br><span class="line">    <span class="keyword">private</span> T second;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Pair</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        first = <span class="literal">null</span>;</span><br><span class="line">        second = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Pair</span><span class="params">(T first,T second)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">this</span>.first = first;</span><br><span class="line">        <span class="built_in">this</span>.second = second;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> T <span class="title function_">getFirst</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> first;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setFirst</span><span class="params">(T first)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.first = first;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> T <span class="title function_">getSecond</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> second;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSecond</span><span class="params">(T second)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.second = second;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>‍</p><h2 id="泛型原理"><a href="#泛型原理" class="headerlink" title="泛型原理"></a>泛型原理</h2><h3 id="泛型擦除"><a href="#泛型擦除" class="headerlink" title="泛型擦除"></a>泛型擦除</h3><p>Java 的泛型是伪泛型，这是因为 Java 在编译期间，所有的泛型信息都会被擦掉，这也就是通常所说类型擦除。</p><p>如果存在边界，如<code>&lt;T extends String&gt;</code> ，则会进行代码转换</p><blockquote><p>Java 的泛型基本上都是在编译器这个层次上实现的，在生成的字节码中是不包含泛型中的类型信息的，使用泛型的时候加上类型参数，在编译器编译的时候会去掉，这个过程称为类型擦除。</p><p>如：在代码中定义<code>List&lt;Object&gt;</code>和<code>List&lt;String&gt;</code>等类型，在编译后都会变成<code>List</code>，JVM 看到的只是 List，而由泛型附加的类型信息对 JVM 是看不到的。Java 编译器会在编译时尽可能的发现可能出错的地方，但是仍然无法在运行时刻出现的类型转换异常的情况，类型擦除也是 Java 的泛型与 C++ 模板机制实现方式之间的重要区别。</p></blockquote><h4 id="实例：通过反射写入不同类型的数据"><a href="#实例：通过反射写入不同类型的数据" class="headerlink" title="实例：通过反射写入不同类型的数据"></a>实例：通过反射写入不同类型的数据</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.interview.javabasic.generics;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GenericsEraseDemo</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通过反射，为泛型写入不同类型的数据</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> SecurityException </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> NoSuchMethodException </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">writeGenericsByReflection</span><span class="params">()</span> <span class="keyword">throws</span> NoSuchMethodException, SecurityException</span><br><span class="line">&#123;</span><br><span class="line">List&lt;Integer&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">list.add(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过反射机制，获取泛型</span></span><br><span class="line">Class&lt;? <span class="keyword">extends</span> <span class="title class_">List</span>&gt; clazz = list.getClass();</span><br><span class="line"><span class="comment">// 获取方法</span></span><br><span class="line"><span class="type">Method</span> <span class="variable">add</span> <span class="operator">=</span> clazz.getDeclaredMethod(<span class="string">&quot;add&quot;</span>, Object.class);</span><br><span class="line"><span class="comment">// 反射调用方法</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">add.invoke(list, <span class="string">&quot;Test&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">catch</span> (IllegalArgumentException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">catch</span> (InvocationTargetException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试泛型的自动强制转换</span></span><br><span class="line"><span class="type">Object</span> <span class="variable">testStr</span> <span class="operator">=</span> list.get(<span class="number">1</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">newTestStr</span> <span class="operator">=</span> (String)testStr;</span><br><span class="line">System.out.println(<span class="string">&quot;泛型读取: &quot;</span> + newTestStr);</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;数组中数据为: &quot;</span> + list.toString());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">writeGenericsByReflection();</span><br><span class="line">&#125; <span class="keyword">catch</span> (NoSuchMethodException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">catch</span> (SecurityException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><p><img src="/2020/11/25/Java%E6%B3%9B%E5%9E%8B/20201125155618-t3dankh-image-20210403104218-3xw6puf.png" alt="Java泛型.png"><br><img src="/2020/11/25/Java%E6%B3%9B%E5%9E%8B/20201125150548-vvwzh34-image-20210403104218-i3q436l.png" alt="Java泛型.png"></p><p>由此可见，在编译期间，所有的泛型信息都会被擦掉，所以上述的例子没有遇到 <code>IllegalArgumentException</code>，能够写入不同类型的数据到泛型中。同时也说明可以通过反射的方法，绕过编译时泛型的类型限制。</p><h4 id="实例：比较泛型"><a href="#实例：比较泛型" class="headerlink" title="实例：比较泛型"></a>实例：比较泛型</h4><p>在上述实例中添加如下代码，并执行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 比较泛型是否相等。如果相等则说明参数类型被擦出</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">equalGenerics</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">List&lt;String&gt; list1 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt;();</span><br><span class="line">list1.add(<span class="string">&quot;Test&quot;</span>);</span><br><span class="line">List&lt;Integer&gt; list2 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Integer&gt;();</span><br><span class="line">list2.add(<span class="number">12</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(list1.getClass() == list2.getClass())</span><br><span class="line">System.out.println(<span class="string">&quot;参数类型相等&quot;</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">System.out.println(<span class="string">&quot;参数类型不相等&quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><p><img src="/2020/11/25/Java%E6%B3%9B%E5%9E%8B/20201125151658-6u1f0ql-image-20210403104218-3z665iz.png" alt="Java泛型.png"></p><p>在这个例子中，定义了两个<code>ArrayList</code>数组，不过一个是<code>ArrayList&lt;String&gt;</code>泛型类型的，只能存储字符串；一个是<code>ArrayList&lt;Integer&gt;</code>泛型类型的，只能存储整数，最后，通过<code>list1</code>对象和<code>list2</code>对象的<code>getClass()</code>方法获取他们的类的信息，最后发现结果为<code>true</code>。说明泛型类型<code>String</code>和<code>Integer</code>都被擦除掉了，只剩下原始类型。</p><h3 id="类型擦除后保留的原始类型"><a href="#类型擦除后保留的原始类型" class="headerlink" title="类型擦除后保留的原始类型"></a>类型擦除后保留的原始类型</h3><p>在上面，提到了原始类型，什么是原始类型？</p><p><strong>原始类型</strong> 就是擦除去了泛型信息，最后在字节码中的类型变量的真正类型，无论何时定义一个泛型，相应的原始类型都会被自动提供，类型变量擦除，并使用其限定类型（无限定的变量用 Object）替换。</p><p>原始类型 Object</p><figure class="highlight java"><figcaption><span>hljs</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Pair</span>&lt;T&gt; &#123;  </span><br><span class="line">    <span class="keyword">private</span> T value;  </span><br><span class="line">    <span class="keyword">public</span> T <span class="title function_">getValue</span><span class="params">()</span> &#123;  </span><br><span class="line">        <span class="keyword">return</span> value;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setValue</span><span class="params">(T  value)</span> &#123;  </span><br><span class="line">        <span class="built_in">this</span>.value = value;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><p>Pair 的原始类型为：</p><figure class="highlight java"><figcaption><span>hljs</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Pair</span> &#123;  </span><br><span class="line">    <span class="keyword">private</span> Object value;  </span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">getValue</span><span class="params">()</span> &#123;  </span><br><span class="line">        <span class="keyword">return</span> value;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setValue</span><span class="params">(Object  value)</span> &#123;  </span><br><span class="line">        <span class="built_in">this</span>.value = value;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为在<code>Pair&lt;T&gt;</code>中，T 是一个无限定的类型变量，所以用<code>Object</code>替换，其结果就是一个普通的类，如同泛型加入 Java 语言之前的已经实现的样子。在程序中可以包含不同类型的<code>Pair</code>，如<code>Pair&lt;String&gt;</code>或<code>Pair&lt;Integer&gt;</code>，但是擦除类型后他们的就成为原始的<code>Pair</code>类型了，原始类型都是<code>Object</code>。</p><p>从上面的第一个例子中，我们也可以明白<code>ArrayList&lt;Integer&gt;</code>被擦除类型后，原始类型也变为<code>Object</code>，所以通过反射我们就可以存储字符串了。</p><p>如果类型变量有限定，那么原始类型就用第一个边界的类型变量类替换。</p><p>比如： Pair 这样声明的话</p><figure class="highlight java"><figcaption><span>hljs</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Pair</span>&lt;T <span class="keyword">extends</span> <span class="title class_">Comparable</span>&gt; &#123;&#125;</span><br></pre></td></tr></table></figure><p>那么原始类型就是<code>Comparable</code>。</p><h4 id="实例：原始类型"><a href="#实例：原始类型" class="headerlink" title="实例：原始类型"></a>实例：原始类型</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GenericsOrigionalTypeDemo</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;  </span><br><span class="line"></span><br><span class="line">        <span class="comment">/**不指定泛型的时候*/</span>  </span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> GenericsOrigionalTypeDemo.add(<span class="number">1</span>, <span class="number">2</span>); <span class="comment">//这两个参数都是Integer，所以T为Integer类型  </span></span><br><span class="line">        <span class="type">Number</span> <span class="variable">f</span> <span class="operator">=</span> GenericsOrigionalTypeDemo.add(<span class="number">1</span>, <span class="number">1.2</span>); <span class="comment">//这两个参数一个是Integer，以风格是Float，所以取同一父类的最小级，为Number  </span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> GenericsOrigionalTypeDemo.add(<span class="number">1</span>, <span class="string">&quot;asd&quot;</span>); <span class="comment">//这两个参数一个是Integer，以风格是Float，所以取同一父类的最小级，为Object  </span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/**指定泛型的时候*/</span>  </span><br><span class="line">        <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> GenericsOrigionalTypeDemo.&lt;Integer&gt;add(<span class="number">1</span>, <span class="number">2</span>); <span class="comment">//指定了Integer，所以只能为Integer类型或者其子类  </span></span><br><span class="line">        <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> GenericsOrigionalTypeDemo.&lt;Integer&gt;add(<span class="number">1</span>, <span class="number">2.2</span>); <span class="comment">//编译错误，指定了Integer，不能为Float  </span></span><br><span class="line">        <span class="type">Number</span> <span class="variable">c</span> <span class="operator">=</span> GenericsOrigionalTypeDemo.&lt;Number&gt;add(<span class="number">1</span>, <span class="number">2.2</span>); <span class="comment">//指定为Number，所以可以为Integer和Float  </span></span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">    <span class="comment">//这是一个简单的泛型方法  </span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; T <span class="title function_">add</span><span class="params">(T x,T y)</span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> y;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><p>根据返回值类型，来指定原始类型</p><p><img src="/2020/11/25/Java%E6%B3%9B%E5%9E%8B/20201125153031-nnf34xp-image-20210403104218-xsso34p.png" alt="Java泛型.png"></p><h4 id="实例：Object-泛型"><a href="#实例：Object-泛型" class="headerlink" title="实例：Object 泛型"></a>实例：Object 泛型</h4><p>在泛型中，如果指定了类型为 <code>Object</code> ，相当于不指定类型，可以存储任意的对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GenericsObjectDemo</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">List</span> <span class="variable">list</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">list.add(<span class="number">1</span>);</span><br><span class="line">list.add(<span class="string">&quot;Test&quot;</span>);</span><br><span class="line">list.add(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">System.out.println(<span class="string">&quot;Object泛型: &quot;</span> + list.toString());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><p><img src="/2020/11/25/Java%E6%B3%9B%E5%9E%8B/20201125153528-mjkxtgh-image-20210403104218-h5wsomx.png" alt="Java泛型.png"></p><h3 id="类型擦除引起的问题及解决方法"><a href="#类型擦除引起的问题及解决方法" class="headerlink" title="类型擦除引起的问题及解决方法"></a>类型擦除引起的问题及解决方法</h3><blockquote><p>转载自 cnblogs</p><p><a href="https://www.cnblogs.com/wuqinglong/p/9456193.html">https://www.cnblogs.com/wuqinglong/p/9456193.html</a></p></blockquote><p>因为种种原因，Java 不能实现真正的泛型，只能使用类型擦除来实现伪泛型，这样虽然不会有类型膨胀问题，但是也引起来许多新问题，所以，SUN 对这些问题做出了种种限制，避免我们发生各种错误。</p><h4 id="1-先检查，再编译以及编译的对象和引用传递问题"><a href="#1-先检查，再编译以及编译的对象和引用传递问题" class="headerlink" title="1.先检查，再编译以及编译的对象和引用传递问题"></a>1.先检查，再编译以及编译的对象和引用传递问题</h4><p>Q: 既然说类型变量会在编译的时候擦除掉，那为什么我们往 ArrayList 创建的对象中添加整数会报错呢？不是说泛型变量 String 会在编译的时候变为 Object 类型吗？为什么不能存别的类型呢？既然类型擦除了，如何保证我们只能使用泛型变量限定的类型呢？</p><p>A: Java 编译器是通过先检查代码中泛型的类型，然后在进行类型擦除，再进行编译。</p><p>例如：</p><figure class="highlight java"><figcaption><span>hljs</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span>  <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;  </span><br><span class="line"></span><br><span class="line">    ArrayList&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt;();  </span><br><span class="line">    list.add(<span class="string">&quot;123&quot;</span>);  </span><br><span class="line">    list.add(<span class="number">123</span>);<span class="comment">//编译错误  </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上面的程序中，使用<code>add</code>方法添加一个整型，在 IDE 中，直接会报错，说明这就是在编译之前的检查，因为如果是在编译之后检查，类型擦除后，原始类型为<code>Object</code>，是应该允许任意引用类型添加的。可实际上却不是这样的，这恰恰说明了关于泛型变量的使用，是会在编译之前检查的。</p><p>那么，这个类型检查是针对谁的呢？我们先看看参数化类型和原始类型的兼容。</p><p>以 ArrayList 举例子，以前的写法：</p><figure class="highlight java"><figcaption><span>hljs</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ArrayList</span> <span class="variable">list</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();  </span><br></pre></td></tr></table></figure><p>现在的写法：</p><figure class="highlight java"><figcaption><span>hljs</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ArrayList&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt;();</span><br></pre></td></tr></table></figure><p>如果是与以前的代码兼容，各种引用传值之间，必然会出现如下的情况：</p><figure class="highlight java"><figcaption><span>hljs</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ArrayList&lt;String&gt; list1 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>(); <span class="comment">//第一种 情况</span></span><br><span class="line"><span class="type">ArrayList</span> <span class="variable">list2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt;(); <span class="comment">//第二种 情况</span></span><br></pre></td></tr></table></figure><p>这样是没有错误的，不过会有个编译时警告。</p><p>不过在第一种情况，可以实现与完全使用泛型参数一样的效果，第二种则没有效果。</p><p>因为类型检查就是编译时完成的，<code>new ArrayList()</code>只是在内存中开辟了一个存储空间，可以存储任何类型对象，而真正设计类型检查的是它的引用，因为我们是使用它引用<code>list1</code>来调用它的方法，比如说调用<code>add</code>方法，所以<code>list1</code>引用能完成泛型类型的检查。而引用<code>list2</code>没有使用泛型，所以不行。</p><p>举例子：</p><figure class="highlight java"><figcaption><span>hljs</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;  </span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;  </span><br><span class="line"></span><br><span class="line">        ArrayList&lt;String&gt; list1 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>();  </span><br><span class="line">        list1.add(<span class="string">&quot;1&quot;</span>); <span class="comment">//编译通过  </span></span><br><span class="line">        list1.add(<span class="number">1</span>); <span class="comment">//编译错误  </span></span><br><span class="line">        <span class="type">String</span> <span class="variable">str1</span> <span class="operator">=</span> list1.get(<span class="number">0</span>); <span class="comment">//返回类型就是String  </span></span><br><span class="line"></span><br><span class="line">        <span class="type">ArrayList</span> <span class="variable">list2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt;();  </span><br><span class="line">        list2.add(<span class="string">&quot;1&quot;</span>); <span class="comment">//编译通过  </span></span><br><span class="line">        list2.add(<span class="number">1</span>); <span class="comment">//编译通过  </span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">object</span> <span class="operator">=</span> list2.get(<span class="number">0</span>); <span class="comment">//返回类型就是Object  </span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt;().add(<span class="string">&quot;11&quot;</span>); <span class="comment">//编译通过  </span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt;().add(<span class="number">22</span>); <span class="comment">//编译错误  </span></span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">str2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt;().get(<span class="number">0</span>); <span class="comment">//返回类型就是String  </span></span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><p>通过上面的例子，我们可以明白，类型检查就是针对引用的，谁是一个引用，用这个引用调用泛型方法，就会对这个引用调用的方法进行类型检测，而无关它真正引用的对象。</p><p>泛型中参数话类型为什么不考虑继承关系？</p><p>在 Java 中，像下面形式的引用传递是不允许的：</p><figure class="highlight java"><figcaption><span>hljs</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ArrayList&lt;String&gt; list1 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Object&gt;(); <span class="comment">//编译错误  </span></span><br><span class="line">ArrayList&lt;Object&gt; list2 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt;(); <span class="comment">//编译错误</span></span><br></pre></td></tr></table></figure><p>我们先看第一种情况，将第一种情况拓展成下面的形式：</p><figure class="highlight java"><figcaption><span>hljs</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ArrayList&lt;Object&gt; list1 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Object&gt;();  </span><br><span class="line">list1.add(<span class="keyword">new</span> <span class="title class_">Object</span>());  </span><br><span class="line">list1.add(<span class="keyword">new</span> <span class="title class_">Object</span>());  </span><br><span class="line">ArrayList&lt;String&gt; list2 = list1; <span class="comment">//编译错误</span></span><br></pre></td></tr></table></figure><p>实际上，在第 4 行代码的时候，就会有编译错误。那么，我们先假设它编译没错。那么当我们使用<code>list2</code>引用用<code>get()</code>方法取值的时候，返回的都是<code>String</code>类型的对象（上面提到了，类型检测是根据引用来决定的），可是它里面实际上已经被我们存放了<code>Object</code>类型的对象，这样就会有<code>ClassCastException</code>了。所以为了避免这种极易出现的错误，Java 不允许进行这样的引用传递。（这也是泛型出现的原因，就是为了解决类型转换的问题，我们不能违背它的初衷）。</p><p>再看第二种情况，将第二种情况拓展成下面的形式：</p><figure class="highlight java"><figcaption><span>hljs</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ArrayList&lt;String&gt; list1 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt;();  </span><br><span class="line">list1.add(<span class="keyword">new</span> <span class="title class_">String</span>());  </span><br><span class="line">list1.add(<span class="keyword">new</span> <span class="title class_">String</span>());</span><br><span class="line"></span><br><span class="line">ArrayList&lt;Object&gt; list2 = list1; <span class="comment">//编译错误</span></span><br></pre></td></tr></table></figure><p>没错，这样的情况比第一种情况好的多，最起码，在我们用<code>list2</code>取值的时候不会出现<code>ClassCastException</code>，因为是从<code>String</code>转换为<code>Object</code>。可是，这样做有什么意义呢，泛型出现的原因，就是为了解决类型转换的问题。我们使用了泛型，到头来，还是要自己强转，违背了泛型设计的初衷。所以 Java 不允许这么干。再说，你如果又用<code>list2</code>往里面<code>add()</code>新的对象，那么到时候取得时候，我怎么知道我取出来的到底是<code>String</code>类型的，还是<code>Object</code>类型的呢？</p><p><strong>所以，要格外注意，泛型中的引用传递的问题。</strong></p><h4 id="2-自动类型转换"><a href="#2-自动类型转换" class="headerlink" title="2.自动类型转换"></a>2.自动类型转换</h4><p>因为类型擦除的问题，所以所有的泛型类型变量最后都会被替换为原始类型。</p><p>既然都被替换为原始类型，那么为什么我们在获取的时候，不需要进行强制类型转换呢？</p><p>看下<code>ArrayList.get()</code>方法：</p><figure class="highlight java"><figcaption><span>hljs</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> E <span class="title function_">get</span><span class="params">(<span class="type">int</span> index)</span> &#123;  </span><br><span class="line"></span><br><span class="line">    RangeCheck(index);  </span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (E) elementData[index];  </span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，在<code>return</code>之前，会根据泛型变量进行强转。假设泛型类型变量为<code>Date</code>，虽然泛型信息会被擦除掉，但是会将<code>(E) elementData[index]</code>，编译为<code>(Date)elementData[index]</code>。所以我们不用自己进行强转。当存取一个泛型域时也会自动插入强制类型转换。假设<code>Pair</code>类的<code>value</code>域是<code>public</code>的，那么表达式：</p><figure class="highlight java"><figcaption><span>hljs</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Date</span> <span class="variable">date</span> <span class="operator">=</span> pair.value;</span><br></pre></td></tr></table></figure><p>也会自动地在结果字节码中插入强制类型转换。</p><h4 id="3-类型擦除与多态的冲突和解决方法"><a href="#3-类型擦除与多态的冲突和解决方法" class="headerlink" title="3.类型擦除与多态的冲突和解决方法"></a>3.类型擦除与多态的冲突和解决方法</h4><p>现在有这样一个泛型类：</p><figure class="highlight java"><figcaption><span>hljs</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Pair</span>&lt;T&gt; &#123;  </span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> T value;  </span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> T <span class="title function_">getValue</span><span class="params">()</span> &#123;  </span><br><span class="line">        <span class="keyword">return</span> value;  </span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setValue</span><span class="params">(T value)</span> &#123;  </span><br><span class="line">        <span class="built_in">this</span>.value = value;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后我们想要一个子类继承它。</p><figure class="highlight java"><figcaption><span>hljs</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">DateInter</span> <span class="keyword">extends</span> <span class="title class_">Pair</span>&lt;Date&gt; &#123;  </span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setValue</span><span class="params">(Date value)</span> &#123;  </span><br><span class="line">        <span class="built_in">super</span>.setValue(value);  </span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="keyword">public</span> Date <span class="title function_">getValue</span><span class="params">()</span> &#123;  </span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.getValue();  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个子类中，我们设定父类的泛型类型为<code>Pair&lt;Date&gt;</code>，在子类中，我们覆盖了父类的两个方法，我们的原意是这样的：将父类的泛型类型限定为<code>Date</code>，那么父类里面的两个方法的参数都为<code>Date</code>类型。</p><figure class="highlight java"><figcaption><span>hljs</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Date <span class="title function_">getValue</span><span class="params">()</span> &#123;  </span><br><span class="line">    <span class="keyword">return</span> value;  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setValue</span><span class="params">(Date value)</span> &#123;  </span><br><span class="line">    <span class="built_in">this</span>.value = value;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所以，我们在子类中重写这两个方法一点问题也没有，实际上，从他们的<code>@Override</code>标签中也可以看到，一点问题也没有，实际上是这样的吗？</p><p>分析：实际上，类型擦除后，父类的的泛型类型全部变为了原始类型<code>Object</code>，所以父类编译之后会变成下面的样子：</p><figure class="highlight java"><figcaption><span>hljs</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Pair</span> &#123;  </span><br><span class="line">    <span class="keyword">private</span> Object value;  </span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">getValue</span><span class="params">()</span> &#123;  </span><br><span class="line">        <span class="keyword">return</span> value;  </span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setValue</span><span class="params">(Object  value)</span> &#123;  </span><br><span class="line">        <span class="built_in">this</span>.value = value;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><p>再看子类的两个重写的方法的类型：</p><figure class="highlight java"><figcaption><span>hljs</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setValue</span><span class="params">(Date value)</span> &#123;  </span><br><span class="line">    <span class="built_in">super</span>.setValue(value);  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="meta">@Override</span>  </span><br><span class="line"><span class="keyword">public</span> Date <span class="title function_">getValue</span><span class="params">()</span> &#123;  </span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">super</span>.getValue();  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>先来分析<code>setValue</code>方法，父类的类型是<code>Object</code>，而子类的类型是<code>Date</code>，参数类型不一样，这如果实在普通的继承关系中，根本就不会是重写，而是重载。<br>　　<br>我们在一个 main 方法测试一下：</p><figure class="highlight java"><figcaption><span>hljs</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException &#123;  </span><br><span class="line">        <span class="type">DateInter</span> <span class="variable">dateInter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DateInter</span>();  </span><br><span class="line">        dateInter.setValue(<span class="keyword">new</span> <span class="title class_">Date</span>());    </span><br><span class="line">        dateInter.setValue(<span class="keyword">new</span> <span class="title class_">Object</span>()); <span class="comment">//编译错误  </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果是重载，那么子类中两个<code>setValue</code>方法，一个是参数<code>Object</code>类型，一个是<code>Date</code>类型，可是我们发现，根本就没有这样的一个子类继承自父类的 Object 类型参数的方法。所以说，却是是重写了，而不是重载了。</p><p>为什么会这样呢？</p><p>原因是这样的，我们传入父类的泛型类型是<code>Date，Pair&lt;Date&gt;</code>，我们的本意是将泛型类变为如下：</p><figure class="highlight java"><figcaption><span>hljs</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Pair</span> &#123;  </span><br><span class="line">    <span class="keyword">private</span> Date value;  </span><br><span class="line">    <span class="keyword">public</span> Date <span class="title function_">getValue</span><span class="params">()</span> &#123;  </span><br><span class="line">        <span class="keyword">return</span> value;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setValue</span><span class="params">(Date value)</span> &#123;  </span><br><span class="line">        <span class="built_in">this</span>.value = value;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后再子类中重写参数类型为 Date 的那两个方法，实现继承中的多态。</p><p>可是由于种种原因，虚拟机并不能将泛型类型变为<code>Date</code>，只能将类型擦除掉，变为原始类型<code>Object</code>。这样，我们的本意是进行重写，实现多态。可是类型擦除后，只能变为了重载。这样，类型擦除就和多态有了冲突。JVM 知道你的本意吗？知道！！！可是它能直接实现吗，不能！！！如果真的不能的话，那我们怎么去重写我们想要的<code>Date</code>类型参数的方法啊。</p><p>于是 JVM 采用了一个特殊的方法，来完成这项功能，那就是桥方法。</p><p>首先，我们用<code>javap -c className</code>的方式反编译下<code>DateInter</code>子类的字节码，结果如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">class com.tao.test.DateInter extends com.tao.test.Pair&lt;java.util.Date&gt; &#123;  </span><br><span class="line">  com.tao.test.DateInter();  </span><br><span class="line">    Code:  </span><br><span class="line">       0: aload_0  </span><br><span class="line">       1: invokespecial #8                  // Method com/tao/test/Pair.&quot;&lt;init&gt;&quot;:()V  </span><br><span class="line">       4: return  </span><br><span class="line"></span><br><span class="line">  public void setValue(java.util.Date);  //我们重写的setValue方法  </span><br><span class="line">    Code:  </span><br><span class="line">       0: aload_0  </span><br><span class="line">       1: aload_1  </span><br><span class="line">       2: invokespecial #16                 // Method com/tao/test/Pair.setValue:(Ljava/lang/Object;)V  </span><br><span class="line">       5: return  </span><br><span class="line"></span><br><span class="line">  public java.util.Date getValue();    //我们重写的getValue方法  </span><br><span class="line">    Code:  </span><br><span class="line">       0: aload_0  </span><br><span class="line">       1: invokespecial #23                 // Method com/tao/test/Pair.getValue:()Ljava/lang/Object;  </span><br><span class="line">       4: checkcast     #26                 // class java/util/Date  </span><br><span class="line">       7: areturn  </span><br><span class="line"></span><br><span class="line">  public java.lang.Object getValue();     //编译时由编译器生成的巧方法  </span><br><span class="line">    Code:  </span><br><span class="line">       0: aload_0  </span><br><span class="line">       1: invokevirtual #28                 // Method getValue:()Ljava/util/Date 去调用我们重写的getValue方法;  </span><br><span class="line">       4: areturn  </span><br><span class="line"></span><br><span class="line">  public void setValue(java.lang.Object);   //编译时由编译器生成的巧方法  </span><br><span class="line">    Code:  </span><br><span class="line">       0: aload_0  </span><br><span class="line">       1: aload_1  </span><br><span class="line">       2: checkcast     #26                 // class java/util/Date  </span><br><span class="line">       5: invokevirtual #30                 // Method setValue:(Ljava/util/Date; 去调用我们重写的setValue方法)V  </span><br><span class="line">       8: return  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从编译的结果来看，我们本意重写<code>setValue</code>和<code>getValue</code>方法的子类，竟然有 4 个方法，其实不用惊奇，最后的两个方法，就是编译器自己生成的桥方法。可以看到桥方法的参数类型都是 Object，也就是说，子类中真正覆盖父类两个方法的就是这两个我们看不到的桥方法。而打在我们自己定义的<code>setvalue</code>和<code>getValue</code>方法上面的<code>@Oveerride</code>只不过是假象。而桥方法的内部实现，就只是去调用我们自己重写的那两个方法。</p><p>所以，虚拟机巧妙的使用了桥方法，来解决了类型擦除和多态的冲突。</p><p>不过，要提到一点，这里面的<code>setValue</code>和<code>getValue</code>这两个桥方法的意义又有不同。</p><p><code>setValue</code>方法是为了解决类型擦除与多态之间的冲突。</p><p>而<code>getValue</code>却有普遍的意义，怎么说呢，如果这是一个普通的继承关系：</p><p>那么父类的<code>setValue</code>方法如下：</p><figure class="highlight java"><figcaption><span>hljs</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">ObjectgetValue</span><span class="params">()</span> &#123;  </span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">super</span>.getValue();  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而子类重写的方法是：</p><figure class="highlight java"><figcaption><span>hljs</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Date <span class="title function_">getValue</span><span class="params">()</span> &#123;  </span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">super</span>.getValue();  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其实这在普通的类继承中也是普遍存在的重写，这就是”协变”[^1]</p><p>并且，还有一点也许会有疑问，子类中的巧方法<code>Object getValue()</code>和<code>Date getValue()</code>是同 时存在的，可是如果是常规的两个方法，他们的方法签名是一样的，也就是说虚拟机根本不能分别这两个方法。如果是我们自己编写 Java 代码，这样的代码是无法通过编译器的检查的，但是虚拟机却是允许这样做的，因为虚拟机通过参数类型和返回类型来确定一个方法，所以编译器为了实现泛型的多态允许自己做这个看起来“不合法”的事情，然后交给虚拟器去区别。</p><h4 id="4-泛型类型变量不能是基本数据类型"><a href="#4-泛型类型变量不能是基本数据类型" class="headerlink" title="4.泛型类型变量不能是基本数据类型"></a>4.泛型类型变量不能是基本数据类型</h4><p>不能用类型参数替换基本类型。就比如，没有<code>ArrayList&lt;double&gt;</code>，只有<code>ArrayList&lt;Double&gt;</code>。因为当类型擦除后，<code>ArrayList</code>的原始类型变为<code>Object</code>，但是<code>Object</code>类型不能存储<code>double</code>值，只能引用<code>Double</code>的值。</p><h4 id="5-编译时集合的-instanceof"><a href="#5-编译时集合的-instanceof" class="headerlink" title="5.编译时集合的 instanceof"></a>5.编译时集合的 instanceof</h4><figure class="highlight java"><figcaption><span>hljs</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ArrayList&lt;String&gt; arrayList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt;();</span><br></pre></td></tr></table></figure><p>因为类型擦除之后，<code>ArrayList&lt;String&gt;</code>只剩下原始类型，泛型信息<code>String</code>不存在了。</p><p>那么，编译时进行类型查询的时候使用下面的方法是错误的</p><figure class="highlight java"><figcaption><span>hljs</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>( arrayList <span class="keyword">instanceof</span> ArrayList&lt;String&gt;)</span><br></pre></td></tr></table></figure><h4 id="6-泛型在静态方法和静态类中的问题"><a href="#6-泛型在静态方法和静态类中的问题" class="headerlink" title="6.泛型在静态方法和静态类中的问题"></a>6.泛型在静态方法和静态类中的问题</h4><p>泛型类中的静态方法和静态变量不可以使用泛型类所声明的泛型类型参数</p><p>举例说明：</p><figure class="highlight java"><figcaption><span>hljs</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test2</span>&lt;T&gt; &#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> T one;   <span class="comment">//编译错误  </span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span>  T <span class="title function_">show</span><span class="params">(T one)</span>&#123; <span class="comment">//编译错误  </span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为泛型类中的泛型参数的实例化是在定义对象的时候指定的，而静态变量和静态方法不需要使用对象来调用。对象都没有创建，如何确定这个泛型参数是何种类型，所以当然是错误的。</p><p>但是要注意区分下面的一种情况：</p><figure class="highlight java"><figcaption><span>hljs</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test2</span>&lt;T&gt; &#123;  </span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T &gt;T <span class="title function_">show</span><span class="params">(T one)</span>&#123; <span class="comment">//这是正确的  </span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为这是一个泛型方法，在泛型方法中使用的 T 是自己在方法中定义的 T，而不是泛型类中的 T。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java Core </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从BIEE 12看数据仓库</title>
      <link href="/2020/06/19/%E4%BB%8EBIEE%E7%9C%8B%E6%95%B0%E6%8D%AE%E4%BB%93%E5%BA%93/"/>
      <url>/2020/06/19/%E4%BB%8EBIEE%E7%9C%8B%E6%95%B0%E6%8D%AE%E4%BB%93%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<h1 id="从-BIEE-12-看数据仓库"><a href="#从-BIEE-12-看数据仓库" class="headerlink" title="从 BIEE 12 看数据仓库"></a>从 BIEE 12 看数据仓库</h1><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><h4 id="OLTP"><a href="#OLTP" class="headerlink" title="OLTP"></a>OLTP</h4><ul><li>OLTP 即联机事务处理(On-Line Transaction Processing)，主要指发生在<strong>操作型系统</strong>上的面向事务的操作，这里的事务特指业务上的统一且不可分割的一系列操作，而不是数据库中增删改查的单个原子操作。</li><li>OLTP 经常触发 CRUD 操作（CRUD 是指在做计算处理时的增加(Create)、读取查询(Retrieve)、更新(Update)和删除(Delete)），是插入和更新密集型操作，要求（超）高并发，响应快。<strong>ORCALE EBS</strong>系统就是一个例子：用户在订单管理器创建订单，供应商的可用余额扣减，库存的可用量也同时扣减。从数据库角度上看，涉及到两个表（简化模型，实际涉及多张表）的更新操作，也就是发生了两个单独的 update；但是从业务的角度上来说，这是同一个事务，即更新供应商余额和扣减库存必须同时成功，其中一个失败，整个事务必须回滚到处理前的结果。</li></ul><h4 id="OLAP"><a href="#OLAP" class="headerlink" title="OLAP"></a>OLAP</h4><ul><li>OLAP 即联机分析处理(On-Line Analytical Processing)，主要指发生在<strong>分析型系统</strong>上的面向多维度查询操作，通常在装载数据前需要清洗和转换。</li><li>OLAP 处理的事务相对<strong>操作型系统</strong>来说较少，但是查询通常对历史的、归档的数据进行非常复杂的逻辑，如聚合计算，大量表关联等，属于查询密集型操作，要求能够体现多维度，多主题，高整合度，能够反映变化趋势的数据。<strong>Oracle BIEE</strong>上展现报表诸如<strong>库存账龄、追溯库存历史、现金流</strong>等，是对整个数据库业务数据的高度检索，能够反映出业务数据的同比（去年同期）和环比(同年不同季)。</li></ul><table><thead><tr><th>对比项</th><th>OLAP</th><th>OLTP</th></tr></thead><tbody><tr><td>数据源</td><td>可能来源于多个不同的业务系统，主要是历史、归档的数据</td><td>当前系统业务操作的所有明细记录都要保存</td></tr><tr><td>操作</td><td>注重于大量表的查询和聚合计算，数据装载量大</td><td>注重更新和插入，要求执行速度快，并发量大</td></tr><tr><td>应用</td><td>决策支持系统，报表分析系统</td><td>在线的交易、管理系统</td></tr><tr><td>用户</td><td>管理人员、分析人员</td><td>终端用户</td></tr><tr><td>数据模型</td><td>雪花型或星型模型</td><td>实体关系模型</td></tr><tr><td>备份</td><td>按天增量同步，若数据丢失需要从操作型系统重新装载</td><td>全量定期备份，数据不可丢失</td></tr><tr><td>时间</td><td>以年为单位</td><td>从天到年</td></tr><tr><td>空间要求</td><td>存放多个系统的数据的数据仓库，空间要求大</td><td>仅存放当前操作数据，空间要求小</td></tr><tr><td></td><td></td><td></td></tr></tbody></table><h4 id="数据仓库定义"><a href="#数据仓库定义" class="headerlink" title="数据仓库定义"></a>数据仓库定义</h4><p>数据仓库描述为一个面向主题的、集成的、随时间变化的、非易失的数据集合，用于支持管理者的决策过程。数据仓库通过抽取一个或多个系统的数据，经过清洗、转换装载到新的数据库中，它是 OLAP 的基础。</p><h5 id="数据仓库的必要性"><a href="#数据仓库的必要性" class="headerlink" title="数据仓库的必要性"></a>数据仓库的必要性</h5><ul><li>数据的类型非常多，除了不同数据库需要特定的一个仓库兼容以外，还有各种各样的文件类型（如 xls、CSV、HTML、XML 等）</li><li>出于权限控制的要求，一个用户不能同时访问多个系统或多个数据表</li><li>用户需要看的字段，在数据库中可能需要一定的转换才能呈现，而每次发生业务变更后可能都需要额外编写这些字段，导致工作重复</li><li>系统以联机事务处理为主，频繁访问分析数据，可能会导致性能变差</li></ul><h5 id="数据仓库的特性"><a href="#数据仓库的特性" class="headerlink" title="数据仓库的特性"></a>数据仓库的特性</h5><ul><li>面向主题：拥有通过划分主题定义数据仓库的能力</li><li>集成：即面对多个系统、多个数据库，能够统一转换后存放在一起。同时能够解决命名冲突的问题</li><li>随时间变化：数据仓库关注的是数据随时间变化的情况，并且能反映在过去某个时间点的数据是怎样的。</li><li>稳定：一旦进入到数据仓库中，数据就不应该再有改变。</li><li>粒度：粒度之所以是数据仓库环境的关键设计问题，是因为它极大地影响数据仓库的数据量和可以进行的查询类型。粒度级别越低，数据量越大，查询的细节程度越高，查询范围越广泛，反之亦然。</li></ul><h2 id="数据仓库概念设计"><a href="#数据仓库概念设计" class="headerlink" title="数据仓库概念设计"></a>数据仓库概念设计</h2><h4 id="基本架构"><a href="#基本架构" class="headerlink" title="基本架构"></a>基本架构</h4><p><img src="/2020/06/19/%E4%BB%8EBIEE%E7%9C%8B%E6%95%B0%E6%8D%AE%E4%BB%93%E5%BA%93/20201023090140-167pjok-image.png" alt="image.png"></p><h4 id="数据需求"><a href="#数据需求" class="headerlink" title="数据需求"></a>数据需求</h4><h5 id="事实和维度"><a href="#事实和维度" class="headerlink" title="事实和维度"></a>事实和维度</h5><ol><li>明确业务范围，想清楚要设立的主题有哪些，主题下面的分析表有多少，然后确定装载数据的 ER 实体关系，每一个实体关系就是一个事实。</li><li>明确维度指标的范围，维度的范围随着业务范围改变而改变。<br>财务主题常用的维度一般有账龄、帐簿、成本中心、会计科目、法人、经营单位、客户、供应商、供应商地点、位置、销售员等；<br>库存主题常用的维度一般有物料、库存组织、子库存、货位、批次号、物料账龄等；<br>通用的维度一般有时间维度，按年月日存放。</li><li>明确事实表所选用的数据模型，一般从星型和和雪花型中选择。在雪花模式中，一个维度被规范化成多个关联的表，而在星型模式中，每个维度由一个单一的维度表所表示。<br>例如：单一的时间维度，在星型模型中，包含年份、月份、天，都存放在同一个表里，而雪花型中区分为年份维，月份维和天数维；产品维度分解成产品分类、产品两个表。</li></ol><h5 id="数据需求-1"><a href="#数据需求-1" class="headerlink" title="数据需求"></a>数据需求</h5><ol><li>时效性：明确时间粒度，对于时效性较强的数据，抓取的数据频率要提高，但是对于分析型系统而言一般不需要很强的实时性，一般把抓取数据的频率定为以一天为粒度。</li><li>追溯性：从业务系统中生成到 BIEE 的分析表要根据实际情况，部分分析表会有查询到某一历史事件点的需求。</li></ol>]]></content>
      
      
      <categories>
          
          <category> ORACLE BIEE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DATAWARE HOUSE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BIEE Client报表开发</title>
      <link href="/2020/01/23/BIEE%E6%8A%A5%E8%A1%A8%E5%BC%80%E5%8F%91/"/>
      <url>/2020/01/23/BIEE%E6%8A%A5%E8%A1%A8%E5%BC%80%E5%8F%91/</url>
      
        <content type="html"><![CDATA[<h1 id="BIEE-Client-报表开发"><a href="#BIEE-Client-报表开发" class="headerlink" title="BIEE Client 报表开发"></a>BIEE Client 报表开发</h1><h2 id="以开发”库存账龄报表”为例"><a href="#以开发”库存账龄报表”为例" class="headerlink" title="以开发”库存账龄报表”为例"></a>以开发”库存账龄报表”为例</h2><h3 id="SRC-层元数据"><a href="#SRC-层元数据" class="headerlink" title="SRC 层元数据"></a>SRC 层元数据</h3><h5 id="先打开-erp-的报表-package，找到所有需要的报表"><a href="#先打开-erp-的报表-package，找到所有需要的报表" class="headerlink" title="先打开 erp 的报表 package，找到所有需要的报表"></a>先打开 erp 的报表 package，找到所有需要的报表</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mtl_system_items_b           msi,</span><br><span class="line">mtl_safety_stocks            ms,</span><br><span class="line">mtl_onhand_quantities_detail moq,</span><br><span class="line">mtl_material_transactions    mmt,</span><br><span class="line">mtl_transaction_lot_numbers  mtln</span><br></pre></td></tr></table></figure><h5 id="在-SRC-层复制相同的一份表结构，命名为-S-XXXXX。这里是在-BI-SRC-用户下创建如下表"><a href="#在-SRC-层复制相同的一份表结构，命名为-S-XXXXX。这里是在-BI-SRC-用户下创建如下表" class="headerlink" title="在 SRC 层复制相同的一份表结构，命名为 S_XXXXX。这里是在 BI_SRC 用户下创建如下表"></a>在 SRC 层复制相同的一份表结构，命名为 S_XXXXX。这里是在 BI_SRC 用户下创建如下表</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">BI_SRC.s_mtl_system_items_b           msi,</span><br><span class="line">BI_SRC.s_mtl_safety_stocks            ms,</span><br><span class="line">BI_SRC.s_mtl_onhand_quantities_detail moq,</span><br><span class="line">BI_SRC.s_mtl_material_transactions    mmt,</span><br><span class="line">BI_SRC.mtl_transaction_lot_numbers    mtln</span><br></pre></td></tr></table></figure><h6 id="创建方式"><a href="#创建方式" class="headerlink" title="创建方式"></a>创建方式</h6><p>以 mtl_safety_stocks 为例，找到基表 inv.mtl_safety_stocks，右键-&gt; 编辑-&gt; 列-&gt; 查看 SQL</p><p><img src="/2020/01/23/BIEE%E6%8A%A5%E8%A1%A8%E5%BC%80%E5%8F%91/20201023091055-1sjn1mw-image.png" alt="image.png"></p><p>复制 create table 语句<img src="/2020/01/23/BIEE%E6%8A%A5%E8%A1%A8%E5%BC%80%E5%8F%91/20201023091108-ukhqfd1-image.png" alt="image.png"></p><p>对应的 SQL 语句</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 修改后的语句</span></span><br><span class="line"><span class="comment">-- 修改表名</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> BI_SRC.S_MTL_SAFETY_STOCKS</span><br><span class="line">(</span><br><span class="line">  inventory_item_id      NUMBER <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">  organization_id        NUMBER <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">  effectivity_date       <span class="type">DATE</span> <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">  last_update_date       <span class="type">DATE</span> <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">  last_updated_by        NUMBER <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">  creation_date          <span class="type">DATE</span> <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">  created_by             NUMBER <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">  last_update_login      NUMBER,</span><br><span class="line">  safety_stock_code      NUMBER,</span><br><span class="line">  safety_stock_quantity  NUMBER <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">  safety_stock_percent   NUMBER,</span><br><span class="line">  service_level          NUMBER,</span><br><span class="line">  attribute_category     VARCHAR2(<span class="number">30</span>),</span><br><span class="line">  attribute1             VARCHAR2(<span class="number">150</span>),</span><br><span class="line">  attribute2             VARCHAR2(<span class="number">150</span>),</span><br><span class="line">  attribute3             VARCHAR2(<span class="number">150</span>),</span><br><span class="line">  attribute4             VARCHAR2(<span class="number">150</span>),</span><br><span class="line">  attribute5             VARCHAR2(<span class="number">150</span>),</span><br><span class="line">  attribute6             VARCHAR2(<span class="number">150</span>),</span><br><span class="line">  attribute7             VARCHAR2(<span class="number">150</span>),</span><br><span class="line">  attribute8             VARCHAR2(<span class="number">150</span>),</span><br><span class="line">  attribute9             VARCHAR2(<span class="number">150</span>),</span><br><span class="line">  attribute10            VARCHAR2(<span class="number">150</span>),</span><br><span class="line">  attribute11            VARCHAR2(<span class="number">150</span>),</span><br><span class="line">  attribute12            VARCHAR2(<span class="number">150</span>),</span><br><span class="line">  attribute13            VARCHAR2(<span class="number">150</span>),</span><br><span class="line">  attribute14            VARCHAR2(<span class="number">150</span>),</span><br><span class="line">  attribute15            VARCHAR2(<span class="number">150</span>),</span><br><span class="line">  request_id             NUMBER,</span><br><span class="line">  program_application_id NUMBER,</span><br><span class="line">  program_id             NUMBER,</span><br><span class="line">  program_update_date    <span class="type">DATE</span>,</span><br><span class="line">  forecast_designator    VARCHAR2(<span class="number">10</span>),</span><br><span class="line">  project_id             NUMBER,</span><br><span class="line">  task_id                NUMBER,</span><br><span class="line">  <span class="comment">--新增修改日期字段</span></span><br><span class="line">  UPDATE_DT              <span class="type">DATE</span></span><br><span class="line">)</span><br><span class="line">tablespace BI_SRC_DAT   <span class="comment">--修改表空间</span></span><br><span class="line">  pctfree <span class="number">10</span></span><br><span class="line">  initrans <span class="number">10</span></span><br><span class="line">  maxtrans <span class="number">255</span></span><br><span class="line">  storage</span><br><span class="line">  (</span><br><span class="line">    <span class="keyword">initial</span> <span class="number">128</span>K</span><br><span class="line">    next <span class="number">128</span>K</span><br><span class="line">    minextents <span class="number">1</span></span><br><span class="line">    maxextents unlimited</span><br><span class="line">    pctincrease <span class="number">0</span></span><br><span class="line">  );</span><br><span class="line"><span class="comment">-- 修改索引名称</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">unique</span> index BI_SRC.S_MTL_SAFETY_STOCKS_U1 <span class="keyword">on</span> BI_SRC.S_MTL_SAFETY_STOCKS (INVENTORY_ITEM_ID, ORGANIZATION_ID, EFFECTIVITY_DATE, PROJECT_ID, TASK_ID)</span><br><span class="line">  tablespace BI_SRC_DIX  <span class="comment">--修改索引空间</span></span><br><span class="line">  pctfree <span class="number">10</span></span><br><span class="line">  initrans <span class="number">11</span></span><br><span class="line">  maxtrans <span class="number">255</span></span><br><span class="line">  storage</span><br><span class="line">  (</span><br><span class="line">    <span class="keyword">initial</span> <span class="number">128</span>K</span><br><span class="line">    next <span class="number">128</span>K</span><br><span class="line">    minextents <span class="number">1</span></span><br><span class="line">    maxextents unlimited</span><br><span class="line">    pctincrease <span class="number">0</span></span><br><span class="line">  )</span><br><span class="line">  NOLOGGING;</span><br></pre></td></tr></table></figure><p>打开 kettle，新建一个转换，配置好 EBS 数据库和 SRC 数据库信息</p><p><img src="/2020/01/23/BIEE%E6%8A%A5%E8%A1%A8%E5%BC%80%E5%8F%91/20201023091346-bgv7dty-image.png" alt="image.png"></p><p>在”核心对象-&gt; 输入”选好“表输入”，在”核心对象-&gt; 输出”选好“表输出”。在表输入按住 shift 拖动到表输出，会有中间的蓝色线，把它们连起来</p><p><img src="/2020/01/23/BIEE%E6%8A%A5%E8%A1%A8%E5%BC%80%E5%8F%91/20201023091357-99julig-image.png" alt="image.png"></p><p>双击“表输出”配置表输出信息【注：这里勾选裁剪表，会导致全量同步】</p><p><img src="/2020/01/23/BIEE%E6%8A%A5%E8%A1%A8%E5%BC%80%E5%8F%91/20201023091419-1hcj9re-image.png" alt="image.png"></p><p>右键原有的 ebs 基表-&gt; 描述，如 INV.MTL_SAFETY_STOCKS，选择“逗号分隔复制”</p><p><img src="/2020/01/23/BIEE%E6%8A%A5%E8%A1%A8%E5%BC%80%E5%8F%91/20201023091431-pytxbod-image.png" alt="image.png"></p><p>整理以后如下</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> inventory_item_id,</span><br><span class="line">       organization_id,</span><br><span class="line">       effectivity_date,</span><br><span class="line">       last_update_date,</span><br><span class="line">       last_updated_by,</span><br><span class="line">       creation_date,</span><br><span class="line">       created_by,</span><br><span class="line">       last_update_login,</span><br><span class="line">       safety_stock_code,</span><br><span class="line">       safety_stock_quantity,</span><br><span class="line">       safety_stock_percent,</span><br><span class="line">       service_level,</span><br><span class="line">       attribute_category,</span><br><span class="line">       attribute1,</span><br><span class="line">       attribute2,</span><br><span class="line">       attribute3,</span><br><span class="line">       attribute4,</span><br><span class="line">       attribute5,</span><br><span class="line">       attribute6,</span><br><span class="line">       attribute7,</span><br><span class="line">       attribute8,</span><br><span class="line">       attribute9,</span><br><span class="line">       attribute10,</span><br><span class="line">       attribute11,</span><br><span class="line">       attribute12,</span><br><span class="line">       attribute13,</span><br><span class="line">       attribute14,</span><br><span class="line">       attribute15,</span><br><span class="line">       request_id,</span><br><span class="line">       program_application_id,</span><br><span class="line">       program_id,</span><br><span class="line">       program_update_date,</span><br><span class="line">       forecast_designator,</span><br><span class="line">       project_id,</span><br><span class="line">       task_id</span><br><span class="line">  <span class="keyword">FROM</span> INV.MTL_SAFETY_STOCKS</span><br></pre></td></tr></table></figure><p>然后双击“表输入”配置表输入信息，把整理好的代码粘贴进去</p><p><img src="/2020/01/23/BIEE%E6%8A%A5%E8%A1%A8%E5%BC%80%E5%8F%91/20201023091507-vju1spg-image.png" alt="image.png"></p><p>保存该转换，命名为 S_MTL_SAFETY_STOCKS</p><p>运行该转换，如果报错查看”日志”，这里提示表或视图不存在，把表输出配置改一下即可</p><p><img src="/2020/01/23/BIEE%E6%8A%A5%E8%A1%A8%E5%BC%80%E5%8F%91/20201023091522-mlrxxep-image.png" alt="image.png"></p><p><img src="/2020/01/23/BIEE%E6%8A%A5%E8%A1%A8%E5%BC%80%E5%8F%91/20201023091528-t5z3ryn-image.png" alt="image.png"></p><p>确认结果</p><p><img src="/2020/01/23/BIEE%E6%8A%A5%E8%A1%A8%E5%BC%80%E5%8F%91/20201023091537-77mvupl-image.png" alt="image.png"></p><p><strong>同一个报表的其他基表按照此方法先同步数据到 BI_SRC 层即可</strong></p><h3 id="DIM-层维度表"><a href="#DIM-层维度表" class="headerlink" title="DIM 层维度表"></a>DIM 层维度表</h3><p>这一层一般存放分析使用的维度表</p><p>新建库存组织、货位、子库存、物料的维度。这四张表要先同步基表到 BI_SRC 层，这里不再赘述</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">inv.mtl_secondary_inventories</span><br><span class="line">inv.mtl_item_locations</span><br><span class="line">Inv.mtl_system_items_b  </span><br><span class="line">HR.HR_ALL_ORGANIZATION_UNITS  </span><br><span class="line"></span><br><span class="line"><span class="comment">--由于这个报表是库存账龄表，还需要一张账龄区间的维度表</span></span><br><span class="line">BI_DIM.DIM_AGE  </span><br></pre></td></tr></table></figure><p>根据实际业务需求划分账龄区间</p><p><img src="/2020/01/23/BIEE%E6%8A%A5%E8%A1%A8%E5%BC%80%E5%8F%91/20201023091629-gi6s3qi-image.png" alt="image.png"></p><p>账龄维度表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- Create table</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> BI_DIM.DIM_AGE</span><br><span class="line">(</span><br><span class="line">  age_wid  NUMBER(<span class="number">10</span>),</span><br><span class="line">  age_name VARCHAR2(<span class="number">100</span>),</span><br><span class="line">  age_low  NUMBER,</span><br><span class="line">  age_high NUMBER</span><br><span class="line">)</span><br><span class="line">tablespace BI_DW_DAT</span><br><span class="line">  pctfree <span class="number">10</span></span><br><span class="line">  initrans <span class="number">1</span></span><br><span class="line">  maxtrans <span class="number">255</span></span><br><span class="line">  storage</span><br><span class="line">  (</span><br><span class="line">    <span class="keyword">initial</span> <span class="number">64</span>K</span><br><span class="line">    next <span class="number">1</span>M</span><br><span class="line">    minextents <span class="number">1</span></span><br><span class="line">    maxextents unlimited</span><br><span class="line">  )</span><br><span class="line">nologging;</span><br><span class="line"><span class="comment">-- Add comments to the table </span></span><br><span class="line">comment <span class="keyword">on</span> <span class="keyword">table</span> BI_DIM.DIM_AGE</span><br><span class="line">  <span class="keyword">is</span> <span class="string">&#x27;账龄段;</span></span><br></pre></td></tr></table></figure><p>创建维度存储过程，这里以货位为例</p><p>编写所需的字段 SQL</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> t.inventory_location_id,</span><br><span class="line">           t.segment1 <span class="operator">||</span> <span class="string">&#x27;.&#x27;</span> <span class="operator">||</span> t.segment2 <span class="operator">||</span> <span class="string">&#x27;.&#x27;</span> <span class="operator">||</span> t.segment3,</span><br><span class="line">           t.description,</span><br><span class="line">           t.segment1,</span><br><span class="line">           t.segment2,</span><br><span class="line">           t.segment3,</span><br><span class="line">           t.organization_id,</span><br><span class="line">           t.inventory_item_id,</span><br><span class="line">           t.subinventory_code</span><br><span class="line">      <span class="keyword">FROM</span> bi_src.s_mtl_item_locations t</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>根据 SQL，在 BI_DIM 层创建维度表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- Create table</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> DIM_ITEM_LOCATION</span><br><span class="line">(</span><br><span class="line">  location_wid          NUMBER(<span class="number">10</span>),</span><br><span class="line">  inventory_location_id NUMBER,</span><br><span class="line">  locator_name          VARCHAR2(<span class="number">255</span>),</span><br><span class="line">  locator_desc          VARCHAR2(<span class="number">500</span>),</span><br><span class="line">  segment1              VARCHAR2(<span class="number">255</span>),</span><br><span class="line">  segment2              VARCHAR2(<span class="number">255</span>),</span><br><span class="line">  segment3              VARCHAR2(<span class="number">255</span>),</span><br><span class="line">  organization_id       NUMBER,</span><br><span class="line">  inventory_item_id     NUMBER,</span><br><span class="line">  subinventory_code     VARCHAR2(<span class="number">255</span>),</span><br><span class="line">  effective_from_dt     <span class="type">DATE</span>,</span><br><span class="line">  effective_to_dt       <span class="type">DATE</span>,</span><br><span class="line">  delete_flg            <span class="type">CHAR</span>(<span class="number">1</span>),</span><br><span class="line">  current_flg           <span class="type">CHAR</span>(<span class="number">1</span>),</span><br><span class="line">  w_insert_dt           <span class="type">DATE</span>,</span><br><span class="line">  w_update_dt           <span class="type">DATE</span>,</span><br><span class="line">  datasource_num_id     NUMBER,</span><br><span class="line">  etl_proc_id           VARCHAR2(<span class="number">50</span>),</span><br><span class="line">  etl_proc_name         VARCHAR2(<span class="number">50</span>),</span><br><span class="line">  integration_id        VARCHAR2(<span class="number">500</span>),</span><br><span class="line">  x_custom              VARCHAR2(<span class="number">50</span>)</span><br><span class="line">)</span><br><span class="line">tablespace BI_DW_DAT</span><br><span class="line">  pctfree <span class="number">10</span></span><br><span class="line">  initrans <span class="number">1</span></span><br><span class="line">  maxtrans <span class="number">255</span></span><br><span class="line">  storage</span><br><span class="line">  (</span><br><span class="line">    <span class="keyword">initial</span> <span class="number">64</span>K</span><br><span class="line">    next <span class="number">1</span>M</span><br><span class="line">    minextents <span class="number">1</span></span><br><span class="line">    maxextents unlimited</span><br><span class="line">  )</span><br><span class="line">nologging;</span><br><span class="line"><span class="comment">-- Add comments to the table </span></span><br><span class="line">comment <span class="keyword">on</span> <span class="keyword">table</span> DIM_ITEM_LOCATION</span><br><span class="line">  <span class="keyword">is</span> <span class="string">&#x27;物料货位维;</span></span><br></pre></td></tr></table></figure><p>创建存储过程</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">OR</span> REPLACE <span class="keyword">PROCEDURE</span> SP_DIM_ITEM_LOCATION(P_START_DAY <span class="keyword">IN</span> NUMBER,</span><br><span class="line">                                                 P_END_DAY   <span class="keyword">IN</span> NUMBER,</span><br><span class="line">                                                 P_PROC_ID   <span class="keyword">IN</span> NUMBER) <span class="keyword">IS</span></span><br><span class="line">  V_START_DAY  NUMBER(<span class="number">10</span>) :<span class="operator">=</span> P_START_DAY;</span><br><span class="line">  V_END_DAY    NUMBER(<span class="number">10</span>) :<span class="operator">=</span> P_END_DAY;</span><br><span class="line">  V_PROC_ID    NUMBER(<span class="number">8</span>) :<span class="operator">=</span> P_PROC_ID;</span><br><span class="line">  V_MAX_ROWNUM NUMBER(<span class="number">10</span>);</span><br><span class="line">  V_START_TIME <span class="type">TIMESTAMP</span>; <span class="comment">--开始时间</span></span><br><span class="line">  V_END_TIME   <span class="type">TIMESTAMP</span>; <span class="comment">--结束时间</span></span><br><span class="line">  L_LOG        BI_DW.W_ETL_LOG<span class="operator">%</span>ROWTYPE; <span class="comment">--日志表游标</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">  <span class="comment">--记录程序开始时间</span></span><br><span class="line">  <span class="keyword">SELECT</span> <span class="built_in">CURRENT_TIMESTAMP</span> <span class="keyword">INTO</span> V_START_TIME <span class="keyword">FROM</span> DUAL;</span><br><span class="line"></span><br><span class="line">  <span class="comment">--记录日志</span></span><br><span class="line">  L_LOG.PROC_NAME       :<span class="operator">=</span> <span class="string">&#x27;SP_DIM_ITEM_LOCATION&#x27;</span>; <span class="comment">--过程名称</span></span><br><span class="line">  L_LOG.TABLE_TYPE      :<span class="operator">=</span> <span class="string">&#x27;D&#x27;</span>; <span class="comment">--表类型</span></span><br><span class="line">  L_LOG.TABLE_NAME      :<span class="operator">=</span> <span class="string">&#x27;DIM_ITEM_LOCATION&#x27;</span>; <span class="comment">--表名称</span></span><br><span class="line">  L_LOG.MEASURE_ID      :<span class="operator">=</span> <span class="keyword">NULL</span>;</span><br><span class="line">  L_LOG.ETL_INTERVAL    :<span class="operator">=</span> V_START_DAY <span class="operator">||</span> <span class="string">&#x27;~&#x27;</span> <span class="operator">||</span> V_END_DAY; <span class="comment">--抽数区间</span></span><br><span class="line">  L_LOG.PROC_ID         :<span class="operator">=</span> V_PROC_ID; <span class="comment">--过程D</span></span><br><span class="line">  L_LOG.START_TIME      :<span class="operator">=</span> V_START_TIME; <span class="comment">--开始时间</span></span><br><span class="line">  L_LOG.ETL_RECORD_LOAD :<span class="operator">=</span> <span class="number">0</span>; <span class="comment">--涉及记录数</span></span><br><span class="line">  L_LOG.ETL_RECORD_INS  :<span class="operator">=</span> <span class="number">0</span>; <span class="comment">--实际插入的记录数</span></span><br><span class="line">  L_LOG.ETL_RECORD_UPD  :<span class="operator">=</span> <span class="number">0</span>; <span class="comment">--更新的记录数，如果该存储过程有更新部分，则不等于零</span></span><br><span class="line">  L_LOG.ETL_RECORD_DEL  :<span class="operator">=</span> <span class="number">0</span>; <span class="comment">--插入前清理目标时的删除记录数</span></span><br><span class="line">  <span class="comment">--加载记录数</span></span><br><span class="line">  <span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="number">1</span>) <span class="keyword">INTO</span> L_LOG.ETL_RECORD_LOAD <span class="keyword">FROM</span> DIM_ITEM_LOCATION T;</span><br><span class="line">  <span class="comment">--取目前最大OW_WID</span></span><br><span class="line">  <span class="keyword">SELECT</span> NVL(<span class="built_in">MAX</span>(T.Location_Wid), <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">INTO</span> V_MAX_ROWNUM</span><br><span class="line">    <span class="keyword">FROM</span> DIM_ITEM_LOCATION T;</span><br><span class="line"></span><br><span class="line">  <span class="comment">--插入1记录数</span></span><br><span class="line">  <span class="keyword">INSERT</span> <span class="keyword">INTO</span> DIM_ITEM_LOCATION</span><br><span class="line">    (location_wid,</span><br><span class="line">     inventory_location_id,</span><br><span class="line">     locator_name,</span><br><span class="line">     locator_desc,</span><br><span class="line">     segment1,</span><br><span class="line">     segment2,</span><br><span class="line">     segment3,</span><br><span class="line">     organization_id,</span><br><span class="line">     inventory_item_id,</span><br><span class="line">     subinventory_code,</span><br><span class="line">     effective_from_dt,</span><br><span class="line">     effective_to_dt,</span><br><span class="line">     delete_flg,</span><br><span class="line">     current_flg,</span><br><span class="line">     w_insert_dt,</span><br><span class="line">     w_update_dt,</span><br><span class="line">     datasource_num_id,</span><br><span class="line">     etl_proc_id,</span><br><span class="line">     etl_proc_name,</span><br><span class="line">     integration_id,</span><br><span class="line">     x_custom)</span><br><span class="line">    <span class="keyword">SELECT</span> <span class="number">-1</span>,</span><br><span class="line">           <span class="number">-1</span>,</span><br><span class="line">           <span class="string">&#x27;未知,</span></span><br><span class="line"><span class="string">           &#x27;</span>未知,</span><br><span class="line">           <span class="string">&#x27;未知,</span></span><br><span class="line"><span class="string">           &#x27;</span>未知,</span><br><span class="line">           <span class="string">&#x27;未知,</span></span><br><span class="line"><span class="string">           -1,</span></span><br><span class="line"><span class="string">           -1,</span></span><br><span class="line"><span class="string">           &#x27;</span>未知,</span><br><span class="line">           TO_DATE(<span class="string">&#x27;19000101&#x27;</span>, <span class="string">&#x27;YYYY-MM-DD&#x27;</span>),</span><br><span class="line">           TO_DATE(<span class="string">&#x27;99990101&#x27;</span>, <span class="string">&#x27;YYYY-MM-DD&#x27;</span>),</span><br><span class="line">           <span class="string">&#x27;N&#x27;</span>,</span><br><span class="line">           <span class="string">&#x27;Y&#x27;</span>,</span><br><span class="line">           SYSDATE,</span><br><span class="line">           SYSDATE,</span><br><span class="line">           <span class="number">9</span>,</span><br><span class="line">           V_PROC_ID,</span><br><span class="line">           L_LOG.PROC_NAME,</span><br><span class="line">           <span class="number">-1</span>,</span><br><span class="line">           <span class="number">-1</span></span><br><span class="line">      <span class="keyword">FROM</span> DUAL</span><br><span class="line">     <span class="keyword">WHERE</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span></span><br><span class="line">     (<span class="keyword">SELECT</span> <span class="number">1</span> <span class="keyword">FROM</span> DIM_ITEM_LOCATION T1 <span class="keyword">WHERE</span> T1.Location_Wid <span class="operator">=</span> <span class="number">-1</span>);</span><br><span class="line">  <span class="keyword">COMMIT</span>;</span><br><span class="line">  <span class="comment">--INTEGRATION_ID不一样的插入</span></span><br><span class="line">  <span class="keyword">INSERT</span> <span class="keyword">INTO</span> DIM_ITEM_LOCATION</span><br><span class="line">    (location_wid,</span><br><span class="line">     inventory_location_id,</span><br><span class="line">     locator_name,</span><br><span class="line">     locator_desc,</span><br><span class="line">     segment1,</span><br><span class="line">     segment2,</span><br><span class="line">     segment3,</span><br><span class="line">     organization_id,</span><br><span class="line">     inventory_item_id,</span><br><span class="line">     subinventory_code,</span><br><span class="line">     effective_from_dt,</span><br><span class="line">     effective_to_dt,</span><br><span class="line">     delete_flg,</span><br><span class="line">     current_flg,</span><br><span class="line">     w_insert_dt,</span><br><span class="line">     w_update_dt,</span><br><span class="line">     datasource_num_id,</span><br><span class="line">     etl_proc_id,</span><br><span class="line">     etl_proc_name,</span><br><span class="line">     integration_id)</span><br><span class="line">    <span class="keyword">SELECT</span> ROWNUM <span class="operator">+</span> V_MAX_ROWNUM <span class="keyword">AS</span> LOCATION_WID,</span><br><span class="line">           t.inventory_location_id,</span><br><span class="line">           t.segment1 <span class="operator">||</span> <span class="string">&#x27;.&#x27;</span> <span class="operator">||</span> t.segment2 <span class="operator">||</span> <span class="string">&#x27;.&#x27;</span> <span class="operator">||</span> t.segment3,</span><br><span class="line">           t.description,</span><br><span class="line">           t.segment1,</span><br><span class="line">           t.segment2,</span><br><span class="line">           t.segment3,</span><br><span class="line">           t.organization_id,</span><br><span class="line">           t.inventory_item_id,</span><br><span class="line">           t.subinventory_code,</span><br><span class="line">           TO_DATE(<span class="string">&#x27;19000101&#x27;</span>, <span class="string">&#x27;YYYY-MM-DD&#x27;</span>) <span class="keyword">AS</span> EFFECTIVE_FROM_DT,</span><br><span class="line">           TO_DATE(<span class="string">&#x27;99990101&#x27;</span>, <span class="string">&#x27;YYYY-MM-DD&#x27;</span>) <span class="keyword">AS</span> EFFECTIVE_TO_DT,</span><br><span class="line">           <span class="string">&#x27;N&#x27;</span> <span class="keyword">AS</span> DELETE_FLG,</span><br><span class="line">           <span class="string">&#x27;T&#x27;</span> <span class="keyword">AS</span> CURRENT_FLG,</span><br><span class="line">           SYSDATE <span class="keyword">AS</span> W_INSERT_DT,</span><br><span class="line">           SYSDATE <span class="keyword">AS</span> W_UPDATE_DT,</span><br><span class="line">           <span class="number">1</span> <span class="keyword">AS</span> DATASOURCE_NUM_ID,</span><br><span class="line">           V_PROC_ID <span class="keyword">AS</span> ETL_PROC_ID,</span><br><span class="line">           L_LOG.PROC_NAME ETL_PROC_NAME,</span><br><span class="line">           t.inventory_location_id</span><br><span class="line">      <span class="keyword">FROM</span> bi_src.s_mtl_item_locations t</span><br><span class="line">     <span class="keyword">WHERE</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> (<span class="keyword">SELECT</span> <span class="number">1</span></span><br><span class="line">              <span class="keyword">FROM</span> DIM_ITEM_LOCATION T1</span><br><span class="line">             <span class="keyword">WHERE</span> T1.Location_Wid <span class="operator">=</span> t.inventory_location_id);</span><br><span class="line"></span><br><span class="line">  <span class="comment">--插入记录数</span></span><br><span class="line">  L_LOG.ETL_RECORD_INS :<span class="operator">=</span> <span class="keyword">SQL</span><span class="operator">%</span>ROWCOUNT <span class="operator">+</span> <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">COMMIT</span>;</span><br><span class="line">  <span class="comment">--缓慢变化处理</span></span><br><span class="line">  <span class="comment">--更新旧记录</span></span><br><span class="line">  <span class="keyword">UPDATE</span> DIM_ITEM_LOCATION T</span><br><span class="line">     <span class="keyword">SET</span> T.EFFECTIVE_TO_DT <span class="operator">=</span> TO_DATE(V_END_DAY, <span class="string">&#x27;YYYYMMDD&#x27;</span>),</span><br><span class="line">         T.CURRENT_FLG     <span class="operator">=</span> <span class="string">&#x27;N&#x27;</span></span><br><span class="line">   <span class="keyword">WHERE</span> T.CURRENT_FLG <span class="operator">=</span> <span class="string">&#x27;Y&#x27;</span></span><br><span class="line">     <span class="keyword">AND</span> <span class="keyword">EXISTS</span> (<span class="keyword">SELECT</span> <span class="string">&#x27;X&#x27;</span></span><br><span class="line">            <span class="keyword">FROM</span> DIM_ITEM_LOCATION T1</span><br><span class="line">           <span class="keyword">WHERE</span> T1.Location_Wid <span class="operator">=</span> T.Location_Wid</span><br><span class="line">             <span class="keyword">AND</span> T1.CURRENT_FLG <span class="operator">=</span> <span class="string">&#x27;T&#x27;</span>);</span><br><span class="line">  <span class="keyword">COMMIT</span>;</span><br><span class="line">  <span class="comment">--更新新记录</span></span><br><span class="line">  <span class="keyword">UPDATE</span> DIM_ITEM_LOCATION T</span><br><span class="line">     <span class="keyword">SET</span> T.EFFECTIVE_FROM_DT <span class="operator">=</span> TO_DATE(V_END_DAY, <span class="string">&#x27;YYYYMMDD&#x27;</span>)</span><br><span class="line">   <span class="keyword">WHERE</span> T.CURRENT_FLG <span class="operator">=</span> <span class="string">&#x27;T&#x27;</span></span><br><span class="line">     <span class="keyword">AND</span> <span class="keyword">EXISTS</span> (<span class="keyword">SELECT</span> <span class="string">&#x27;X&#x27;</span></span><br><span class="line">            <span class="keyword">FROM</span> DIM_ITEM_LOCATION T1</span><br><span class="line">           <span class="keyword">WHERE</span> T1.Location_Wid <span class="operator">=</span> T.Location_Wid</span><br><span class="line">             <span class="keyword">AND</span> T1.CURRENT_FLG <span class="operator">=</span> <span class="string">&#x27;N&#x27;</span>);</span><br><span class="line">  <span class="keyword">COMMIT</span>;</span><br><span class="line">  <span class="comment">--更新新记录</span></span><br><span class="line">  <span class="keyword">UPDATE</span> DIM_ITEM_LOCATION T</span><br><span class="line">     <span class="keyword">SET</span> T.CURRENT_FLG <span class="operator">=</span> <span class="string">&#x27;Y&#x27;</span></span><br><span class="line">   <span class="keyword">WHERE</span> T.CURRENT_FLG <span class="operator">=</span> <span class="string">&#x27;T&#x27;</span>;</span><br><span class="line">  <span class="keyword">COMMIT</span>;</span><br><span class="line">  <span class="comment">--程序结束时间</span></span><br><span class="line">  <span class="keyword">SELECT</span> <span class="built_in">CURRENT_TIMESTAMP</span> <span class="keyword">INTO</span> V_END_TIME <span class="keyword">FROM</span> DUAL;</span><br><span class="line">  <span class="comment">--执行时间</span></span><br><span class="line">  <span class="keyword">SELECT</span> TRUNC(TO_NUMBER(TO_CHAR(V_END_TIME, <span class="string">&#x27;YYYYMMDDHH24MISSXFF&#x27;</span>)), <span class="number">2</span>) <span class="operator">-</span></span><br><span class="line">         TRUNC(TO_NUMBER(TO_CHAR(V_START_TIME, <span class="string">&#x27;YYYYMMDDHH24MISSXFF&#x27;</span>)), <span class="number">2</span>)</span><br><span class="line">    <span class="keyword">INTO</span> L_LOG.ETL_DURATION</span><br><span class="line">    <span class="keyword">FROM</span> DUAL;</span><br><span class="line">  L_LOG.END_TIME   :<span class="operator">=</span> V_END_TIME;</span><br><span class="line">  L_LOG.ETL_STATUS :<span class="operator">=</span> <span class="string">&#x27;SUCCESS&#x27;</span>;</span><br><span class="line">  <span class="comment">--调用执行日志</span></span><br><span class="line">  BI_DW.SP_W_ETL_LOG(L_LOG);</span><br><span class="line">EXCEPTION</span><br><span class="line">  <span class="keyword">WHEN</span> OTHERS <span class="keyword">THEN</span></span><br><span class="line">    <span class="keyword">ROLLBACK</span>;</span><br><span class="line">    L_LOG.ETL_STATUS :<span class="operator">=</span> <span class="string">&#x27;FAILURE&#x27;</span>;</span><br><span class="line">    L_LOG.ERR_MSG    :<span class="operator">=</span> SUBSTR(SQLERRM, <span class="number">1</span>, <span class="number">2000</span>);</span><br><span class="line">    BI_DW.SP_W_ETL_LOG(L_LOG);</span><br><span class="line"><span class="keyword">END</span> SP_DIM_ITEM_LOCATION;</span><br></pre></td></tr></table></figure><p><strong>关于缓慢变化处理：</strong></p><p>简单举个例子：张三 2020 年 5 月之前，在运营部做销售。到了 2020 年 6 月 1 日，张三到项目部做销售。那么体现在数据的变化上，就应该是张三，有两个成本中心。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">姓名  启用日期从      启用日期至   成本中心  成本中心编码  角色id</span><br><span class="line">张三  <span class="number">1973</span>        <span class="operator">-</span> <span class="number">2020</span><span class="number">-04</span><span class="number">-30</span>  运营部    <span class="number">1013</span>        <span class="number">1198</span></span><br><span class="line">张三  <span class="number">2020</span><span class="number">-05</span><span class="number">-01</span>  <span class="operator">-</span> Now         项目部    <span class="number">1015</span>        <span class="number">1198</span></span><br></pre></td></tr></table></figure><p>也就是说，在数据库里面应该有两条记录，并且项目部的这条记录是当前正在使用的记录。在核算张三业绩的时候，应该以 2020-05-01 为分界点，分属于不同的两个部门。从数据库角度来说，缓慢变化也可以理解为记录每一次的变动。</p><p>在 DIM 层启用缓慢变化，关键字段是 integration_id，这个字段必须是整个数据库中唯一的。在这个例子中，查询运营部的 integration_id 应该是 11981013，查询项目部的 integration_id 应该是 11981015。在这里 integration_id 是角色 id 和成本中心编码的组合，因为只有这两个字段的组合才能够保证记录的唯一性。</p><p>在启用了缓慢变化以后，下列的 Location_Wid 都要改成 integration_id</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--缓慢变化处理</span></span><br><span class="line">  <span class="comment">--更新旧记录的失效日期</span></span><br><span class="line">  <span class="keyword">UPDATE</span> DIM_ITEM_LOCATION T</span><br><span class="line">     <span class="keyword">SET</span> T.EFFECTIVE_TO_DT <span class="operator">=</span> TO_DATE(V_END_DAY, <span class="string">&#x27;YYYYMMDD&#x27;</span>),</span><br><span class="line">         T.CURRENT_FLG     <span class="operator">=</span> <span class="string">&#x27;N&#x27;</span></span><br><span class="line">   <span class="keyword">WHERE</span> T.CURRENT_FLG <span class="operator">=</span> <span class="string">&#x27;Y&#x27;</span></span><br><span class="line">     <span class="keyword">AND</span> <span class="keyword">EXISTS</span> (<span class="keyword">SELECT</span> <span class="string">&#x27;X&#x27;</span></span><br><span class="line">            <span class="keyword">FROM</span> DIM_ITEM_LOCATION T1</span><br><span class="line">           <span class="keyword">WHERE</span> T1.Location_Wid <span class="operator">=</span> T.Location_Wid  <span class="comment">--integration_id</span></span><br><span class="line">             <span class="keyword">AND</span> T1.CURRENT_FLG <span class="operator">=</span> <span class="string">&#x27;T&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">--更新新记录的启用日期</span></span><br><span class="line">  <span class="keyword">UPDATE</span> DIM_ITEM_LOCATION T</span><br><span class="line">     <span class="keyword">SET</span> T.EFFECTIVE_FROM_DT <span class="operator">=</span> TO_DATE(V_END_DAY, <span class="string">&#x27;YYYYMMDD&#x27;</span>)</span><br><span class="line">   <span class="keyword">WHERE</span> T.CURRENT_FLG <span class="operator">=</span> <span class="string">&#x27;T&#x27;</span></span><br><span class="line">     <span class="keyword">AND</span> <span class="keyword">EXISTS</span> (<span class="keyword">SELECT</span> <span class="string">&#x27;X&#x27;</span></span><br><span class="line">            <span class="keyword">FROM</span> DIM_ITEM_LOCATION T1</span><br><span class="line">           <span class="keyword">WHERE</span> T1.Location_Wid <span class="operator">=</span> T.Location_Wid</span><br><span class="line">             <span class="keyword">AND</span> T1.CURRENT_FLG <span class="operator">=</span> <span class="string">&#x27;N&#x27;</span>);</span><br></pre></td></tr></table></figure><p>关于维度字段：一般是指用于分析的字段，或者说是 erp 过滤数据的参数</p><p>设置 kettle 运行存储过程</p><p>设置变量，这里的变量个数和类型要与存储过程一致</p><p><img src="/2020/01/23/BIEE%E6%8A%A5%E8%A1%A8%E5%BC%80%E5%8F%91/20201023091927-3olk5hl-image.png" alt="image.png"></p><p>设置存储过程，这里的参数名称，要同“获取变量”</p><p><img src="/2020/01/23/BIEE%E6%8A%A5%E8%A1%A8%E5%BC%80%E5%8F%91/20201023091936-afswmar-image.png" alt="image.png"></p><p><strong>点击运行，到数据库查看结果即可。剩下的货位、物料维度也是如此，但是物料维度建议添加标准成本和实际成本。</strong></p><h3 id="DW-层事实表"><a href="#DW-层事实表" class="headerlink" title="DW 层事实表"></a>DW 层事实表</h3><p>写出报表的 SQL 脚本</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> hou.organization_name,</span><br><span class="line">       hou.organization_short_code,</span><br><span class="line">       msi.segment1 item_number,</span><br><span class="line">       msi.DESCRIPTION item_desc,</span><br><span class="line">       msi.PRIMARY_UOM_CODE,</span><br><span class="line">       moq.SUBINVENTORY_CODE,</span><br><span class="line">       dil.locator_name,</span><br><span class="line">       moq.LOT_NUMBER,</span><br><span class="line">       NVL(ms.SAFETY_STOCK_QUANTITY, <span class="number">0</span>) safety_stock,</span><br><span class="line">       nvl(moq.TRANSACTION_QUANTITY, <span class="number">0</span>) onhand_qty,</span><br><span class="line">       hou.organization_wid,</span><br><span class="line">       di.inventory_wid,</span><br><span class="line">       dil.location_wid,</span><br><span class="line">       dim.item_wid</span><br><span class="line">  <span class="keyword">FROM</span> BI_SRC.S_mtl_system_items_b           msi,</span><br><span class="line">       BI_SRC.S_mtl_safety_stocks            ms,</span><br><span class="line">       BI_SRC.S_mtl_onhand_quantities_detail moq,</span><br><span class="line">       BI_DIM.DIM_ORGANIZATION_UNITS         hou,</span><br><span class="line">       BI_DIM.DIM_INVENTORIES                di,</span><br><span class="line">       BI_DIM.DIM_ITEM_LOCATION              dil,</span><br><span class="line">       BI_DIM.DIM_ITEM                       dim</span><br><span class="line"> <span class="keyword">WHERE</span> <span class="number">1</span> <span class="operator">=</span> <span class="number">1</span></span><br><span class="line">   <span class="keyword">AND</span> ms.INVENTORY_ITEM_ID(<span class="operator">+</span>) <span class="operator">=</span> msi.INVENTORY_ITEM_ID</span><br><span class="line">   <span class="keyword">AND</span> ms.ORGANIZATION_ID(<span class="operator">+</span>) <span class="operator">=</span> msi.ORGANIZATION_ID</span><br><span class="line">   <span class="keyword">AND</span> moq.INVENTORY_ITEM_ID(<span class="operator">+</span>) <span class="operator">=</span> msi.INVENTORY_ITEM_ID</span><br><span class="line">   <span class="keyword">AND</span> moq.ORGANIZATION_ID(<span class="operator">+</span>) <span class="operator">=</span> msi.ORGANIZATION_ID</span><br><span class="line">   <span class="keyword">AND</span> hou.organization_id <span class="operator">=</span> msi.organization_id</span><br><span class="line">   <span class="keyword">AND</span> di.secondary_inventory_name <span class="operator">=</span> nvl(moq.SUBINVENTORY_CODE,<span class="number">-1</span>)</span><br><span class="line">   <span class="keyword">AND</span> di.organization_id <span class="operator">=</span> nvl(moq.organization_id,<span class="number">-1</span>)</span><br><span class="line">   <span class="keyword">AND</span> dil.inventory_location_id <span class="operator">=</span> nvl(moq.locator_id,<span class="number">-1</span>)</span><br><span class="line">   <span class="keyword">AND</span> dim.item_id <span class="operator">=</span> msi.INVENTORY_ITEM_ID</span><br><span class="line">   <span class="keyword">AND</span> dim.organization_id <span class="operator">=</span> msi.organization_id</span><br><span class="line">   <span class="keyword">AND</span> moq.SUBINVENTORY_CODE <span class="keyword">NOT</span> <span class="keyword">LIKE</span> <span class="string">&#x27;%结算&#x27;</span></span><br></pre></td></tr></table></figure><p>根据所需字段，创建 dw 事实表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- Create table</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> DW_INV_AGACCOUNT</span><br><span class="line">(</span><br><span class="line">  organization_name       VARCHAR2(<span class="number">100</span>),</span><br><span class="line">  organization_short_code VARCHAR2(<span class="number">50</span>),</span><br><span class="line">  item_number             VARCHAR2(<span class="number">50</span>),</span><br><span class="line">  item_desc               VARCHAR2(<span class="number">255</span>),</span><br><span class="line">  primary_uom_code        VARCHAR2(<span class="number">50</span>),</span><br><span class="line">  subinventory_code       VARCHAR2(<span class="number">50</span>),</span><br><span class="line">  locator_name            VARCHAR2(<span class="number">50</span>),</span><br><span class="line">  lot_number              VARCHAR2(<span class="number">50</span>),</span><br><span class="line">  safety_stock            NUMBER,</span><br><span class="line">  onhand_qty              NUMBER,</span><br><span class="line">  transaction_date        <span class="type">DATE</span>,</span><br><span class="line">  organization_wid        NUMBER,</span><br><span class="line">  inventory_wid           NUMBER,</span><br><span class="line">  location_wid            NUMBER,</span><br><span class="line">  item_wid                NUMBER,</span><br><span class="line">  w_insert_dt             <span class="type">DATE</span>,</span><br><span class="line">  w_update_dt             <span class="type">DATE</span>,</span><br><span class="line">  datasource_num_id       NUMBER,</span><br><span class="line">  etl_proc_id             VARCHAR2(<span class="number">50</span>),</span><br><span class="line">  etl_proc_name           VARCHAR2(<span class="number">50</span>),</span><br><span class="line">  line_id                 VARCHAR2(<span class="number">100</span>)</span><br><span class="line">)</span><br><span class="line">tablespace BI_DW_DAT</span><br><span class="line">  pctfree <span class="number">10</span></span><br><span class="line">  initrans <span class="number">1</span></span><br><span class="line">  maxtrans <span class="number">255</span></span><br><span class="line">  storage</span><br><span class="line">  (</span><br><span class="line">    <span class="keyword">initial</span> <span class="number">64</span>K</span><br><span class="line">    next <span class="number">1</span>M</span><br><span class="line">    minextents <span class="number">1</span></span><br><span class="line">    maxextents unlimited</span><br><span class="line">  )</span><br><span class="line">nologging;</span><br><span class="line"><span class="comment">-- Add comments to the table </span></span><br><span class="line">comment <span class="keyword">on</span> <span class="keyword">table</span> DW_INV_AGACCOUNT</span><br><span class="line">  <span class="keyword">is</span> <span class="string">&#x27;库存物料明细;</span></span><br><span class="line"><span class="string">-- Add comments to the columns </span></span><br><span class="line"><span class="string">comment on column DW_INV_AGACCOUNT.organization_name</span></span><br><span class="line"><span class="string">  is &#x27;</span>库存组织名称;</span><br><span class="line">comment <span class="keyword">on</span> <span class="keyword">column</span> DW_INV_AGACCOUNT.organization_short_code</span><br><span class="line">  <span class="keyword">is</span> <span class="string">&#x27;库存组织代码;</span></span><br><span class="line"><span class="string">comment on column DW_INV_AGACCOUNT.item_number</span></span><br><span class="line"><span class="string">  is &#x27;</span>物料编码;</span><br><span class="line">comment <span class="keyword">on</span> <span class="keyword">column</span> DW_INV_AGACCOUNT.item_desc</span><br><span class="line">  <span class="keyword">is</span> <span class="string">&#x27;物料描述;</span></span><br><span class="line"><span class="string">comment on column DW_INV_AGACCOUNT.primary_uom_code</span></span><br><span class="line"><span class="string">  is &#x27;</span>单位;</span><br><span class="line">comment <span class="keyword">on</span> <span class="keyword">column</span> DW_INV_AGACCOUNT.subinventory_code</span><br><span class="line">  <span class="keyword">is</span> <span class="string">&#x27;子库存;</span></span><br><span class="line"><span class="string">comment on column DW_INV_AGACCOUNT.locator_name</span></span><br><span class="line"><span class="string">  is &#x27;</span>货位名称;</span><br><span class="line">comment <span class="keyword">on</span> <span class="keyword">column</span> DW_INV_AGACCOUNT.lot_number</span><br><span class="line">  <span class="keyword">is</span> <span class="string">&#x27;批次号;</span></span><br><span class="line"><span class="string">comment on column DW_INV_AGACCOUNT.safety_stock</span></span><br><span class="line"><span class="string">  is &#x27;</span>安全库存;</span><br><span class="line">comment <span class="keyword">on</span> <span class="keyword">column</span> DW_INV_AGACCOUNT.onhand_qty</span><br><span class="line">  <span class="keyword">is</span> <span class="string">&#x27;现有量;</span></span><br><span class="line"><span class="string">comment on column DW_INV_AGACCOUNT.transaction_date</span></span><br><span class="line"><span class="string">  is &#x27;</span>事务处理日期;</span><br><span class="line">comment <span class="keyword">on</span> <span class="keyword">column</span> DW_INV_AGACCOUNT.w_insert_dt</span><br><span class="line">  <span class="keyword">is</span> <span class="string">&#x27;插入时间;</span></span><br><span class="line"><span class="string">comment on column DW_INV_AGACCOUNT.w_update_dt</span></span><br><span class="line"><span class="string">  is &#x27;</span>更新时间;</span><br><span class="line">comment <span class="keyword">on</span> <span class="keyword">column</span> DW_INV_AGACCOUNT.datasource_num_id</span><br><span class="line">  <span class="keyword">is</span> <span class="string">&#x27;数据来源;</span></span><br><span class="line"><span class="string">comment on column DW_INV_AGACCOUNT.etl_proc_name</span></span><br><span class="line"><span class="string">  is &#x27;</span>ETL程序;</span><br></pre></td></tr></table></figure><p>创建 dw 层存储过程，传输库存明细数据</p><p>package 定义：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">OR</span> REPLACE PACKAGE PKG_DW_INV_AGACCOUNT <span class="keyword">IS</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">--获取事务处理日期</span></span><br><span class="line">  <span class="keyword">FUNCTION</span> get_transaction_date(p_lot_control_code <span class="keyword">IN</span> NUMBER,</span><br><span class="line">                                p_organization_id  <span class="keyword">IN</span> NUMBER,</span><br><span class="line">                                p_item_id          <span class="keyword">IN</span> NUMBER,</span><br><span class="line">                                p_lot_number       <span class="keyword">IN</span> VARCHAR2) <span class="keyword">RETURN</span> <span class="type">DATE</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">-- Author  : LYH</span></span><br><span class="line">  <span class="comment">-- Created : 2020-5-27 上午1:21:01</span></span><br><span class="line">  <span class="comment">-- Purpose : 库存明细</span></span><br><span class="line">  <span class="keyword">PROCEDURE</span> SP_DW_INV_AGACCOUNT(P_START_DAY <span class="keyword">IN</span> NUMBER,</span><br><span class="line">                                P_END_DAY   <span class="keyword">IN</span> NUMBER,</span><br><span class="line">                                P_PROC_ID   <span class="keyword">IN</span> NUMBER);</span><br><span class="line"></span><br><span class="line"><span class="keyword">END</span> PKG_DW_INV_AGACCOUNT;</span><br></pre></td></tr></table></figure><p>package 内容：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">OR</span> REPLACE PACKAGE BODY PKG_DW_INV_AGACCOUNT <span class="keyword">IS</span></span><br><span class="line">  <span class="comment">--获取事务处理日期</span></span><br><span class="line">  <span class="keyword">FUNCTION</span> get_transaction_date(p_lot_control_code <span class="keyword">IN</span> NUMBER,</span><br><span class="line">                                p_organization_id  <span class="keyword">IN</span> NUMBER,</span><br><span class="line">                                p_item_id          <span class="keyword">IN</span> NUMBER,</span><br><span class="line">                                p_lot_number       <span class="keyword">IN</span> VARCHAR2) <span class="keyword">RETURN</span> <span class="type">DATE</span> <span class="keyword">IS</span></span><br><span class="line">    l_transaction_date <span class="type">DATE</span>;</span><br><span class="line">  <span class="keyword">BEGIN</span></span><br><span class="line">    <span class="comment">--不启用批次控制</span></span><br><span class="line">    IF p_lot_control_code <span class="operator">=</span> <span class="number">1</span> <span class="keyword">THEN</span></span><br><span class="line">      <span class="keyword">SELECT</span> t.TRANSACTION_DATE</span><br><span class="line">        <span class="keyword">INTO</span> l_transaction_date</span><br><span class="line">        <span class="keyword">FROM</span> (<span class="keyword">SELECT</span> mmt.INVENTORY_ITEM_ID,</span><br><span class="line">                     mmt.ORGANIZATION_ID,</span><br><span class="line">                     mmt.TRANSACTION_DATE</span><br><span class="line">                <span class="keyword">FROM</span> BI_SRC.S_mtl_material_transactions mmt</span><br><span class="line">               <span class="keyword">WHERE</span> <span class="number">1</span> <span class="operator">=</span> <span class="number">1</span></span><br><span class="line">                 <span class="keyword">AND</span> p_item_id <span class="operator">=</span> mmt.INVENTORY_ITEM_ID</span><br><span class="line">                 <span class="keyword">AND</span> p_organization_id <span class="operator">=</span> mmt.ORGANIZATION_ID</span><br><span class="line">               <span class="keyword">ORDER</span> <span class="keyword">BY</span> mmt.TRANSACTION_DATE <span class="keyword">ASC</span>) t <span class="comment">-- 批次控制来判断msi.Lot_Control_Code</span></span><br><span class="line">       <span class="keyword">WHERE</span> <span class="number">1</span> <span class="operator">=</span> <span class="number">1</span></span><br><span class="line">         <span class="keyword">AND</span> ROWNUM <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">ELSE</span></span><br><span class="line">      <span class="comment">--启用批次控制</span></span><br><span class="line">      <span class="keyword">SELECT</span> t.TRANSACTION_DATE</span><br><span class="line">        <span class="keyword">INTO</span> l_transaction_date</span><br><span class="line">        <span class="keyword">FROM</span> (<span class="keyword">SELECT</span> mmt.INVENTORY_ITEM_ID,</span><br><span class="line">                     mmt.ORGANIZATION_ID,</span><br><span class="line">                     mmt.TRANSACTION_DATE,</span><br><span class="line">                     mtln.LOT_NUMBER</span><br><span class="line">                <span class="keyword">FROM</span> BI_SRC.S_mtl_material_transactions   mmt,</span><br><span class="line">                     BI_SRC.S_mtl_transaction_lot_numbers mtln</span><br><span class="line">               <span class="keyword">WHERE</span> <span class="number">1</span> <span class="operator">=</span> <span class="number">1</span></span><br><span class="line">                 <span class="keyword">AND</span> mmt.TRANSACTION_ID <span class="operator">=</span> mtln.TRANSACTION_ID</span><br><span class="line">                 <span class="keyword">AND</span> mtln.lot_number <span class="operator">=</span> p_lot_number</span><br><span class="line">                 <span class="keyword">AND</span> p_item_id <span class="operator">=</span> mmt.INVENTORY_ITEM_ID</span><br><span class="line">                 <span class="keyword">AND</span> p_organization_id <span class="operator">=</span> mmt.ORGANIZATION_ID</span><br><span class="line">               <span class="keyword">ORDER</span> <span class="keyword">BY</span> mmt.TRANSACTION_DATE <span class="keyword">ASC</span>) t <span class="comment">-- 批次控制来判断msi.Lot_Control_Code</span></span><br><span class="line">       <span class="keyword">WHERE</span> <span class="number">1</span> <span class="operator">=</span> <span class="number">1</span></span><br><span class="line">         <span class="keyword">AND</span> ROWNUM <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">END</span> IF;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">RETURN</span> l_transaction_date;</span><br><span class="line">  EXCEPTION</span><br><span class="line">    <span class="keyword">WHEN</span> OTHERS <span class="keyword">THEN</span></span><br><span class="line">      <span class="keyword">RETURN</span> <span class="keyword">NULL</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">END</span> get_transaction_date;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">PROCEDURE</span> SP_DW_INV_AGACCOUNT(P_START_DAY <span class="keyword">IN</span> NUMBER,</span><br><span class="line">                                P_END_DAY   <span class="keyword">IN</span> NUMBER,</span><br><span class="line">                                P_PROC_ID   <span class="keyword">IN</span> NUMBER) <span class="keyword">IS</span></span><br><span class="line">    V_START_DAY  NUMBER(<span class="number">10</span>) :<span class="operator">=</span> P_START_DAY;</span><br><span class="line">    V_END_DAY    NUMBER(<span class="number">10</span>) :<span class="operator">=</span> P_END_DAY;</span><br><span class="line">    V_PROC_ID    NUMBER(<span class="number">8</span>) :<span class="operator">=</span> P_PROC_ID;</span><br><span class="line">    V_START_TIME <span class="type">TIMESTAMP</span>; <span class="comment">--开始时间</span></span><br><span class="line">    V_END_TIME   <span class="type">TIMESTAMP</span>; <span class="comment">--结束时间</span></span><br><span class="line">    L_LOG        BI_DW.W_ETL_LOG<span class="operator">%</span>ROWTYPE; <span class="comment">--日志表游标</span></span><br><span class="line">  <span class="keyword">BEGIN</span></span><br><span class="line">    <span class="comment">--记录程序开始时间</span></span><br><span class="line">    <span class="keyword">SELECT</span> <span class="built_in">CURRENT_TIMESTAMP</span> <span class="keyword">INTO</span> V_START_TIME <span class="keyword">FROM</span> DUAL;</span><br><span class="line">    <span class="comment">--记录日志</span></span><br><span class="line">    L_LOG.PROC_NAME       :<span class="operator">=</span> <span class="string">&#x27;SP_DW_INV_AGACCOUNT&#x27;</span>; <span class="comment">--过程名称</span></span><br><span class="line">    L_LOG.TABLE_TYPE      :<span class="operator">=</span> <span class="string">&#x27;F&#x27;</span>; <span class="comment">--表类型</span></span><br><span class="line">    L_LOG.TABLE_NAME      :<span class="operator">=</span> <span class="string">&#x27;DW_INV_AGACCOUNT&#x27;</span>; <span class="comment">--表名称</span></span><br><span class="line">    L_LOG.MEASURE_ID      :<span class="operator">=</span> <span class="keyword">NULL</span>;</span><br><span class="line">    L_LOG.ETL_INTERVAL    :<span class="operator">=</span> V_START_DAY <span class="operator">||</span> <span class="string">&#x27;~&#x27;</span> <span class="operator">||</span> V_END_DAY; <span class="comment">--抽数区间</span></span><br><span class="line">    L_LOG.PROC_ID         :<span class="operator">=</span> V_PROC_ID; <span class="comment">--过程D</span></span><br><span class="line">    L_LOG.START_TIME      :<span class="operator">=</span> V_START_TIME; <span class="comment">--开始时间</span></span><br><span class="line">    L_LOG.ETL_RECORD_LOAD :<span class="operator">=</span> <span class="number">0</span>; <span class="comment">--涉及记录数</span></span><br><span class="line">    L_LOG.ETL_RECORD_INS  :<span class="operator">=</span> <span class="number">0</span>; <span class="comment">--实际插入的记录数</span></span><br><span class="line">    L_LOG.ETL_RECORD_UPD  :<span class="operator">=</span> <span class="number">0</span>; <span class="comment">--更新的记录数，如果该存储过程有更新部分，则不等于零</span></span><br><span class="line">    L_LOG.ETL_RECORD_DEL  :<span class="operator">=</span> <span class="number">0</span>; <span class="comment">--插入前清理目标时的删除记录数</span></span><br><span class="line">    <span class="comment">--加载记录数</span></span><br><span class="line">    <span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="number">1</span>) <span class="keyword">INTO</span> L_LOG.ETL_RECORD_LOAD <span class="keyword">FROM</span> DW_INV_AGACCOUNT T;</span><br><span class="line">    <span class="comment">--删除记录</span></span><br><span class="line">    <span class="comment">/*DELETE DW_INV_AGACCOUNT F</span></span><br><span class="line"><span class="comment">     WHERE F.DAY_WID &gt;= V_START_DAY</span></span><br><span class="line"><span class="comment">       AND F.DAY_WID &lt;= V_END_DAY;</span></span><br><span class="line"><span class="comment">    COMMIT;*/</span></span><br><span class="line">    <span class="keyword">EXECUTE</span> IMMEDIATE <span class="string">&#x27;TRUNCATE TABLE DW_INV_AGACCOUNT&#x27;</span>;</span><br><span class="line">    <span class="comment">--加载数据</span></span><br><span class="line">    <span class="keyword">INSERT</span> <span class="keyword">INTO</span> DW_INV_AGACCOUNT</span><br><span class="line">      (organization_name,</span><br><span class="line">       organization_short_code,</span><br><span class="line">       item_number,</span><br><span class="line">       item_desc,</span><br><span class="line">       primary_uom_code,</span><br><span class="line">       subinventory_code,</span><br><span class="line">       locator_name,</span><br><span class="line">       lot_number,</span><br><span class="line">       safety_stock,</span><br><span class="line">       onhand_qty,</span><br><span class="line">       transaction_date,</span><br><span class="line">       organization_wid,</span><br><span class="line">       inventory_wid,</span><br><span class="line">       location_wid,</span><br><span class="line">       item_wid,</span><br><span class="line">       w_insert_dt,</span><br><span class="line">       w_update_dt,</span><br><span class="line">       datasource_num_id,</span><br><span class="line">       etl_proc_id,</span><br><span class="line">       etl_proc_name,</span><br><span class="line">       line_id)</span><br><span class="line">      <span class="keyword">SELECT</span> organization_name,</span><br><span class="line">             organization_short_code,</span><br><span class="line">             item_number,</span><br><span class="line">             item_desc,</span><br><span class="line">             PRIMARY_UOM_CODE,</span><br><span class="line">             SUBINVENTORY_CODE,</span><br><span class="line">             locator_name,</span><br><span class="line">             LOT_NUMBER,</span><br><span class="line">             safety_stock,</span><br><span class="line">             onhand_qty,</span><br><span class="line">             transaction_date,</span><br><span class="line">             organization_wid,</span><br><span class="line">             inventory_wid,</span><br><span class="line">             location_wid,</span><br><span class="line">             item_wid,</span><br><span class="line">             SYSDATE <span class="keyword">AS</span> W_INSERT_DT,</span><br><span class="line">             SYSDATE <span class="keyword">AS</span> W_UPDATE_DT,</span><br><span class="line">             <span class="number">1</span> <span class="keyword">AS</span> DATASOURCE_NUM_ID,</span><br><span class="line">             V_PROC_ID,</span><br><span class="line">             L_LOG.PROC_NAME,</span><br><span class="line">             inventory_item_id <span class="operator">||</span> organization_id <span class="operator">||</span> subinventory_code <span class="operator">||</span></span><br><span class="line">             nvl(lot_number, <span class="number">-1</span>)</span><br><span class="line">        <span class="keyword">FROM</span> (<span class="keyword">SELECT</span> hou.organization_name,</span><br><span class="line">                     hou.organization_short_code,</span><br><span class="line">                     msi.segment1 item_number,</span><br><span class="line">                     msi.DESCRIPTION item_desc,</span><br><span class="line">                     msi.PRIMARY_UOM_CODE,</span><br><span class="line">                     moq.SUBINVENTORY_CODE,</span><br><span class="line">                     dil.locator_name,</span><br><span class="line">                     moq.LOT_NUMBER,</span><br><span class="line">                     NVL(ms.SAFETY_STOCK_QUANTITY, <span class="number">0</span>) safety_stock,</span><br><span class="line">                     nvl(moq.TRANSACTION_QUANTITY, <span class="number">0</span>) onhand_qty,</span><br><span class="line">                     hou.organization_wid,</span><br><span class="line">                     di.inventory_wid,</span><br><span class="line">                     dil.location_wid,</span><br><span class="line">                     dim.item_wid,</span><br><span class="line">                     msi.inventory_item_id,</span><br><span class="line">                     msi.organization_id,</span><br><span class="line">                     get_transaction_date(msi.lot_control_code,</span><br><span class="line">                                          msi.organization_id,</span><br><span class="line">                                          msi.inventory_item_id,</span><br><span class="line">                                          moq.lot_number) transaction_date</span><br><span class="line">                <span class="keyword">FROM</span> BI_SRC.S_mtl_system_items_b           msi,</span><br><span class="line">                     BI_SRC.S_mtl_safety_stocks            ms,</span><br><span class="line">                     BI_SRC.S_mtl_onhand_quantities_detail moq,</span><br><span class="line">                     BI_DIM.DIM_ORGANIZATION_UNITS         hou,</span><br><span class="line">                     BI_DIM.DIM_INVENTORIES                di,</span><br><span class="line">                     BI_DIM.DIM_ITEM_LOCATION              dil,</span><br><span class="line">                     BI_DIM.DIM_ITEM                       dim</span><br><span class="line">               <span class="keyword">WHERE</span> <span class="number">1</span> <span class="operator">=</span> <span class="number">1</span></span><br><span class="line">                 <span class="keyword">AND</span> ms.INVENTORY_ITEM_ID(<span class="operator">+</span>) <span class="operator">=</span> msi.INVENTORY_ITEM_ID</span><br><span class="line">                 <span class="keyword">AND</span> ms.ORGANIZATION_ID(<span class="operator">+</span>) <span class="operator">=</span> msi.ORGANIZATION_ID</span><br><span class="line">                 <span class="keyword">AND</span> moq.INVENTORY_ITEM_ID(<span class="operator">+</span>) <span class="operator">=</span> msi.INVENTORY_ITEM_ID</span><br><span class="line">                 <span class="keyword">AND</span> moq.ORGANIZATION_ID(<span class="operator">+</span>) <span class="operator">=</span> msi.ORGANIZATION_ID</span><br><span class="line">                 <span class="keyword">AND</span> hou.organization_id <span class="operator">=</span> msi.organization_id</span><br><span class="line">                 <span class="keyword">AND</span> di.secondary_inventory_name <span class="operator">=</span></span><br><span class="line">                     nvl(moq.SUBINVENTORY_CODE, <span class="number">-1</span>)</span><br><span class="line">                 <span class="keyword">AND</span> di.organization_id <span class="operator">=</span> nvl(moq.organization_id, <span class="number">-1</span>)</span><br><span class="line">                 <span class="keyword">AND</span> dil.inventory_location_id <span class="operator">=</span> nvl(moq.locator_id, <span class="number">-1</span>)</span><br><span class="line">                 <span class="keyword">AND</span> dim.item_id <span class="operator">=</span> msi.INVENTORY_ITEM_ID</span><br><span class="line">                 <span class="keyword">AND</span> dim.organization_id <span class="operator">=</span> msi.organization_id</span><br><span class="line">                 <span class="keyword">AND</span> moq.SUBINVENTORY_CODE <span class="keyword">NOT</span> <span class="keyword">LIKE</span> <span class="string">&#x27;%结算&#x27;</span>);</span><br><span class="line">  </span><br><span class="line">    L_LOG.ETL_RECORD_INS :<span class="operator">=</span> L_LOG.ETL_RECORD_INS <span class="operator">+</span> <span class="keyword">SQL</span><span class="operator">%</span>ROWCOUNT;</span><br><span class="line">    <span class="keyword">COMMIT</span>;</span><br><span class="line">    <span class="comment">--程序结束时间</span></span><br><span class="line">    <span class="keyword">SELECT</span> <span class="built_in">CURRENT_TIMESTAMP</span> <span class="keyword">INTO</span> V_END_TIME <span class="keyword">FROM</span> DUAL;</span><br><span class="line">    <span class="comment">--执行时间</span></span><br><span class="line">    <span class="keyword">SELECT</span> TRUNC(TO_NUMBER(TO_CHAR(V_END_TIME, <span class="string">&#x27;YYYYMMDDHH24MISSXFF&#x27;</span>)), <span class="number">2</span>) <span class="operator">-</span></span><br><span class="line">           TRUNC(TO_NUMBER(TO_CHAR(V_START_TIME, <span class="string">&#x27;YYYYMMDDHH24MISSXFF&#x27;</span>)), <span class="number">2</span>)</span><br><span class="line">      <span class="keyword">INTO</span> L_LOG.ETL_DURATION</span><br><span class="line">      <span class="keyword">FROM</span> DUAL;</span><br><span class="line">    L_LOG.END_TIME   :<span class="operator">=</span> V_END_TIME;</span><br><span class="line">    L_LOG.ETL_STATUS :<span class="operator">=</span> <span class="string">&#x27;SUCCESS&#x27;</span>;</span><br><span class="line">    <span class="comment">--调用执行日志</span></span><br><span class="line">    BI_DW.SP_W_ETL_LOG(L_LOG);</span><br><span class="line">  EXCEPTION</span><br><span class="line">    <span class="keyword">WHEN</span> OTHERS <span class="keyword">THEN</span></span><br><span class="line">      <span class="keyword">ROLLBACK</span>;</span><br><span class="line">      L_LOG.ETL_STATUS :<span class="operator">=</span> <span class="string">&#x27;FAILURE&#x27;</span>;</span><br><span class="line">      L_LOG.ERR_MSG    :<span class="operator">=</span> SUBSTR(SQLERRM, <span class="number">1</span>, <span class="number">2000</span>);</span><br><span class="line">      BI_DW.SP_W_ETL_LOG(L_LOG);</span><br><span class="line">  <span class="keyword">END</span> SP_DW_INV_AGACCOUNT;</span><br><span class="line"></span><br><span class="line"><span class="keyword">END</span> PKG_DW_INV_AGACCOUNT;</span><br></pre></td></tr></table></figure><p>kettle 定义、运行</p><p><img src="/2020/01/23/BIEE%E6%8A%A5%E8%A1%A8%E5%BC%80%E5%8F%91/20201023092146-fkkxbyl-image.png" alt="image.png"></p><h3 id="DM-层分析表"><a href="#DM-层分析表" class="headerlink" title="DM 层分析表"></a>DM 层分析表</h3><p>编写 SQL 语句</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> t.organization_wid,</span><br><span class="line">       t.inventory_wid,</span><br><span class="line">       t.location_wid,</span><br><span class="line">       t.item_wid,</span><br><span class="line">       round(<span class="built_in">SUM</span>(<span class="keyword">CASE</span></span><br><span class="line">             <span class="keyword">WHEN</span> SYSDATE <span class="operator">-</span> TRUNC(t.transaction_date) <span class="operator">&gt;</span> DA.AGE_LOW <span class="keyword">AND</span></span><br><span class="line">                  SYSDATE <span class="operator">-</span> TRUNC(t.transaction_date) <span class="operator">&lt;=</span> DA.AGE_HIGH <span class="keyword">THEN</span></span><br><span class="line">              SYSDATE <span class="operator">-</span> TRUNC(t.transaction_date)</span><br><span class="line">             <span class="keyword">ELSE</span></span><br><span class="line">              <span class="number">0</span></span><br><span class="line">           <span class="keyword">END</span>),<span class="number">2</span>) 账龄</span><br><span class="line">  <span class="keyword">FROM</span> bi_dw.DW_INV_AGACCOUNT t, BI_DIM.DIM_AGE DA</span><br><span class="line"> <span class="keyword">GROUP</span> <span class="keyword">BY</span> t.organization_wid, t.inventory_wid, t.location_wid, t.item_wid</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>创建 dm 层数据表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- Create table</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> BI_DM.DM_INV_AGACCOUNT</span><br><span class="line">(</span><br><span class="line">  day_wid            NUMBER(<span class="number">10</span>),</span><br><span class="line">  organization_wid   NUMBER,</span><br><span class="line">  inventory_wid      NUMBER,</span><br><span class="line">  location_wid       NUMBER,</span><br><span class="line">  item_wid           NUMBER,</span><br><span class="line">  age_wid            NUMBER(<span class="number">15</span>),</span><br><span class="line">  age_account        NUMBER,</span><br><span class="line">  w_insert_dt        <span class="type">DATE</span>,</span><br><span class="line">  w_update_dt        <span class="type">DATE</span>,</span><br><span class="line">  datasource_num_id  NUMBER,</span><br><span class="line">  etl_proc_id        VARCHAR2(<span class="number">50</span>),</span><br><span class="line">  etl_proc_name      VARCHAR2(<span class="number">50</span>)</span><br><span class="line">)</span><br><span class="line">tablespace BI_DM_DAT</span><br><span class="line">  pctfree <span class="number">10</span></span><br><span class="line">  initrans <span class="number">1</span></span><br><span class="line">  maxtrans <span class="number">255</span></span><br><span class="line">  storage</span><br><span class="line">  (</span><br><span class="line">    <span class="keyword">initial</span> <span class="number">64</span>K</span><br><span class="line">    next <span class="number">1</span>M</span><br><span class="line">    minextents <span class="number">1</span></span><br><span class="line">    maxextents unlimited</span><br><span class="line">  )</span><br><span class="line">nologging;</span><br><span class="line"><span class="comment">-- Add comments to the table </span></span><br><span class="line">comment <span class="keyword">on</span> <span class="keyword">table</span> BI_DM.DM_INV_AGACCOUNT</span><br><span class="line">  <span class="keyword">is</span> <span class="string">&#x27;库存账龄;</span></span><br><span class="line"><span class="string">-- Add comments to the columns </span></span><br><span class="line"><span class="string">comment on column BI_DM.DM_INV_AGACCOUNT.day_wid</span></span><br><span class="line"><span class="string">  is &#x27;</span>日期;</span><br><span class="line">comment <span class="keyword">on</span> <span class="keyword">column</span> BI_DM.DM_INV_AGACCOUNT.organization_wid</span><br><span class="line">  <span class="keyword">is</span> <span class="string">&#x27;库存组织;</span></span><br><span class="line"><span class="string">comment on column BI_DM.DM_INV_AGACCOUNT.inventory_wid</span></span><br><span class="line"><span class="string">  is &#x27;</span>子库存;</span><br><span class="line">comment <span class="keyword">on</span> <span class="keyword">column</span> BI_DM.DM_INV_AGACCOUNT.location_wid</span><br><span class="line">  <span class="keyword">is</span> <span class="string">&#x27;货位;</span></span><br><span class="line"><span class="string">comment on column BI_DM.DM_INV_AGACCOUNT.item_wid</span></span><br><span class="line"><span class="string">  is &#x27;</span>物料;</span><br><span class="line">comment <span class="keyword">on</span> <span class="keyword">column</span> BI_DM.DM_INV_AGACCOUNT.age_wid</span><br><span class="line">  <span class="keyword">is</span> <span class="string">&#x27;账龄段;</span></span><br><span class="line"><span class="string">comment on column BI_DM.DM_INV_AGACCOUNT.age_account</span></span><br><span class="line"><span class="string">  is &#x27;</span>账龄;</span><br><span class="line"><span class="comment">-- Create/Recreate indexes </span></span><br><span class="line"><span class="keyword">create</span> index BI_DM.DM_INV_AGACCOUNT_N1 <span class="keyword">on</span> BI_DM.DM_INV_AGACCOUNT (DAY_WID)</span><br><span class="line">  tablespace BI_DM_DIX</span><br><span class="line">  pctfree <span class="number">10</span></span><br><span class="line">  initrans <span class="number">2</span></span><br><span class="line">  maxtrans <span class="number">255</span></span><br><span class="line">  storage</span><br><span class="line">  (</span><br><span class="line">    <span class="keyword">initial</span> <span class="number">64</span>K</span><br><span class="line">    next <span class="number">1</span>M</span><br><span class="line">    minextents <span class="number">1</span></span><br><span class="line">    maxextents unlimited</span><br><span class="line">  )</span><br><span class="line">  nologging;</span><br></pre></td></tr></table></figure><p>创建 dm 层 package</p><p>package 定义：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">OR</span> REPLACE PACKAGE PKG_DM_INV_AGACCOUNT <span class="keyword">IS</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">-- Author  : KALOSORA</span></span><br><span class="line">  <span class="comment">-- Created : 2020-5-29 上午:42:34</span></span><br><span class="line">  <span class="comment">-- Purpose : 客户余额账龄</span></span><br><span class="line">  <span class="keyword">PROCEDURE</span> SP_DM_INV_AGACCOUNT(P_START_DAY <span class="keyword">IN</span> NUMBER,</span><br><span class="line">                                P_END_DAY   <span class="keyword">IN</span> NUMBER,</span><br><span class="line">                                P_PROC_ID   <span class="keyword">IN</span> NUMBER);</span><br><span class="line"></span><br><span class="line"><span class="keyword">END</span> PKG_DM_INV_AGACCOUNT;</span><br></pre></td></tr></table></figure><p>package 内容：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">OR</span> REPLACE PACKAGE BODY PKG_DM_INV_AGACCOUNT <span class="keyword">IS</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">-- Author  : KALOSORA</span></span><br><span class="line">  <span class="comment">-- Created : 2020-5-29 上午:42:34</span></span><br><span class="line">  <span class="comment">-- Purpose : 客户余额账龄</span></span><br><span class="line">  <span class="keyword">PROCEDURE</span> SP_DM_INV_AGACCOUNT(P_START_DAY <span class="keyword">IN</span> NUMBER,</span><br><span class="line">                                P_END_DAY   <span class="keyword">IN</span> NUMBER,</span><br><span class="line">                                P_PROC_ID   <span class="keyword">IN</span> NUMBER) <span class="keyword">IS</span></span><br><span class="line">    V_START_DAY  NUMBER(<span class="number">10</span>) :<span class="operator">=</span> P_START_DAY;</span><br><span class="line">    V_END_DAY    NUMBER(<span class="number">10</span>) :<span class="operator">=</span> P_END_DAY;</span><br><span class="line">    V_PROC_ID    NUMBER(<span class="number">8</span>) :<span class="operator">=</span> P_PROC_ID;</span><br><span class="line">    V_START_TIME <span class="type">TIMESTAMP</span>; <span class="comment">--开始时间</span></span><br><span class="line">    V_END_TIME   <span class="type">TIMESTAMP</span>; <span class="comment">--结束时间</span></span><br><span class="line">    L_LOG        BI_DW.W_ETL_LOG<span class="operator">%</span>ROWTYPE; <span class="comment">--日志表游标</span></span><br><span class="line">  <span class="keyword">BEGIN</span></span><br><span class="line">    <span class="comment">--记录程序开始时间</span></span><br><span class="line">    <span class="keyword">SELECT</span> <span class="built_in">CURRENT_TIMESTAMP</span> <span class="keyword">INTO</span> V_START_TIME <span class="keyword">FROM</span> DUAL;</span><br><span class="line">    <span class="comment">--记录日志</span></span><br><span class="line">    L_LOG.PROC_NAME       :<span class="operator">=</span> <span class="string">&#x27;SP_DM_INV_AGACCOUNT&#x27;</span>; <span class="comment">--过程名称</span></span><br><span class="line">    L_LOG.TABLE_TYPE      :<span class="operator">=</span> <span class="string">&#x27;F&#x27;</span>; <span class="comment">--表类型</span></span><br><span class="line">    L_LOG.TABLE_NAME      :<span class="operator">=</span> <span class="string">&#x27;DM_INV_AGACCOUNT&#x27;</span>; <span class="comment">--表名称</span></span><br><span class="line">    L_LOG.MEASURE_ID      :<span class="operator">=</span> <span class="keyword">NULL</span>;</span><br><span class="line">    L_LOG.ETL_INTERVAL    :<span class="operator">=</span> V_START_DAY <span class="operator">||</span> <span class="string">&#x27;~&#x27;</span> <span class="operator">||</span> V_END_DAY; <span class="comment">--抽数区间</span></span><br><span class="line">    L_LOG.PROC_ID         :<span class="operator">=</span> V_PROC_ID; <span class="comment">--过程D</span></span><br><span class="line">    L_LOG.START_TIME      :<span class="operator">=</span> V_START_TIME; <span class="comment">--开始时间</span></span><br><span class="line">    L_LOG.ETL_RECORD_LOAD :<span class="operator">=</span> <span class="number">0</span>; <span class="comment">--涉及记录数</span></span><br><span class="line">    L_LOG.ETL_RECORD_INS  :<span class="operator">=</span> <span class="number">0</span>; <span class="comment">--实际插入的记录数</span></span><br><span class="line">    L_LOG.ETL_RECORD_UPD  :<span class="operator">=</span> <span class="number">0</span>; <span class="comment">--更新的记录数，如果该存储过程有更新部分，则不等于零</span></span><br><span class="line">    L_LOG.ETL_RECORD_DEL  :<span class="operator">=</span> <span class="number">0</span>; <span class="comment">--插入前清理目标时的删除记录数</span></span><br><span class="line">  </span><br><span class="line">    <span class="keyword">FOR</span> C <span class="keyword">IN</span> (<span class="keyword">SELECT</span> DAY_WID</span><br><span class="line">                <span class="keyword">FROM</span> BI_DIM.DIM_DAY</span><br><span class="line">               <span class="keyword">WHERE</span> DAY_WID <span class="operator">&gt;=</span></span><br><span class="line">                     TO_CHAR(ADD_MONTHS(TO_DATE(V_START_DAY, <span class="string">&#x27;YYYYMMDD&#x27;</span>), <span class="number">-1</span>),</span><br><span class="line">                             <span class="string">&#x27;YYYYMMDD&#x27;</span>)</span><br><span class="line">                 <span class="keyword">AND</span> DAY_WID <span class="operator">&lt;=</span> V_END_DAY</span><br><span class="line">               <span class="keyword">ORDER</span> <span class="keyword">BY</span> DAY_WID) LOOP</span><br><span class="line">      <span class="comment">--删除记录</span></span><br><span class="line">      <span class="keyword">DELETE</span> DM_INV_AGACCOUNT F <span class="keyword">WHERE</span> F.DAY_WID <span class="operator">=</span> C.DAY_WID;</span><br><span class="line">      <span class="keyword">COMMIT</span>;</span><br><span class="line">      <span class="comment">--加载数据</span></span><br><span class="line">      <span class="comment">--账龄</span></span><br><span class="line">      <span class="keyword">INSERT</span> <span class="keyword">INTO</span> DM_INV_AGACCOUNT</span><br><span class="line">        (day_wid,</span><br><span class="line">         organization_wid,</span><br><span class="line">         inventory_wid,</span><br><span class="line">         location_wid,</span><br><span class="line">         item_wid,</span><br><span class="line">         age_wid,</span><br><span class="line">         age_account,</span><br><span class="line">         w_insert_dt,</span><br><span class="line">         w_update_dt,</span><br><span class="line">         datasource_num_id,</span><br><span class="line">         etl_proc_id,</span><br><span class="line">         etl_proc_name)</span><br><span class="line">        <span class="keyword">SELECT</span> C.DAY_WID,</span><br><span class="line">               t.organization_wid,</span><br><span class="line">               t.inventory_wid,</span><br><span class="line">               t.location_wid,</span><br><span class="line">               t.item_wid,</span><br><span class="line">               DA.AGE_WID,</span><br><span class="line">               round(<span class="built_in">SUM</span>(<span class="keyword">CASE</span></span><br><span class="line">                           <span class="keyword">WHEN</span> SYSDATE <span class="operator">-</span> TRUNC(t.transaction_date) <span class="operator">&gt;</span> DA.AGE_LOW <span class="keyword">AND</span></span><br><span class="line">                                SYSDATE <span class="operator">-</span> TRUNC(t.transaction_date) <span class="operator">&lt;=</span> DA.AGE_HIGH <span class="keyword">THEN</span></span><br><span class="line">                            SYSDATE <span class="operator">-</span> TRUNC(t.transaction_date)</span><br><span class="line">                           <span class="keyword">ELSE</span></span><br><span class="line">                            <span class="number">0</span></span><br><span class="line">                         <span class="keyword">END</span>),</span><br><span class="line">                     <span class="number">2</span>),</span><br><span class="line">               SYSDATE,</span><br><span class="line">               SYSDATE,</span><br><span class="line">               <span class="number">1</span>,</span><br><span class="line">               V_PROC_ID,</span><br><span class="line">               L_LOG.PROC_NAME</span><br><span class="line">          <span class="keyword">FROM</span> bi_dw.DW_INV_AGACCOUNT t, BI_DIM.DIM_AGE DA</span><br><span class="line">         <span class="keyword">WHERE</span> trunc(t.transaction_date) <span class="operator">&lt;=</span></span><br><span class="line">               TO_DATE(C.DAY_WID, <span class="string">&#x27;YYYYMMDD&#x27;</span>)</span><br><span class="line">           <span class="keyword">AND</span> DA.AGE_WID <span class="operator">&lt;&gt;</span> <span class="number">0</span></span><br><span class="line">         <span class="keyword">GROUP</span> <span class="keyword">BY</span> t.organization_wid,</span><br><span class="line">                  t.inventory_wid,</span><br><span class="line">                  t.location_wid,</span><br><span class="line">                  t.item_wid,</span><br><span class="line">                  DA.AGE_WID</span><br><span class="line">        <span class="comment">--HAVING SUM(F.AMOUNT) &lt;&gt; 0</span></span><br><span class="line">        ;</span><br><span class="line">      L_LOG.ETL_RECORD_INS :<span class="operator">=</span> L_LOG.ETL_RECORD_INS <span class="operator">+</span> <span class="keyword">SQL</span><span class="operator">%</span>ROWCOUNT;</span><br><span class="line">      <span class="keyword">COMMIT</span>;</span><br><span class="line">    <span class="keyword">END</span> LOOP;</span><br><span class="line">    <span class="comment">--程序结束时间</span></span><br><span class="line">    <span class="keyword">SELECT</span> <span class="built_in">CURRENT_TIMESTAMP</span> <span class="keyword">INTO</span> V_END_TIME <span class="keyword">FROM</span> DUAL;</span><br><span class="line">    <span class="comment">--执行时间</span></span><br><span class="line">    <span class="keyword">SELECT</span> TRUNC(TO_NUMBER(TO_CHAR(V_END_TIME, <span class="string">&#x27;YYYYMMDDHH24MISSXFF&#x27;</span>)), <span class="number">2</span>) <span class="operator">-</span></span><br><span class="line">           TRUNC(TO_NUMBER(TO_CHAR(V_START_TIME, <span class="string">&#x27;YYYYMMDDHH24MISSXFF&#x27;</span>)), <span class="number">2</span>)</span><br><span class="line">      <span class="keyword">INTO</span> L_LOG.ETL_DURATION</span><br><span class="line">      <span class="keyword">FROM</span> DUAL;</span><br><span class="line">    L_LOG.END_TIME   :<span class="operator">=</span> V_END_TIME;</span><br><span class="line">    L_LOG.ETL_STATUS :<span class="operator">=</span> <span class="string">&#x27;SUCCESS&#x27;</span>;</span><br><span class="line">    <span class="comment">--调用执行日志</span></span><br><span class="line">    BI_DW.SP_W_ETL_LOG(L_LOG);</span><br><span class="line">  EXCEPTION</span><br><span class="line">    <span class="keyword">WHEN</span> OTHERS <span class="keyword">THEN</span></span><br><span class="line">      <span class="keyword">ROLLBACK</span>;</span><br><span class="line">      L_LOG.ETL_STATUS :<span class="operator">=</span> <span class="string">&#x27;FAILURE&#x27;</span>;</span><br><span class="line">      L_LOG.ERR_MSG    :<span class="operator">=</span> SUBSTR(SQLERRM, <span class="number">1</span>, <span class="number">2000</span>);</span><br><span class="line">      BI_DW.SP_W_ETL_LOG(L_LOG);</span><br><span class="line">  <span class="keyword">END</span> SP_DM_INV_AGACCOUNT;</span><br><span class="line"></span><br><span class="line"><span class="keyword">END</span> PKG_DM_INV_AGACCOUNT;</span><br></pre></td></tr></table></figure><h3 id="BIEE-视图层开发"><a href="#BIEE-视图层开发" class="headerlink" title="BIEE 视图层开发"></a>BIEE 视图层开发</h3><p>登录到 biee 服务器，下载 rpd 文件用离线模式打开(加快运行速度)，找到文件 GJ_BI.rpd</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/u01/biee/Oracle/Middleware/Config/user_projects/domains/bi/bidata/service_instances/ssi/metadata/datamodel/customizations/</span><br></pre></td></tr></table></figure><p>新建数据库，新建链接池</p><p>12c 数据库属性设置</p><p><img src="/2020/01/23/BIEE%E6%8A%A5%E8%A1%A8%E5%BC%80%E5%8F%91/20201023092453-czoqr5l-image.png" alt="image.png"></p><p>链接池属性设置</p><p><img src="/2020/01/23/BIEE%E6%8A%A5%E8%A1%A8%E5%BC%80%E5%8F%91/20201023092610-zcj308z-image.png" alt="image.png"></p><p>切换到 BI_QUERY 用户，先为数据表创建同义词</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">OR</span> REPLACE SYNONYM DIM_INVENTORIESFOR <span class="keyword">FOR</span> BI_DIM.DIM_INVENTORIES;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">OR</span> REPLACE SYNONYM DIM_ITEM  <span class="keyword">FOR</span> BI_DIM.DIM_ITEM;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">OR</span> REPLACE SYNONYM DIM_ITEM_LOCATION <span class="keyword">FOR</span> BI_DIM.DIM_ITEM_LOCATION;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">OR</span> REPLACE SYNONYM DIM_ORGANIZATION_UNITS <span class="keyword">FOR</span> BI_DIM.DIM_ORGANIZATION_UNITS;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> SYNONYM dw_inv_agaccount <span class="keyword">FOR</span> bi_dw.dw_inv_agaccount;</span><br></pre></td></tr></table></figure><p>连接池，右键，导入数据表</p><p><img src="/2020/01/23/BIEE%E6%8A%A5%E8%A1%A8%E5%BC%80%E5%8F%91/20201023092642-xffd4m5-image.png" alt="image.png"></p><p><img src="/2020/01/23/BIEE%E6%8A%A5%E8%A1%A8%E5%BC%80%E5%8F%91/20201023092649-n9qb531-image.png" alt="image.png"></p><p>创建物理层事实表</p><p>对需要创建的表，右键-》新建对象-》别名</p><p><img src="/2020/01/23/BIEE%E6%8A%A5%E8%A1%A8%E5%BC%80%E5%8F%91/20201023092702-e35ftl6-image.png" alt="image.png"></p><p>输入名称，保持一致</p><p><img src="/2020/01/23/BIEE%E6%8A%A5%E8%A1%A8%E5%BC%80%E5%8F%91/20201023092712-bmhlmwp-image.png" alt="image.png"></p><p>物理层创建完毕</p><p><img src="/2020/01/23/BIEE%E6%8A%A5%E8%A1%A8%E5%BC%80%E5%8F%91/20201023092723-htx7w3h-image.png" alt="image.png"></p><p>同理，dw 表也要创建别名</p><p><img src="/2020/01/23/BIEE%E6%8A%A5%E8%A1%A8%E5%BC%80%E5%8F%91/20201023092735-2bivfmh-image.png" alt="image.png"></p><p>选中维度和事实表，右键，物理图表-》仅所选对象。然后关联主键 id</p><p><img src="/2020/01/23/BIEE%E6%8A%A5%E8%A1%A8%E5%BC%80%E5%8F%91/20201023092747-cgyjccb-image.png" alt="image.png"></p><p><img src="/2020/01/23/BIEE%E6%8A%A5%E8%A1%A8%E5%BC%80%E5%8F%91/20201023092753-wbtt0xp-image.png" alt="image.png"></p><p><img src="/2020/01/23/BIEE%E6%8A%A5%E8%A1%A8%E5%BC%80%E5%8F%91/20201023092804-eg7uvlr-image.png" alt="image.png"></p><p>修改事实表&#x2F;维度表的表名称</p><p><img src="/2020/01/23/BIEE%E6%8A%A5%E8%A1%A8%E5%BC%80%E5%8F%91/20201023092816-jbyqz93-image.png" alt="image.png"></p><p>修改字段名称，删除维度和事实表中不需要的字段</p><p><img src="/2020/01/23/BIEE%E6%8A%A5%E8%A1%A8%E5%BC%80%E5%8F%91/20201023092828-ofkrki2-image.png" alt="image.png"></p><p>维度修改后</p><p><img src="/2020/01/23/BIEE%E6%8A%A5%E8%A1%A8%E5%BC%80%E5%8F%91/20201023092846-wss5x0s-image.png" alt="image.png"></p><p>事实表修改后</p><p><img src="/2020/01/23/BIEE%E6%8A%A5%E8%A1%A8%E5%BC%80%E5%8F%91/20201023092856-y2hsuz2-image.png" alt="image.png"></p><p>5.3 创建逻辑维</p><p><img src="/2020/01/23/BIEE%E6%8A%A5%E8%A1%A8%E5%BC%80%E5%8F%91/20201023092907-ubusmxx-image.png" alt="image.png"></p><p>修改维度的名称和字段名，并且删除不需要的字段</p><p><img src="/2020/01/23/BIEE%E6%8A%A5%E8%A1%A8%E5%BC%80%E5%8F%91/20201023092917-tddmoss-image.png" alt="image.png"></p><p>双击维度 detail 层，设置显示的主键</p><p><img src="/2020/01/23/BIEE%E6%8A%A5%E8%A1%A8%E5%BC%80%E5%8F%91/20201023092926-pj7vvwc-image.png" alt="image.png"></p><p><img src="/2020/01/23/BIEE%E6%8A%A5%E8%A1%A8%E5%BC%80%E5%8F%91/20201023092934-rgi5q7r-image.png" alt="image.png"></p><p>注意：时间维度要做如下操作</p><p><img src="/2020/01/23/BIEE%E6%8A%A5%E8%A1%A8%E5%BC%80%E5%8F%91/20201023092945-sflgpox-image.png" alt="image.png"></p><p><strong>以上，其他维度也是如此</strong></p><p>拖动数据到展示层</p><p><img src="/2020/01/23/BIEE%E6%8A%A5%E8%A1%A8%E5%BC%80%E5%8F%91/20201023093001-jytkhem-image.png" alt="image.png"></p><p>上传 rpd 文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/u01/biee/Oracle/Middleware/Config/user_projects/domains/bi/bidata/service_instances/ssi/metadata/datamodel/customizations</span><br></pre></td></tr></table></figure><p>上传命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[oracle@OBIEE ~]$ cd /u01/biee/Oracle/Middleware/Config/user_projects/domains/bi/bidata/service_instances/ssi/metadata/datamodel/customizations[oracle@OBIEE customizations]$ /u01/biee/Oracle/Middleware/Config/user_projects/domains/bi/bitools/bin/datamodel.sh uploadrpd -u weblogic -p bieetest2019 -i liverpd.rpd -w Admin123 -S biee-test -SI ssi</span><br></pre></td></tr></table></figure><h3 id="BIEE-前端设置"><a href="#BIEE-前端设置" class="headerlink" title="BIEE 前端设置"></a>BIEE 前端设置</h3><p>新建分析 -》 右上角新建，分析</p><p><img src="/2020/01/23/BIEE%E6%8A%A5%E8%A1%A8%E5%BC%80%E5%8F%91/20201023093203-a674zaz-image.png" alt="image.png"></p><p><img src="/2020/01/23/BIEE%E6%8A%A5%E8%A1%A8%E5%BC%80%E5%8F%91/20201023093209-cfcsfoe-image.png" alt="image.png"></p><p>选择相应的主题后，把事实表中的列拖动到“所选列中”，然后选择对应的主题区域进行保存</p><p><img src="/2020/01/23/BIEE%E6%8A%A5%E8%A1%A8%E5%BC%80%E5%8F%91/20201023093436-g07egw4-image.png" alt="image.png"></p><p>新建仪表盘提示，并选择主题区域</p><p><img src="/2020/01/23/BIEE%E6%8A%A5%E8%A1%A8%E5%BC%80%E5%8F%91/20201023093237-zy0ioag-image.png" alt="image.png"></p><p>选择列提示</p><p><img src="/2020/01/23/BIEE%E6%8A%A5%E8%A1%A8%E5%BC%80%E5%8F%91/20201023093519-03y0bzw-image.png" alt="image.png"></p><p><img src="/2020/01/23/BIEE%E6%8A%A5%E8%A1%A8%E5%BC%80%E5%8F%91/20201023093525-vjg8yvh-image.png" alt="image.png"></p><p>新建仪表盘</p><p><img src="/2020/01/23/BIEE%E6%8A%A5%E8%A1%A8%E5%BC%80%E5%8F%91/20201023093534-mknope5-image.png" alt="image.png"></p><p>把仪表盘提示和分析，分别拖入到仪表盘中</p><p><img src="/2020/01/23/BIEE%E6%8A%A5%E8%A1%A8%E5%BC%80%E5%8F%91/20201023093543-jf5d20v-image.png" alt="image.png"></p><p>回到 编辑分析 页面，切换到 标准 选项卡，添加筛选器，使得仪表盘提示能够正常过滤数据</p><p><img src="/2020/01/23/BIEE%E6%8A%A5%E8%A1%A8%E5%BC%80%E5%8F%91/20201023093554-o94lrdz-image.png" alt="image.png"></p><p>选择要过滤的列</p><p>注意：仪表盘中，提示的数据源要和筛选器中的数据源相同。</p><p>如果仪表盘提示使用的是 维表 那么筛选器也要使用 维表</p><p>如果仪表盘提示使用的是 事实表 那么筛选器也要使用 事实表</p><p><img src="/2020/01/23/BIEE%E6%8A%A5%E8%A1%A8%E5%BC%80%E5%8F%91/20201023093626-jnnszl3-image.png" alt="image.png"></p><p><img src="/2020/01/23/BIEE%E6%8A%A5%E8%A1%A8%E5%BC%80%E5%8F%91/20201023093633-vyuk2cs-image.png" alt="image.png"></p><p>完成效果如下，注意关键字段的来源，有的来源于维表，用于过滤数据</p><p><img src="/2020/01/23/BIEE%E6%8A%A5%E8%A1%A8%E5%BC%80%E5%8F%91/20201023093640-cvvek5p-image.png" alt="image.png"></p><p>提示也必须来源于维表</p><p><img src="/2020/01/23/BIEE%E6%8A%A5%E8%A1%A8%E5%BC%80%E5%8F%91/20201023093649-ykuxn2n-image.png" alt="image.png"></p><p>注意：如果报表无法充满整个屏幕，要编辑分析，选择内容分页即可</p><p><img src="/2020/01/23/BIEE%E6%8A%A5%E8%A1%A8%E5%BC%80%E5%8F%91/20201023093701-b02knsy-image.png" alt="image.png"></p><p>注意：设置字段相同也显示</p><p><img src="/2020/01/23/BIEE%E6%8A%A5%E8%A1%A8%E5%BC%80%E5%8F%91/20201023093717-3au5muj-image.png" alt="image.png"></p><p><img src="/2020/01/23/BIEE%E6%8A%A5%E8%A1%A8%E5%BC%80%E5%8F%91/20201023093724-jx4h5k5-image.png" alt="image.png"></p><p><img src="/2020/01/23/BIEE%E6%8A%A5%E8%A1%A8%E5%BC%80%E5%8F%91/20201023093731-jm6m6mr-image.png" alt="image.png"></p><p>注意：设置打印</p><p><img src="/2020/01/23/BIEE%E6%8A%A5%E8%A1%A8%E5%BC%80%E5%8F%91/20201023093741-x1da03q-image.png" alt="image.png"></p><p><img src="/2020/01/23/BIEE%E6%8A%A5%E8%A1%A8%E5%BC%80%E5%8F%91/20201023093746-dfwkn3d-image.png" alt="image.png"></p><p>设置 biee 的数据显示为最大行数-配置文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/u01/biee/Oracle/Middleware/Config/user_projects/domains/bi/config/fmwconfig/biconfig/OBIPS/instanceconfig.xml</span><br></pre></td></tr></table></figure><p>修改完后要重启 biee 应用</p><p>同时还要修改 Oracle EM 上的最大行数</p><p><img src="/2020/01/23/BIEE%E6%8A%A5%E8%A1%A8%E5%BC%80%E5%8F%91/20201023093819-ne3cja5-image.png" alt="image.png"></p><p>BIEE 添加用户 -&gt; 登陆到 Oracle WEBLOGIC CONSOLE</p><p><img src="/2020/01/23/BIEE%E6%8A%A5%E8%A1%A8%E5%BC%80%E5%8F%91/20201023093837-zco6gaw-image.png" alt="image.png"></p><h3 id="数据仓库设计"><a href="#数据仓库设计" class="headerlink" title="数据仓库设计"></a>数据仓库设计</h3><p>数据仓库设计</p><ul><li>ODS 元数据 （BI_SRC 层）</li><li>DIM  维度层（BI_DIM 层，贯穿 DW 和 DM 层）</li><li>DW   数据仓库层（BI_DW 层），展示报表明细数据</li><li>DM   数据集市层（BI_DM 层）基于 BI_DW 层的数据，生成新的表，主要用于计算帐龄、余额的数据，根据不同的指标来展现聚合的数据</li></ul><p>命名规范</p><p>书目</p><ul><li>数据仓库工具箱-——维度建模权威指南</li><li>《Hadoop 构建数据仓库实践》</li></ul><p>数据层——ETL 工具的 kettle</p><p>新建 kettle 转换</p><p>选择表输入和表输出</p><p>根据需要设置增量同步</p><p>新建 job，把多个 kettle 文件连在一起；job 设置定时同步</p>]]></content>
      
      
      <categories>
          
          <category> ORACLE BIEE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DATAWARE HOUSE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BIEE开发代码相关</title>
      <link href="/2020/01/23/BIEE%E5%BC%80%E5%8F%91%E4%BB%A3%E7%A0%81%E7%9B%B8%E5%85%B3/"/>
      <url>/2020/01/23/BIEE%E5%BC%80%E5%8F%91%E4%BB%A3%E7%A0%81%E7%9B%B8%E5%85%B3/</url>
      
        <content type="html"><![CDATA[<h1 id="BIEE-开发代码相关"><a href="#BIEE-开发代码相关" class="headerlink" title="BIEE 开发代码相关"></a>BIEE 开发代码相关</h1><h5 id="增加用户"><a href="#增加用户" class="headerlink" title="增加用户"></a>增加用户</h5><p>数据库增加数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--用户密码表</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> BI_WRITE.APD_BI_USERS t;</span><br><span class="line"></span><br><span class="line"><span class="comment">--用户组织权限表</span></span><br><span class="line"><span class="keyword">SELECT</span> user_id, user_name, dimension_name 法人代码, dimension_data OU代码</span><br><span class="line">  <span class="keyword">FROM</span> bi_write.apd_user_data_permisssion;</span><br><span class="line"></span><br><span class="line"><span class="comment">--用户的功能权限（可访问哪些报表）</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> BI_WRITE.APD_USER_REPORT_PERMISSION t</span><br></pre></td></tr></table></figure><p>BIEE 的操作</p><p>1.用 weblogic 管理员用户登录，点击右上角管理</p><p><img src="/2020/01/23/BIEE%E5%BC%80%E5%8F%91%E4%BB%A3%E7%A0%81%E7%9B%B8%E5%85%B3/20201023090531-w6rxee9-image.png" alt="BIEE开发代码相关.png"></p><p>2.点击 会话管理-&gt; 管理回话</p><p><img src="/2020/01/23/BIEE%E5%BC%80%E5%8F%91%E4%BB%A3%E7%A0%81%E7%9B%B8%E5%85%B3/20201023090602-ivk6b8s-image.png" alt="BIEE开发代码相关.png"></p><p>3.分别点击 关闭所有游标 和 取消正在运行的请求</p><p><img src="/2020/01/23/BIEE%E5%BC%80%E5%8F%91%E4%BB%A3%E7%A0%81%E7%9B%B8%E5%85%B3/20201023090614-ueaelqy-image.png" alt="BIEE开发代码相关.png"></p><p>4.后退，回到管理界面，点击发送 SQL 语句</p><p><img src="/2020/01/23/BIEE%E5%BC%80%E5%8F%91%E4%BB%A3%E7%A0%81%E7%9B%B8%E5%85%B3/20201023090633-igpj75t-image.png" alt="BIEE开发代码相关.png"></p><p>输入 CALL SAPURGEALLCACHE();并点击发送</p><p><img src="/2020/01/23/BIEE%E5%BC%80%E5%8F%91%E4%BB%A3%E7%A0%81%E7%9B%B8%E5%85%B3/20201023090648-ssvlj0u-image.png" alt="BIEE开发代码相关.png"></p><p>点击后退，回到管理界面，点击重新加载文件和元数据</p><p><img src="/2020/01/23/BIEE%E5%BC%80%E5%8F%91%E4%BB%A3%E7%A0%81%E7%9B%B8%E5%85%B3/20201023090701-uddn4z6-image.png" alt="BIEE开发代码相关.png"></p><h5 id="查看-bi-同步日志"><a href="#查看-bi-同步日志" class="headerlink" title="查看 bi 同步日志"></a>查看 bi 同步日志</h5><p>1.从数据库查询</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> bi_dw.w_etl_log <span class="keyword">WHERE</span> proc_id <span class="operator">=</span> <span class="string">&#x27;20200516&#x27;</span> <span class="keyword">order</span> <span class="keyword">by</span> start_time <span class="keyword">desc</span>;</span><br></pre></td></tr></table></figure><p>2.从服务器查看</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">--环境信息</span><br><span class="line">10.38.1.129</span><br><span class="line">bieetest/bieetest </span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">--命令</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">su oratest/oratest //切换用户</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">crontab -l         //查看定时任务信息</span></span><br><span class="line">                     //可以cd到 /u01/kettle/kettle_file/log目录下查看</span><br><span class="line">                     //u01/kettle/kettle_file/RunJob.sh 是执行同步的命令</span><br></pre></td></tr></table></figure><p>‍</p>]]></content>
      
      
      <categories>
          
          <category> ORACLE BIEE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DATAWARE HOUSE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java集合</title>
      <link href="/2019/11/17/Java%E9%9B%86%E5%90%88/"/>
      <url>/2019/11/17/Java%E9%9B%86%E5%90%88/</url>
      
        <content type="html"><![CDATA[<h1 id="Java集合"><a href="#Java集合" class="headerlink" title="Java集合"></a>Java集合</h1><p>‍</p><h2 id="Iterator"><a href="#Iterator" class="headerlink" title="Iterator"></a>Iterator</h2><p>集合中的顶级接口，源代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Iterator</span>&lt;E&gt; &#123;</span><br><span class="line"></span><br><span class="line">  <span class="type">boolean</span> <span class="title function_">hasNext</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">  E <span class="title function_">next</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">default</span> <span class="keyword">void</span> <span class="title function_">remove</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UnsupportedOperationException</span>(<span class="string">&quot;remove&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">default</span> <span class="keyword">void</span> <span class="title function_">forEachRemaining</span><span class="params">(Consumer&lt;? <span class="built_in">super</span> E&gt; action)</span> &#123;</span><br><span class="line">        Objects.requireNonNull(action);</span><br><span class="line">        <span class="keyword">while</span> (hasNext())</span><br><span class="line">            action.accept(next());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>包含2个动态方法</p><p>循环的时候要先调用hasNext进行判断，然后再调用next</p><h3 id="实例1：Iterator遍历"><a href="#实例1：Iterator遍历" class="headerlink" title="实例1：Iterator遍历"></a>实例1：Iterator遍历</h3><p>通过操作迭代器来进行集合的遍历</p><p>集合中的任何数据结构，都可以使用foreach代替iterator循环。</p><p>原因是Collection接口扩展了Iterable接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 模拟Iterator</span></span><br><span class="line">    <span class="type">var</span> <span class="variable">list</span> <span class="operator">=</span> Stream.of(<span class="string">&quot;Ashe&quot;</span>, <span class="string">&quot;Zed&quot;</span>, <span class="string">&quot;Yasuo&quot;</span>)</span><br><span class="line">            .collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 任何实现了 Iterator&lt;E&gt; 接口的方法，都会有迭代器</span></span><br><span class="line">    <span class="comment">// 获取list的迭代器</span></span><br><span class="line">    <span class="type">var</span> <span class="variable">iterator</span> <span class="operator">=</span> list.iterator();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用迭代器循环</span></span><br><span class="line">    <span class="comment">// 循环输出list，每次调用next方法，都要先判断hasNext</span></span><br><span class="line">    <span class="comment">// 如果没有判断，会抛出NoSuchElementException</span></span><br><span class="line">    System.out.println(<span class="string">&quot;迭代器循环：&quot;</span>);</span><br><span class="line">    <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">        System.out.println(iterator.next());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// for循环与迭代器循环等价</span></span><br><span class="line">    System.out.println(<span class="string">&quot;foreach循环：&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> element : list) &#123;</span><br><span class="line">        System.out.println(element);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>‍</p><h3 id="实例2：Iterator删除"><a href="#实例2：Iterator删除" class="headerlink" title="实例2：Iterator删除"></a>实例2：Iterator删除</h3><p>Iterator 类似于一个指针，或者是SQL中的一个游标：在执行查找操作的同时，迭代器的位置会随之向前移动。可以通过next方法移动到下一个元素</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">var</span> <span class="variable">list</span> <span class="operator">=</span> Stream.of(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>).collect(Collectors.toList());</span><br><span class="line">    <span class="type">var</span> <span class="variable">iterator</span> <span class="operator">=</span> list.iterator();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 删除第二个元素，需要移动两次迭代器</span></span><br><span class="line">    <span class="comment">// 这里从第0位移动到了第2位</span></span><br><span class="line">    iterator.next();</span><br><span class="line">    iterator.next();</span><br><span class="line">    iterator.remove();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> element : list) &#123;</span><br><span class="line">        System.out.println(element);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>‍</p><h3 id="实例3：随机序列产生器"><a href="#实例3：随机序列产生器" class="headerlink" title="实例3：随机序列产生器"></a>实例3：随机序列产生器</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 实现随机序列产生器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RandomStringGenerator</span>&lt;T&gt; <span class="keyword">implements</span> <span class="title class_">Iterable</span>&lt;T&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;T&gt; list;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构造器</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">RandomStringGenerator</span><span class="params">(List&lt;T&gt; list)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.list = list;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Iterator&lt;T&gt; <span class="title function_">iterator</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Iterator</span>&lt;T&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hasNext</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> T <span class="title function_">next</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> list.get((<span class="type">int</span>) (list.size() * Math.random()));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">var</span> <span class="variable">list</span> <span class="operator">=</span> Arrays.asList(<span class="string">&quot;List&quot;</span>, <span class="string">&quot;Tree&quot;</span>, <span class="string">&quot;Array&quot;</span>);</span><br><span class="line">        <span class="type">var</span> <span class="variable">gen</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RandomStringGenerator</span>&lt;String&gt;(list);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 操作迭代器</span></span><br><span class="line">        <span class="type">var</span> <span class="variable">it</span> <span class="operator">=</span> gen.iterator();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            System.out.println(it.next());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//        ArrayList转换成数组</span></span><br><span class="line"><span class="comment">//        ArrayList&lt;String&gt; arr = new ArrayList&lt;String&gt;();</span></span><br><span class="line"><span class="comment">//        arr.add(&quot;3&quot;);</span></span><br><span class="line"><span class="comment">//        var strArr = arr.toArray(new String[0]);</span></span><br><span class="line"><span class="comment">//        System.out.println(strArr.toString());</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// ArrayList通过构造器转换为数组</span></span><br><span class="line"><span class="comment">//        ArrayList&lt;String&gt; arr = new ArrayList&lt;String&gt;();</span></span><br><span class="line"><span class="comment">//        arr.add(&quot;3&quot;);</span></span><br><span class="line"><span class="comment">//        // Method Reference ::</span></span><br><span class="line"><span class="comment">//        // 通过这种方式可以访问到数组的构造方法</span></span><br><span class="line"><span class="comment">//        var strArr = arr.toArray(String[]::new);</span></span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>‍</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ol><li><p>从上述实例中可以看出，Iterator接口只具有<code>遍历</code>和<code>删除</code>元素的功能</p></li><li><p>Collection接口<code>继承</code>了Iterable接口，并且提供了<code>查询</code>、<code>判断</code>等等的扩展功能</p></li><li><p>AbstractCollection实现了Collection方法，相当于提供了默认的方法，如果子集合中有更高效的实现可以交给子类提供。</p><ol><li>但是java8以后接口引入了<code>default</code>，这种方式应该交给default方法，充当动态方法，允许子类重写</li><li>Abstract方法必须先被继承后，才能够实例化；主要用于当一个类&#x2F;接口不足以描述一个对象的时候的补充手段，相当于提供默认的实现</li><li>Abstract方法，一般用于<code>模板方法设计模式</code>，提供通用的总体算法骨架 以及 具体的业务抽象方法（该方法由子类来实现）</li></ol></li></ol><p>‍</p><p>‍</p><h2 id="容器框架图"><a href="#容器框架图" class="headerlink" title="容器框架图"></a>容器框架图</h2><p>容器：用于容纳一组<strong>对象</strong>，不能容纳非对象类型，要能够<code>增删改与遍历</code></p><p>容器 <code>Collection</code> 关系图</p><p><img src="/2019/11/17/Java%E9%9B%86%E5%90%88/402670-20191117185306543-1130864512-20210317094853-modvcpu.png" alt="image.png"></p><p>‍</p><h3 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h3><p>LinkedList</p><ul><li>优点：插入、删除元素的开销小</li><li>缺点：无法随机读取元素</li><li>场景：适用于查询少、操作多的场景</li></ul><p>Java中的链表都是双向链表</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">   <span class="type">var</span> <span class="variable">list</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;String&gt;();</span><br><span class="line"></span><br><span class="line">   list.add(<span class="string">&quot;Ashe&quot;</span>);</span><br><span class="line">   list.add(<span class="string">&quot;Yasuo&quot;</span>);</span><br><span class="line">   list.add(<span class="string">&quot;Zed&quot;</span>);</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 获取迭代器</span></span><br><span class="line">   <span class="type">var</span> <span class="variable">iterator</span> <span class="operator">=</span> list.iterator();</span><br><span class="line">   <span class="type">String</span> <span class="variable">first</span> <span class="operator">=</span> iterator.next();</span><br><span class="line">   <span class="type">String</span> <span class="variable">second</span> <span class="operator">=</span> iterator.next();</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;第一个元素: &quot;</span> + first);</span><br><span class="line">    System.out.println(<span class="string">&quot;第二个元素: &quot;</span> + second);</span><br><span class="line"></span><br><span class="line">    list.remove();</span><br><span class="line">    System.out.println(list);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// add方法，元素表尾添加</span></span><br><span class="line">    list.add(<span class="string">&quot;NuNu&quot;</span>);</span><br><span class="line">    System.out.println(list);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 移动指针后，读取前驱</span></span><br><span class="line">    <span class="comment">// ListIterator 扩展了Iterator方法，使其具有add和反向遍历的能力</span></span><br><span class="line">    <span class="type">var</span> <span class="variable">listIterator</span> <span class="operator">=</span> list.listIterator();</span><br><span class="line">    listIterator.next();</span><br><span class="line">    System.out.println(listIterator.previous());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>‍</p><h3 id="散列集"><a href="#散列集" class="headerlink" title="散列集"></a>散列集</h3><p>适用于快速查找对象，并且不关心集合中元素顺序的场景</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">var</span> <span class="variable">words</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;String&gt;();</span><br><span class="line">    <span class="type">long</span> <span class="variable">totalTime</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> (<span class="type">var</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in)) &#123;</span><br><span class="line">        <span class="keyword">while</span> (in.hasNext()) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">word</span> <span class="operator">=</span> in.next();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(word.equals(<span class="string">&quot;exit&quot;</span>))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="type">long</span> <span class="variable">callTime</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">            words.add(word);</span><br><span class="line">            callTime = System.currentTimeMillis() - callTime;</span><br><span class="line">            totalTime += callTime;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">var</span> <span class="variable">iterator</span> <span class="operator">=</span> words.iterator();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; <span class="number">20</span> &amp;&amp; iterator.hasNext(); i++) &#123;</span><br><span class="line">        System.out.println(iterator.next());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;words size: &quot;</span> + words.size() + <span class="string">&quot; totalTime: &quot;</span> + totalTime);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>‍</p><h3 id="树集"><a href="#树集" class="headerlink" title="树集"></a>树集</h3><p>是一个有序集合，输入一个任意顺序的元素，在遍历时会自动按照排序后的顺序呈现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">var</span> <span class="variable">treeSet</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TreeSet</span>&lt;Integer&gt;();</span><br><span class="line">    treeSet.add(<span class="number">1</span>);</span><br><span class="line">    treeSet.add(<span class="number">8</span>);</span><br><span class="line">    treeSet.add(<span class="number">3</span>);</span><br><span class="line">    treeSet.add(<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">    System.out.println(treeSet);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>‍</p><h3 id="映射"><a href="#映射" class="headerlink" title="映射"></a>映射</h3><p>key-value存储的数据结构，指两组数据的映射关系</p><p>通过get()方法获取值，通过put方法设置值，通过remove方法删除值</p><p>‍</p><p>TreeMap通过一定的顺序来组织元素，而HashMap里的元素则是无序的</p><p>TreeMap实例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">var</span> <span class="variable">treeMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TreeMap</span>&lt;String, String&gt;();</span><br><span class="line"></span><br><span class="line">    treeMap.put(<span class="string">&quot;1&quot;</span>, <span class="string">&quot;Yasuo&quot;</span>);</span><br><span class="line">    treeMap.put(<span class="string">&quot;8&quot;</span>, <span class="string">&quot;Ashe&quot;</span>);</span><br><span class="line">    treeMap.put(<span class="string">&quot;5&quot;</span>,<span class="string">&quot;NuNu&quot;</span>);</span><br><span class="line">    treeMap.put(<span class="string">&quot;2&quot;</span>,<span class="string">&quot;Zed&quot;</span>);</span><br><span class="line"></span><br><span class="line">    System.out.println(treeMap);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取键集合</span></span><br><span class="line">    <span class="type">var</span> <span class="variable">keys</span> <span class="operator">=</span> treeMap.keySet();</span><br><span class="line">    System.out.println(<span class="string">&quot;All keys: &quot;</span> + keys.toString());</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取值集合</span></span><br><span class="line">    <span class="type">var</span> <span class="variable">values</span> <span class="operator">=</span> treeMap.values();</span><br><span class="line">    System.out.println(<span class="string">&quot;All values: &quot;</span> + values.toString());</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取键&amp;值集合</span></span><br><span class="line">    System.out.println(<span class="string">&quot;All Key &amp; Value: &quot;</span>);</span><br><span class="line">    <span class="type">var</span> <span class="variable">entrySet</span> <span class="operator">=</span> treeMap.entrySet();</span><br><span class="line">    treeMap.forEach((k,v) -&gt; &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;key: &quot;</span> + k + <span class="string">&quot; value: &quot;</span> + v);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>‍</p><h3 id="链接散列集与映射"><a href="#链接散列集与映射" class="headerlink" title="链接散列集与映射"></a>链接散列集与映射</h3><p>#TODO# LinkedHashSet &amp; LinkedHashMap</p><p>‍</p><h4 id="实现LRU缓存"><a href="#实现LRU缓存" class="headerlink" title="实现LRU缓存"></a>实现LRU缓存</h4><p>LRU(Least Recently Used)缓存：最近最少使用，页面被置换</p><p>为什么选择LinkedHashMap</p><ul><li>链表能够实现队列，完成先进先出的逻辑</li><li>&lt;K,V&gt;的映射能够通过Key来索引数据</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 使用 LinkedHashMap 实现LRU缓存</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LRUCache</span>&lt;K, V&gt; <span class="keyword">implements</span> <span class="title class_">Iterable</span>&lt;K&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="variable">MAX</span> <span class="operator">=</span> <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">    LinkedHashMap&lt;K, V&gt; cache = <span class="keyword">new</span> <span class="title class_">LinkedHashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">cache</span><span class="params">(K key, V value)</span> &#123;</span><br><span class="line">        <span class="comment">// 根据LRU，如果key已经存在，则先删除，然后从最右边入队</span></span><br><span class="line">        <span class="keyword">if</span> (cache.containsKey(key)) &#123;</span><br><span class="line">            cache.remove(key);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 当cache已满，移除最左边的元素</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (cache.size() &gt;= MAX) &#123;</span><br><span class="line">            <span class="comment">// 获取迭代器</span></span><br><span class="line">            <span class="type">var</span> <span class="variable">it</span> <span class="operator">=</span> cache.keySet().iterator();</span><br><span class="line">            <span class="comment">// 通过迭代器获取第一位元素（即最左边元素），并移除</span></span><br><span class="line">            <span class="type">var</span> <span class="variable">first</span> <span class="operator">=</span> it.next();</span><br><span class="line">            cache.remove(first);</span><br><span class="line">        &#125;</span><br><span class="line">        cache.put(key, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Iterator&lt;K&gt; <span class="title function_">iterator</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">var</span> <span class="variable">it</span> <span class="operator">=</span> cache.entrySet().iterator();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Iterator</span>&lt;K&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hasNext</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> it.hasNext();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> K <span class="title function_">next</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> it.next().getKey();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// main function</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">var</span> <span class="variable">lru</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LRUCache</span>&lt;String, Integer&gt;();</span><br><span class="line">        lru.cache(<span class="string">&quot;A&quot;</span>, <span class="number">1</span>);</span><br><span class="line">        lru.cache(<span class="string">&quot;B&quot;</span>, <span class="number">2</span>);</span><br><span class="line">        lru.cache(<span class="string">&quot;C&quot;</span>, <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">        lru.cache(<span class="string">&quot;D&quot;</span>, <span class="number">4</span>);</span><br><span class="line">        lru.cache(<span class="string">&quot;C&quot;</span>, <span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(</span><br><span class="line">                <span class="string">&quot;leave &lt;-&quot;</span> +</span><br><span class="line">                StreamSupport.stream(lru.spliterator(), <span class="literal">false</span>)</span><br><span class="line">                        .map(x -&gt; x.toString())</span><br><span class="line">                        .collect(Collectors.joining(<span class="string">&quot;&lt;-&quot;</span>)));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>‍</p><h3 id="HashMap-HashTable"><a href="#HashMap-HashTable" class="headerlink" title="HashMap &amp; HashTable"></a>HashMap &amp; HashTable</h3><p>#TODO# HashMap &amp; HashTable</p><p>‍</p><h2 id="容器的工厂方法"><a href="#容器的工厂方法" class="headerlink" title="容器的工厂方法"></a>容器的工厂方法</h2><p><strong>Java9</strong> 新特性：<code>of</code>与<code>ofEntries</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// List</span></span><br><span class="line">    <span class="comment">// 该List是可变的</span></span><br><span class="line">    <span class="type">var</span> <span class="variable">list</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(List.of(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Set</span></span><br><span class="line">    <span class="type">var</span>  <span class="variable">set</span> <span class="operator">=</span> Set.of(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Map</span></span><br><span class="line">    Map&lt;String,Integer&gt; map = ofEntries(</span><br><span class="line">            entry(<span class="string">&quot;Ashe&quot;</span>,<span class="number">1</span>),</span><br><span class="line">            entry(<span class="string">&quot;Zed&quot;</span>,<span class="number">2</span>),</span><br><span class="line">            entry(<span class="string">&quot;Yasuo&quot;</span>,<span class="number">3</span>)</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：工厂方法创建出来的集合对象都是不可变的，但是以下方式可以构造一个可变的集合</p><blockquote><p>var list &#x3D; new ArrayList&lt;&gt;(List.of(1,2,3,4,5));</p></blockquote><p>‍</p><h4 id="Arrays-asList"><a href="#Arrays-asList" class="headerlink" title="Arrays.asList"></a>Arrays.asList</h4><p>Arrays.asList 被称为不可变集合，该集合中元素可以更改，但是大小不可变</p><p>1.通过 <code>Arrays.asList()</code> 方法构造出来的list，不能执行<code>add()</code>和<code>remove()</code>。</p><p>这里的list，并非 java.util.ArrayList，它没有重写父类<code>AbstractList</code>的方法。</p><p><img src="/2019/11/17/Java%E9%9B%86%E5%90%88/image-20210322163538-uypfrz0.png" alt="image.png"></p><p>2.如果使用<code>Arrays.asList()</code>生成新的数组，那么修改的内容也会同步影响到旧数组上。</p><p><img src="/2019/11/17/Java%E9%9B%86%E5%90%88/image-20210322164604-bouxtrz.png" alt="image.png"></p><p>总结：尽量用于测试，不要用于开发业务上。</p><p>‍</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java Core </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
