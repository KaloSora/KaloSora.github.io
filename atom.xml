<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>KaloSora的博客</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2025-03-16T02:18:10.560Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>KaloSora</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>K8s自动扩容和自愈</title>
    <link href="http://example.com/2025/03/16/K8s%E8%87%AA%E5%8A%A8%E6%89%A9%E5%AE%B9%E5%92%8C%E8%87%AA%E6%84%88/"/>
    <id>http://example.com/2025/03/16/K8s%E8%87%AA%E5%8A%A8%E6%89%A9%E5%AE%B9%E5%92%8C%E8%87%AA%E6%84%88/</id>
    <published>2025-03-16T02:00:11.000Z</published>
    <updated>2025-03-16T02:18:10.560Z</updated>
    
    <content type="html"><![CDATA[<p>‍‍‍</p><h2 id="自动自愈"><a href="#自动自愈" class="headerlink" title="自动自愈"></a>自动自愈</h2><p>什么是自动自愈？</p><ul><li>当业务进程意外中断，或者节点产生故障时，系统可以快速识别，自动重启并恢复服务。</li><li>自愈能够自动转移故障，也就是让业务不健康的节点不接收流量，保证用户体验。</li></ul><p>通过自动自愈摆脱 7*24 小时 Oncall😀</p><p>‍</p><p><strong>首先</strong>，通过 kubectl create deployment 创建另一种工作负载类型：Deployment。</p><p>例如</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yihui.li@yihuilideMBP k8sdemo % kubectl create deployment hello-docker-flask --image=kalosora/hello-docker-flask:latest --replicas=2</span><br><span class="line">deployment.apps/hello-docker-flask created</span><br></pre></td></tr></table></figure><ul><li>hello-docker-flask，代表工作负载的名称</li><li>– image，代表镜像名称</li><li>–replicas， 代表pod的副本数</li><li>还可以添加 –dry-run&#x3D;client 和 -o 参数，单纯输出 Manifest 内容</li></ul><p>本质上，这条命令会生成 Deployment Manifest，然后自动执行 kubectl apply 将 Manifest 应用到集群内，省略了我们手动编写 Manifest 的过程</p><p>‍</p><p><strong>然后</strong>，使用 kubectl create service 命令创建 Service：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yihui.li@yihuilideMBP k8sdemo % kubectl create service clusterip hello-docker-flask --tcp=5000:5000</span><br><span class="line">service/hello-docker-flask created</span><br><span class="line">yihui.li@yihuilideMBP k8sdemo %</span><br></pre></td></tr></table></figure><p>‍</p><p><strong>此外</strong>，使用 kubectl create ingress 命令创建 Ingress：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl create ingress hello-docker-flask --rule=&quot;/=hello-docker-flask:5000&quot;</span><br></pre></td></tr></table></figure><p>‍</p><p><strong>最后</strong>，部署Ingress-nginx</p><p><a href="https://github.com/KaloSora/K8s-Learn/blob/main/resource/ingress-nginx/ingress-nginx.yaml">ingress-nginx</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">yihui.li@yihuilideMBP k8sdemo % kubectl create -f https://ghfast.top/https://raw.githubusercontent.com/lyzhang1999/resource/main/ingress-nginx/ingress-nginx.yaml</span><br><span class="line">namespace/ingress-nginx created</span><br><span class="line">serviceaccount/ingress-nginx created</span><br><span class="line">serviceaccount/ingress-nginx-admission created</span><br><span class="line">role.rbac.authorization.k8s.io/ingress-nginx created</span><br><span class="line">role.rbac.authorization.k8s.io/ingress-nginx-admission created</span><br><span class="line">clusterrole.rbac.authorization.k8s.io/ingress-nginx created</span><br><span class="line">clusterrole.rbac.authorization.k8s.io/ingress-nginx-admission created</span><br><span class="line">rolebinding.rbac.authorization.k8s.io/ingress-nginx created</span><br><span class="line">rolebinding.rbac.authorization.k8s.io/ingress-nginx-admission created</span><br><span class="line">clusterrolebinding.rbac.authorization.k8s.io/ingress-nginx created</span><br><span class="line">clusterrolebinding.rbac.authorization.k8s.io/ingress-nginx-admission created</span><br><span class="line">configmap/ingress-nginx-controller created</span><br><span class="line">service/ingress-nginx-controller created</span><br><span class="line">service/ingress-nginx-controller-admission created</span><br><span class="line">deployment.apps/ingress-nginx-controller created</span><br><span class="line">job.batch/ingress-nginx-admission-create created</span><br><span class="line">job.batch/ingress-nginx-admission-patch created</span><br><span class="line">ingressclass.networking.k8s.io/nginx created</span><br><span class="line">validatingwebhookconfiguration.admissionregistration.k8s.io/ingress-nginx-admission created</span><br><span class="line">yihui.li@yihuilideMBP k8sdemo %</span><br></pre></td></tr></table></figure><p>‍</p><p>执行上述步骤以后：</p><ol><li>Pod 会被 Deployment 工作负载管理起来，例如创建和销毁等；</li><li>Service 相当于弹性伸缩组的负载均衡器，它能以加权轮训的方式将流量转发到多个 Pod 副本上；</li><li>Ingress 相当于集群的外网访问入口。</li></ol><p>‍</p><p><strong>开始K8s自愈实验。</strong></p><p>查看现有的pod</p><p>​<img src="/2025/03/16/K8s%E8%87%AA%E5%8A%A8%E6%89%A9%E5%AE%B9%E5%92%8C%E8%87%AA%E6%84%88/image-20250315224138-a9l4fdq.png" alt="image">​</p><p>有了 Ingress-nginx，我们访问 Pod 就不再需要进行端口转发了，我们可以直接访问 127.0.0.1。下面的命令会每隔 1 秒钟发送一次请求，并打印出时间和返回内容：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">yihui.li@yihuilideMBP k8sdemo % while true; do sleep 1; curl http://127.0.0.1; echo -e &#x27;\n&#x27;$(date);done</span><br><span class="line">Hello, my first docker images! hello-docker-flask-5dccc98654-txhbk</span><br><span class="line">2025年 3月15日 星期六 22时42分21秒 CST</span><br><span class="line">Hello, my first docker images! hello-docker-flask-5dccc98654-ccjnc</span><br><span class="line">2025年 3月15日 星期六 22时42分22秒 CST</span><br><span class="line">Hello, my first docker images! hello-docker-flask-5dccc98654-ccjnc</span><br><span class="line">2025年 3月15日 星期六 22时42分23秒 CST</span><br><span class="line">Hello, my first docker images! hello-docker-flask-5dccc98654-txhbk</span><br><span class="line">2025年 3月15日 星期六 22时42分24秒 CST</span><br><span class="line">Hello, my first docker images! hello-docker-flask-5dccc98654-txhbk</span><br><span class="line">2025年 3月15日 星期六 22时42分25秒 CST</span><br><span class="line">Hello, my first docker images! hello-docker-flask-5dccc98654-ccjnc</span><br><span class="line">2025年 3月15日 星期六 22时42分26秒 CST</span><br><span class="line">Hello, my first docker images! hello-docker-flask-5dccc98654-ccjnc</span><br><span class="line">2025年 3月15日 星期六 22时42分27秒 CST</span><br><span class="line">Hello, my first docker images! hello-docker-flask-5dccc98654-txhbk</span><br><span class="line">2025年 3月15日 星期六 22时42分28秒 CST</span><br><span class="line">Hello, my first docker images! hello-docker-flask-5dccc98654-ccjnc</span><br><span class="line">2025年 3月15日 星期六 22时42分29秒 CST</span><br><span class="line">Hello, my first docker images! hello-docker-flask-5dccc98654-ccjnc</span><br><span class="line">2025年 3月15日 星期六 22时42分30秒 CST</span><br></pre></td></tr></table></figure><p>这里可以发现，请求被分配到了两个 Pod 上，Pod 名称是交替出现的。</p><p>‍</p><p>模拟其中的一个 Pod 宕机，观察返回内容。</p><p>开启新的命令行窗口，终止其中一个pod的python进程</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kubectl exec -it hello-docker-flask-5dccc98654-ccjnc -- bash -c &quot;killall python3&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>‍</p><p>等待几秒钟后可以看见，所有的流量都被转发到了 <code>hello-docker-flask-5dccc98654-txhbk</code>​</p><p>​<img src="/2025/03/16/K8s%E8%87%AA%E5%8A%A8%E6%89%A9%E5%AE%B9%E5%92%8C%E8%87%AA%E6%84%88/image-20250315224808-cbfg1rf.png" alt="image">​</p><p>紧接着，<code>hello-docker-flask-5dccc98654-ccjnc</code>​也恢复了服务</p><p>‍</p><h2 id="自动扩容"><a href="#自动扩容" class="headerlink" title="自动扩容"></a>自动扩容</h2><p>自动扩容依赖于 K8s Metric Server 提供的监控指标，首先我们需要安装它：</p><p><a href="https://github.com/KaloSora/K8s-Learn/blob/main/resource/metrics/metrics.yaml">metrics.yaml</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">yihui.li@yihuilideMBP k8sdemo % kubectl apply -f https://ghfast.top/https://raw.githubusercontent.com/lyzhang1999/resource/main/metrics/metrics.yaml</span><br><span class="line">serviceaccount/metrics-server created</span><br><span class="line">clusterrole.rbac.authorization.k8s.io/system:aggregated-metrics-reader created</span><br><span class="line">clusterrole.rbac.authorization.k8s.io/system:metrics-server created</span><br><span class="line">rolebinding.rbac.authorization.k8s.io/metrics-server-auth-reader created</span><br><span class="line">clusterrolebinding.rbac.authorization.k8s.io/metrics-server:system:auth-delegator created</span><br><span class="line">clusterrolebinding.rbac.authorization.k8s.io/system:metrics-server created</span><br><span class="line">service/metrics-server created</span><br><span class="line">deployment.apps/metrics-server created</span><br><span class="line">apiservice.apiregistration.k8s.io/v1beta1.metrics.k8s.io created</span><br></pre></td></tr></table></figure><p>‍</p><p>安装完成后，等待 Metric 工作负载就绪：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yihui.li@yihuilideMBP k8sdemo % kubectl wait deployment -n kube-system metrics-server --for condition=Available=True --timeout=90s</span><br><span class="line">deployment.apps/metrics-server condition met</span><br><span class="line">yihui.li@yihuilideMBP k8sdemo %</span><br></pre></td></tr></table></figure><p>‍</p><p>Metric Server 就绪后，通过 kubectl autoscale 命令来为 Deployment 创建自动扩容策略：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yihui.li@yihuilideMBP k8sdemo % kubectl autoscale deployment hello-docker-flask --cpu-percent=50 --min=2 --max=10</span><br><span class="line">horizontalpodautoscaler.autoscaling/hello-docker-flask autoscaled</span><br><span class="line">yihui.li@yihuilideMBP k8sdemo %</span><br></pre></td></tr></table></figure><p>–cpu-percent 表示 CPU 使用率阈值，当 CPU 超过 50% 时将进行自动扩容；</p><p>–min 代表最小的 Pod 副本数；</p><p>–max 代表最大扩容的副本数。也就是说，自动扩容会根据 CPU 的使用率在 2 个副本和 10 个副本之间进行扩缩容</p><p>‍</p><p>最后，要使自动扩容生效，还需要为刚才部署的 hello-docker-flask Deployment 设置资源配额。可以通过下面的命令来配置：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yihui.li@yihuilideMBP k8sdemo % kubectl patch deployment hello-docker-flask --type=&#x27;json&#x27; -p=&#x27;[&#123;&quot;op&quot;: &quot;add&quot;, &quot;path&quot;: &quot;/spec/template/spec/containers/0/resources&quot;, &quot;value&quot;: &#123;&quot;requests&quot;: &#123;&quot;memory&quot;: &quot;100Mi&quot;, &quot;cpu&quot;: &quot;100m&quot;&#125;&#125;&#125;]&#x27;</span><br><span class="line">deployment.apps/hello-docker-flask patched</span><br><span class="line">yihui.li@yihuilideMBP k8sdemo %</span><br></pre></td></tr></table></figure><p>‍</p><p>现在，Deployment 将会重新创建两个新的 Pod，可以使用下面的命令筛选出新的 Pod：</p><p>​<img src="/2025/03/16/K8s%E8%87%AA%E5%8A%A8%E6%89%A9%E5%AE%B9%E5%92%8C%E8%87%AA%E6%84%88/image-20250316094914-emi0rys.png" alt="image">​</p><p>命令如下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">yihui.li@yihuilideMBP k8sdemo % kubectl get pod --field-selector=status.phase==Running</span><br><span class="line">NAME                                  READY   STATUS    RESTARTS   AGE</span><br><span class="line">hello-docker-flask-7b8f894675-bvnj6   1/1     Running   0          81s</span><br><span class="line">hello-docker-flask-7b8f894675-pn5br   1/1     Running   0          86s</span><br><span class="line">yihui.li@yihuilideMBP k8sdemo %</span><br></pre></td></tr></table></figure><p>‍</p><p>选择一个 Pod 并使用 kubectl exec 进入到容器内。模拟业务高峰期场景，使用 ab 命令来创建并发请求：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">root@hello-docker-flask-7b8f894675-bvnj6:/app#</span><br><span class="line">root@hello-docker-flask-7b8f894675-bvnj6:/app# ab -c 50 -n 10000 http://127.0.0.1:5000/</span><br><span class="line">This is ApacheBench, Version 2.3 &lt;$Revision: 1913912 $&gt;</span><br><span class="line">Copyright 1996 Adam Twiss, Zeus Technology Ltd, http://www.zeustech.net/</span><br><span class="line">Licensed to The Apache Software Foundation, http://www.apache.org/</span><br><span class="line"></span><br><span class="line">Benchmarking 127.0.0.1 (be patient)</span><br></pre></td></tr></table></figure><p>‍</p><p>开启新的命令行窗口，持续监控 Pod 的状态，–watch 参数会一直等待</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl get pods --watch</span><br></pre></td></tr></table></figure><p>‍</p><p>可以观察到K8s已经感知到了Pod的压力，并且正在自动横向扩容</p><p>​<img src="/2025/03/16/K8s%E8%87%AA%E5%8A%A8%E6%89%A9%E5%AE%B9%E5%92%8C%E8%87%AA%E6%84%88/image-20250316095640-f39x90m.png" alt="image">​</p><p>‍</p><p>实验的最后，执行 kind delete cluster 来删除集群：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Last login: Sun Mar 16 09:54:59 on ttys001</span><br><span class="line">(base) yihui.li@yihuilideMBP ~ % kind delete cluster</span><br><span class="line">Deleting cluster &quot;kind&quot; ...</span><br><span class="line">Deleted nodes: [&quot;kind-control-plane&quot;]</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;‍‍‍&lt;/p&gt;
&lt;h2 id=&quot;自动自愈&quot;&gt;&lt;a href=&quot;#自动自愈&quot; class=&quot;headerlink&quot; title=&quot;自动自愈&quot;&gt;&lt;/a&gt;自动自愈&lt;/h2&gt;&lt;p&gt;什么是自动自愈？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;当业务进程意外中断，或者节点产生故障时，系统可以快速识别，</summary>
      
    
    
    
    <category term="Cloud Native" scheme="http://example.com/categories/Cloud-Native/"/>
    
    
    <category term="Kubernetes" scheme="http://example.com/tags/Kubernetes/"/>
    
  </entry>
  
  <entry>
    <title>部署容器镜像到K8s</title>
    <link href="http://example.com/2025/03/15/%E9%83%A8%E7%BD%B2%E5%AE%B9%E5%99%A8%E9%95%9C%E5%83%8F%E5%88%B0K8s/"/>
    <id>http://example.com/2025/03/15/%E9%83%A8%E7%BD%B2%E5%AE%B9%E5%99%A8%E9%95%9C%E5%83%8F%E5%88%B0K8s/</id>
    <published>2025-03-15T14:03:11.000Z</published>
    <updated>2025-03-16T01:31:40.874Z</updated>
    
    <content type="html"><![CDATA[<p>‍‍‍</p><h2 id="安装Kubernetes"><a href="#安装Kubernetes" class="headerlink" title="安装Kubernetes"></a>安装Kubernetes</h2><p>首先安装Kubernetes cli tool <code>Kubectl</code>​，它允许开发者通过命令后管理Kubernetes的资源。</p><p>*Mac可以使用<code>Homebrew</code>​安装</p><p><a href="https://kubernetes.io/docs/reference/kubectl/">什么是Kubectl</a></p><p><a href="https://kubernetes.io/docs/tasks/tools/install-kubectl-macos/">安装Kubectl</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">yihui.li@yihuilideMBP hello_docker %</span><br><span class="line">yihui.li@yihuilideMBP hello_docker % kubectl version --client</span><br><span class="line">Client Version: v1.28.2</span><br><span class="line">Kustomize Version: v5.0.4-0.20230601165947-6ce0bf390ce3</span><br><span class="line">yihui.li@yihuilideMBP hello_docker %</span><br></pre></td></tr></table></figure><p>‍</p><p>根据官方步骤安装<a href="https://kubernetes.io/docs/tasks/tools/install-kubectl-macos/">Kind</a>，它是一个命令行工具，使用非常简单。</p><p>‍</p><p>开始创建K8s</p><p>将以下内容保存为 config.yaml：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">kind: Cluster</span><br><span class="line">apiVersion: kind.x-k8s.io/v1alpha4</span><br><span class="line">nodes:</span><br><span class="line">- role: control-plane</span><br><span class="line">  kubeadmConfigPatches:</span><br><span class="line">  - |</span><br><span class="line">    kind: InitConfiguration</span><br><span class="line">    nodeRegistration:</span><br><span class="line">      kubeletExtraArgs:</span><br><span class="line">        node-labels: &quot;ingress-ready=true&quot;</span><br><span class="line">  extraPortMappings:</span><br><span class="line">  - containerPort: 80</span><br><span class="line">    hostPort: 80</span><br><span class="line">    protocol: TCP</span><br><span class="line">  - containerPort: 443</span><br><span class="line">    hostPort: 443</span><br><span class="line">    protocol: TCP</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>‍</p><p>执行 kind create 命令，创建 K8s 集群：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">yihui.li@yihuilideMBP k8sdemo % kind create cluster --config config.yaml</span><br><span class="line">Creating cluster &quot;kind&quot; ...</span><br><span class="line"> ✓ Ensuring node image (kindest/node:v1.32.2) 🖼</span><br><span class="line"> ✓ Preparing nodes 📦</span><br><span class="line"> ✓ Writing configuration 📜</span><br><span class="line"> ✓ Starting control-plane 🕹️</span><br><span class="line"> ✓ Installing CNI 🔌</span><br><span class="line"> ✓ Installing StorageClass 💾</span><br><span class="line">Set kubectl context to &quot;kind-kind&quot;</span><br><span class="line">You can now use your cluster with:</span><br><span class="line"></span><br><span class="line">kubectl cluster-info --context kind-kind</span><br><span class="line"></span><br><span class="line">Have a question, bug, or feature request? Let us know! https://kind.sigs.k8s.io/#community 🙂</span><br><span class="line">yihui.li@yihuilideMBP k8sdemo %</span><br></pre></td></tr></table></figure><p>‍</p><p>检查K8s集群状态</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">yihui.li@yihuilideMBP k8sdemo % kubectl cluster-info</span><br><span class="line">Kubernetes control plane is running at https://127.0.0.1:51848</span><br><span class="line">CoreDNS is running at https://127.0.0.1:51848/api/v1/namespaces/kube-system/services/kube-dns:dns/proxy</span><br><span class="line"></span><br><span class="line">To further debug and diagnose cluster problems, use &#x27;kubectl cluster-info dump&#x27;.</span><br><span class="line">yihui.li@yihuilideMBP k8sdemo %</span><br></pre></td></tr></table></figure><p>‍</p><p><strong>既然已经有了Dokcer，为什么需要K8s？</strong></p><p>试想一下，如果你需要同时启动 10 个不同的容器镜像，需要运行 10 次 docker run 命令。<br>此外，如果容器之间有依赖顺序，还需要额外记住这 10 条命令特定的启动顺序。</p><p>K8s 的独特之处在于，它为我们抽象了诸如“启动 10 个容器镜像”这样的过程式的命令，你只需要向 K8s 描述“我需要 10 个容器”。10 个容器是我期望的<strong>最终状态</strong>，我不管怎么执行命令，执行了多少次命令等过程，我想要的就是这个结果。</p><p>用来向 K8s 描述“期望最终状态”的文件，就叫做 <strong>K8s Manifest</strong>，也可以称之为清单文件。Manifest 就好比餐厅的菜单，你只管点菜，做菜的过程我不管。</p><p>‍</p><h2 id="部署容器镜像"><a href="#部署容器镜像" class="headerlink" title="部署容器镜像"></a>部署容器镜像</h2><p><strong>通过Kubectl与K8s集群交互</strong></p><p>Kubectl 是一个与 K8s 集群交互的工具，通过 Kubectl，我们可以非常方便地以 Manifest 为媒介操作 K8s 集群的对象。就像操作数据库一样，我们可以对 Manifest 所描述的对象进行创建、删除、修改、查找等操作</p><p>‍</p><p><strong>编写Manifest，将容器镜像部署到K8s集群</strong></p><p>将下面的内容保存为 flask-pod.yaml：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">apiVersion: v1</span><br><span class="line">kind: Pod</span><br><span class="line">metadata:</span><br><span class="line">  name: hello-world-flask</span><br><span class="line">spec:</span><br><span class="line">  containers:</span><br><span class="line">    - name: flask</span><br><span class="line">      image: kalosora/hello-docker-flask</span><br><span class="line">      ports:</span><br><span class="line">        - containerPort: 5000</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Manifest关键字解释:</p><ul><li>Kind，表示 K8s 的工作负载类型。在 K8s 中，我们不能像 Docker 一样直接运行一个容器镜像，镜像需要依赖于 K8s 更上层的封装方式运行，这种封装方式也就是工作负载，Pod 是工作负载的一种类型。<strong>在实际的项目中，我们一般不会直接创建 Pod 类型的工作负载。Pod是K8s调度的最小单位。</strong></li><li>Containers，表示 Pod 要运行的容器配置，例如名称、镜像和端口等。它是一个数组类型，这意味着我们可以在一个 Pod 里面配置多个容器</li><li>Image，表示要运行的容器镜像</li><li>Ports，表示容器要暴露的端口，相当于 docker run 的 p 参数</li></ul><p>‍</p><p>执行kubectl apply应用这段Manifest:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">yihui.li@yihuilideMBP k8sdemo %</span><br><span class="line">yihui.li@yihuilideMBP k8sdemo % kubectl apply -f flask-pod.yaml</span><br><span class="line">pod/hello-world-flask created</span><br><span class="line">yihui.li@yihuilideMBP k8sdemo %</span><br></pre></td></tr></table></figure><p>如果成功看到输出内容 pod&#x2F;hello-world-flask created，说明我们已经把这段 Manifest 提交到集群里了。参数 -f 表示“指定一个 Manifest 文件”。</p><p>也就是说，当我们想要向 K8s 提交 Manifest 的时候，只需要记住一条命令，那就是 kubectl apply。</p><p>‍</p><h2 id="查看和访问Pod"><a href="#查看和访问Pod" class="headerlink" title="查看和访问Pod"></a>查看和访问Pod</h2><p>要查看 K8s 集群正在运行中的 Pod，可以使用 kubectl get pods ：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">yihui.li@yihuilideMBP k8sdemo % kubectl get pods</span><br><span class="line">NAME                READY   STATUS    RESTARTS   AGE</span><br><span class="line">hello-world-flask   1/1     Running   0          15m</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>‍</p><p>要在本地访问集群内的 Pod，我们可以使用 kubectl port-forward 命令进行端口转发操作，打通容器和本地网络：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yihui.li@yihuilideMBP k8sdemo % kubectl port-forward pod/hello-world-flask 8000:5000</span><br><span class="line">Forwarding from 127.0.0.1:8000 -&gt; 5000</span><br><span class="line">Forwarding from [::1]:8000 -&gt; 5000</span><br></pre></td></tr></table></figure><p>Manifest 里定义了 Ports 参数在集群内部暴露了端口，5000的端口只能在集群内部访问。</p><p>本地和集群的网络是隔离的，如果需要从集群外部访问，则需要映射到本地网络的端口。</p><p>打开浏览器访问 127.0.0.1:8000</p><p>‍</p><p>使用 kubectl exec 进入到 Pod 容器内部：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yihui.li@yihuilideMBP k8sdemo % kubectl exec -it hello-world-flask -- bash</span><br><span class="line">root@hello-world-flask:/app#</span><br></pre></td></tr></table></figure><p>‍</p><p>使用 kubectl delete 命令来删除 Pod：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yihui.li@yihuilideMBP k8sdemo % kubectl delete pod hello-world-flask</span><br><span class="line">pod &quot;hello-world-flask&quot; deleted</span><br></pre></td></tr></table></figure><p>‍</p><p><strong>业务进程、容器镜像和工作负载之间的关系</strong></p><p>通过这张图可以看出，最内层是我们的业务应用进程，外层通过 Docker 镜像以容器化的形式运行，再往外是 K8s 的最小调度单位 Pod。</p><p>​<img src="/2025/03/15/%E9%83%A8%E7%BD%B2%E5%AE%B9%E5%99%A8%E9%95%9C%E5%83%8F%E5%88%B0K8s/image-20250315220015-tr78a9d.png" alt="image">​</p><p>‍</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;‍‍‍&lt;/p&gt;
&lt;h2 id=&quot;安装Kubernetes&quot;&gt;&lt;a href=&quot;#安装Kubernetes&quot; class=&quot;headerlink&quot; title=&quot;安装Kubernetes&quot;&gt;&lt;/a&gt;安装Kubernetes&lt;/h2&gt;&lt;p&gt;首先安装Kubernetes cli </summary>
      
    
    
    
    <category term="Cloud Native" scheme="http://example.com/categories/Cloud-Native/"/>
    
    
    <category term="Docker" scheme="http://example.com/tags/Docker/"/>
    
    <category term="Kubernetes" scheme="http://example.com/tags/Kubernetes/"/>
    
  </entry>
  
  <entry>
    <title>Docker 基础</title>
    <link href="http://example.com/2025/03/04/Docker%E5%9F%BA%E7%A1%80/"/>
    <id>http://example.com/2025/03/04/Docker%E5%9F%BA%E7%A1%80/</id>
    <published>2025-03-04T01:30:11.000Z</published>
    <updated>2025-03-16T01:30:09.011Z</updated>
    
    <content type="html"><![CDATA[<p>‍‍</p><h2 id="初识容器"><a href="#初识容器" class="headerlink" title="初识容器"></a>初识容器</h2><p>首先在机器上安装好docker，并且通过命令行确认状态。</p><p>​<img src="/2025/03/04/Docker%E5%9F%BA%E7%A1%80/image-20250304084250-9itzqkc.png" alt="image">​</p><p>尝试从官方镜像仓库拉取镜像</p><p>Docker 会默认从 docker.io 官方镜像仓库中搜索。</p><p>​<code>:latest</code>​指的是获取最新的版本，也可以手动指定版本号</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker pull lyzhang1999/hello-world-flask:latest</span></span><br></pre></td></tr></table></figure><p>‍</p><p>使用命令列出所有可用的镜像(images)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker images</span></span><br></pre></td></tr></table></figure><p>​<img src="/2025/03/04/Docker%E5%9F%BA%E7%A1%80/image-20250304084713-xfggiuk.png" alt="image">​</p><p>运行镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker run -d -p 8000:5000 lyzhang1999/hello-world-flask:latest</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>-d 代表“在后台运行容器”，同时它会输出容器 ID，这是运行容器的唯一标识。</p><p>-p 代表“将容器内的 5000 端口暴露到宿主机（本地的 8000 端口）”，这可以方便我们在本地进行访问。</p><p>看到下面的输出说明我们成功启动了 hello-world-flask 镜像。</p><p>​<img src="/2025/03/04/Docker%E5%9F%BA%E7%A1%80/image-20250304085847-m0rvxfj.png" alt="image">​</p><p>打开浏览器访问 localhost:8000，可以看到：</p><p>​<img src="/2025/03/04/Docker%E5%9F%BA%E7%A1%80/image-20250304085933-o8zexy8.png" alt="image">​</p><p>‍</p><h2 id="连接容器"><a href="#连接容器" class="headerlink" title="连接容器"></a>连接容器</h2><p>首先查看运行中的容器列表，找到<code>CONTAINER ID</code>​</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker ps</span></span><br><span class="line">CONTAINER ID   IMAGE                                  COMMAND                   CREATED         STATUS         PORTS                    NAMES</span><br><span class="line">c3f7297de428   lyzhang1999/hello-world-flask:latest   &quot;python3 -m flask ru…&quot;   2 minutes ago   Up 2 minutes   0.0.0.0:8000-&gt;5000/tcp   cool_mendel</span><br></pre></td></tr></table></figure><p>‍</p><p>执行命令进入容器内部：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker <span class="built_in">exec</span> -it c3f7297de428 bash</span></span><br></pre></td></tr></table></figure><p>-it 的含义是“保持 STDIN 打开状态，并且分配一个虚拟的终端（Terminal）”。可以简单理解为，我们通过 SSH 登录到了容器内部，在当前终端下运行的所有命令都是基于容器内的</p><p>返回的结果如下</p><p>​<img src="/2025/03/04/Docker%E5%9F%BA%E7%A1%80/image-20250304090320-u1xget2.png" alt="image">​</p><p>尝试编辑容器内部的文件<code>app.py</code>​，保存并退出</p><p>​<img src="/2025/03/04/Docker%E5%9F%BA%E7%A1%80/image-20250304090438-v3utilc.png" alt="image">​</p><p>再次访问 <a href="http://localhost:8000/">http://localhost:8000</a> 可以看到页面已经发生了变化</p><p>输入<code>exit</code>​退出容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root@c3f7297de428:/app# exit</span><br></pre></td></tr></table></figure><p>‍</p><p>最后可以输入以下命令停止容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker stop [容器<span class="built_in">id</span>]</span></span><br></pre></td></tr></table></figure><p>例如</p><p>​<img src="/2025/03/04/Docker%E5%9F%BA%E7%A1%80/image-20250304090815-631tc5h.png" alt="image">​</p><p>‍</p><p><strong>关于容器和镜像</strong></p><p>通俗地说，镜像是一个同时包含业务应用和运行环境的“系统安装包”，它需要运行起来之后才能提供服务，运行后镜像的“实例化”称为容器（Container）。你可以对同一个镜像实例化多次，产生多个独立的容器，这些容器拥有不同的容器 ID，不同的容器之间是相互隔离的。</p><p>进一步理解，你可以把容器比喻为虚拟机，虚拟机也是，彼此之间的数据和状态都是隔离的。</p><p>‍</p><h2 id="构建镜像"><a href="#构建镜像" class="headerlink" title="构建镜像"></a>构建镜像</h2><p>使用 Python 编写的 Flask Web 应用作为例子</p><p>复制以下代码，并保存为<code>app.py</code>​</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.run(debug=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hello_world</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Hello, my first docker images! &#x27;</span> + os.getenv(<span class="string">&quot;HOSTNAME&quot;</span>) + <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这段代码的含义非常简单，启动一个 Web 服务器，当接收到 HTTP 请求时，返回 “Hello, my first docker images!” 以及 HOSTNAME 环境变量。</p><p>接下来，创建 Python 的依赖文件 requirements.txt ，用它来安装依赖的 Flask 框架。你可以执行下面的命令来创建 requirements.txt 文件并将 Flask&#x3D;&#x3D;2.2.2 内容写入该文件。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">echo</span> <span class="string">&quot;Flask==2.3.3&quot;</span> &gt;&gt; requirements.txt</span></span><br></pre></td></tr></table></figure><p>有了这两个文件，我们已经可以在本地启动这个 Python Web 应用了。</p><p>​<img src="/2025/03/04/Docker%E5%9F%BA%E7%A1%80/image-20250304091801-u43j8m8.png" alt="image">​</p><p><strong>接下来，将这段最简单的 Python 业务代码制作成镜像。</strong></p><p>我们需要一个文件来描述镜像是如何被构建的，这个文件叫做 <code>Dockerfile</code>​。</p><p>将以下内容保存为 Dockerfile 文件。</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># syntax=docker/dockerfile:1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">FROM</span> python:<span class="number">3.8</span>-slim-buster</span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> apt-get update &amp;&amp; apt-get install -y procps vim apache2-utils &amp;&amp; <span class="built_in">rm</span> -rf /var/lib/apt/lists/*</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> /app</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> requirements.txt requirements.txt</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> pip3 install -r requirements.txt</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> . .</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> [ <span class="string">&quot;python3&quot;</span>, <span class="string">&quot;-m&quot;</span> , <span class="string">&quot;flask&quot;</span>, <span class="string">&quot;run&quot;</span>, <span class="string">&quot;--host=0.0.0.0&quot;</span>]</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>解释一下 Dockerfile 文件里的这几个命令</p><p>第一行以 syntax 开头的是解析器注释，它与 Docker 构建镜像的工具 buildkit 相关，在一般情况，建议使用 docker&#x2F;dockerfile:1，它代表始终指向最新的语法版本。</p><p>FROM 命令，表示使用官方仓库的 python:3.8-slim-buster 镜像作为基础镜像。在我们熟悉的编程方法中，可以理解为从该镜像继承。这个镜像已经安装了 Python3 和 Pip3 等所有的 Python 相关的工具和包，我们可以直接使用。</p><p>RUN 的含义是在镜像内运行指定的命令，这里我们为镜像安装了一些必要的工具。 WORKDIR 的含义是镜像的工作目录，你可以理解为后续所有的命令都将以此为基准路径。这样，我们就可以在后续的命令中使用相对路径而不是完整路径了。</p><p>COPY 的含义是将本地的文件或目录复制到镜像内指定的位置。第一个参数代表本地文件或目录，第二个参数代表要复制到镜像内的位置。例如，第七行 COPY 表示，将本地当前目录下的 requirements.txt 文件复制到镜像工作目录 &#x2F;app 中，文件命名同样为 requirements.txt。 第十行 RUN 的含义是在镜像里运行 pip3 安装 Python 依赖。<strong>请注意，这些依赖将会被安装在镜像里而不是本地</strong>。 接下来，第十行又出现了一个 COPY 命令，它的含义是将当前目录所有的源代码复制到镜像的工作目录 &#x2F;app 下，复制目录的语法和我们之前提到的复制文件是类似的。 最后一行 CMD 的含义是镜像的启动命令。在一个 Dockerfile 中，只能有一个 CMD 命令，如果有多个，那么只有最后一个 CMD 命令会起作用。例如，我们希望在镜像被运行时启动 Python Flask Web 服务器，并监听在特定主机上。CMD 的第一个参数 python3 是我们希望运行的可执行命令，后面的参数表示运行 python3 命令所需要的参数。</p><p>‍</p><p><strong>准备构建第一个镜像</strong></p><p>确保当前目录下有所需的文件</p><p>​<img src="/2025/03/04/Docker%E5%9F%BA%E7%A1%80/image-20250304092657-capxx14.png" alt="image">​</p><p>在当前目录下执行命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker build -t hello-docker-flask .</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>-t 代表的是镜像名。这里隐含了镜像版本，Docker 会默认用 latest 作为版本号，也就是说，hello-docker-flask 与 hello-docker-flask:latest 的写法是等价的。</p><p>此外，还需要注意最后面有一个 “.” ，这代表了构建镜像的上下文。</p><p>执行这条命令时，Docker 会帮我们从官方镜像仓库拉取 python:3.8-slim-buster 镜像，并启动该镜像。接下来，该容器会依次执行我们在 Dockerfile 中书写的命令，例如 WORKDIR、COPY、RUN 等等。</p><p>‍</p><p>如果遇到<code>fail to authorize</code>​的异常，需要指定用户和密码，并重启docker</p><p>​<img src="/2025/03/04/Docker%E5%9F%BA%E7%A1%80/image-20250315113825-v1oo3f5.png" alt="image">​</p><p>‍</p><p>查看本地镜像，并运行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker images</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker run -d -p 8000:5000 hello-docker-flask:latest</span></span><br></pre></td></tr></table></figure><p>‍</p><p>使用命令查看容器启动情况</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker logs [容器ID]</span><br></pre></td></tr></table></figure><p>‍</p><p>可以看到容器启动正常</p><p>​<img src="/2025/03/04/Docker%E5%9F%BA%E7%A1%80/image-20250315121305-jpt6qcg.png" alt="image">​</p><p>‍</p><p>打开浏览器访问 localhost:8000，可以看到正常输出</p><p>‍</p><h2 id="共享镜像"><a href="#共享镜像" class="headerlink" title="共享镜像"></a>共享镜像</h2><p>为了能够在团队中共享镜像，需要先注册一个 <a href="https://hub.docker.com/" title="Docker HUB">Docker HUB</a> 的账号，并且使用 docker login 登录，这和我们使用的 Git 工具类似。</p><p>接下来，使用 docke tag 重命名我们之前在本地构建的镜像。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker tag hello-world-flask my_dockerhub_name/hello-world-flask</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这里需要把 <code>my_dockerhub_name</code>​ 替换为你实际的 Docker Hub 账户名，也称为镜像仓库的名字</p><p>‍</p><p>然后，我们就可以使用 docker push 把本地的镜像上传到 Docker Hub 了。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker push my_dockerhub_name/hello-world-flask</span></span><br></pre></td></tr></table></figure><p>‍</p><p>成功上传后，其他人可以通过 docker pull 命令来拉取我们上传的镜像。</p><p>‍</p><p>例如</p><p>​<img src="/2025/03/04/Docker%E5%9F%BA%E7%A1%80/image-20250315121923-kdut6zn.png" alt="image">​</p><p>​<img src="/2025/03/04/Docker%E5%9F%BA%E7%A1%80/image-20250315121934-5u3db8s.png" alt="image">​</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;‍‍&lt;/p&gt;
&lt;h2 id=&quot;初识容器&quot;&gt;&lt;a href=&quot;#初识容器&quot; class=&quot;headerlink&quot; title=&quot;初识容器&quot;&gt;&lt;/a&gt;初识容器&lt;/h2&gt;&lt;p&gt;首先在机器上安装好docker，并且通过命令行确认状态。&lt;/p&gt;
&lt;p&gt;​&lt;img src=&quot;/2025</summary>
      
    
    
    
    <category term="Cloud Native" scheme="http://example.com/categories/Cloud-Native/"/>
    
    
    <category term="Docker" scheme="http://example.com/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>使用GPT提高研发效率</title>
    <link href="http://example.com/2025/02/23/%E4%BD%BF%E7%94%A8GPT%E6%8F%90%E9%AB%98%E7%A0%94%E5%8F%91%E6%95%88%E7%8E%87/"/>
    <id>http://example.com/2025/02/23/%E4%BD%BF%E7%94%A8GPT%E6%8F%90%E9%AB%98%E7%A0%94%E5%8F%91%E6%95%88%E7%8E%87/</id>
    <published>2025-02-23T02:45:11.000Z</published>
    <updated>2025-02-23T02:45:16.985Z</updated>
    
    <content type="html"><![CDATA[<p>‍‍</p><p>‍</p><p>相同系列的文章</p><p><a href="https://kalosora.github.io/2025/02/15/%E6%90%AD%E5%BB%BAHelloGPT/">搭建HelloGPT</a></p><p><a href="https://kalosora.github.io/2025/02/22/%E8%AE%A9GPT%E4%BD%BF%E7%94%A8%E5%B7%A5%E5%85%B7/">改进为多态模GPT</a></p><p>‍</p><h2 id="使用LLM辅助设计"><a href="#使用LLM辅助设计" class="headerlink" title="使用LLM辅助设计"></a>使用LLM辅助设计</h2><p>可以让GPT生成多次不同的设计，最后结合自己的思考。</p><p>可以大大提高研发人员在面对陌生领域时的研发效率。</p><p>也可以让GPT帮助代码生成</p><ul><li>根据注释、要求直接生成代码</li><li>根据代码生成测试（目前最准确，因为上下文只有代码，没有业务需求）</li><li>根据代码生成注释</li><li>在不同编程语言之间翻译</li><li>解释代码的运作方式</li><li>修改代码中的bug</li><li>其他</li></ul><p>‍</p><p>可以使用ReAct模式：GPT代码生成 -&gt; GPT自测 -&gt; GPTbug自动修改 （迭代 * N）-&gt; 最终代码</p><p>需要满足以下条件</p><ul><li>ReAct过程中可以使用的方法</li><li>方法的输入简单（简单字符&#x2F;JSON）</li><li>方法的输出是大模型可理解（不能只返回Error code，给出一个详细的自然语言描述）</li></ul><p>‍</p><blockquote><p>源码</p><p><a href="https://github.com/KaloSora/HelloGPT/blob/dev/code/gpt_llm_assist_design.ipynb">https://github.com/KaloSora/HelloGPT/blob/dev/code/gpt_llm_assist_design.ipynb</a></p></blockquote><p>‍</p><h2 id="提高代码生成的可用性"><a href="#提高代码生成的可用性" class="headerlink" title="提高代码生成的可用性"></a>提高代码生成的可用性</h2><p>使用ReAct pattern</p><p>​<img src="/2025/02/23/%E4%BD%BF%E7%94%A8GPT%E6%8F%90%E9%AB%98%E7%A0%94%E5%8F%91%E6%95%88%E7%8E%87/image-20250222165312-868qflu.png" alt="image">​</p><p>‍</p><p>解决遗留代码依赖</p><p>外部推理：编写AST树遍历所有的依赖，整合到Prompt里传给大模型</p><p>大模型推理：大模型基于ReAct模式自己寻找测试依赖</p><p>​<img src="/2025/02/23/%E4%BD%BF%E7%94%A8GPT%E6%8F%90%E9%AB%98%E7%A0%94%E5%8F%91%E6%95%88%E7%8E%87/image-20250222170014-8tbzyj0.png" alt="image">​</p><p>‍</p><p>方案比较</p><p>​<img src="/2025/02/23/%E4%BD%BF%E7%94%A8GPT%E6%8F%90%E9%AB%98%E7%A0%94%E5%8F%91%E6%95%88%E7%8E%87/image-20250222170655-s3vbpcu.png" alt="image">​</p><p>‍</p><blockquote><p>源码</p><p><a href="https://github.com/KaloSora/HelloGPT/blob/dev/code/gpt_code_generation_example.ipynb">https://github.com/KaloSora/HelloGPT/blob/dev/code/gpt_code_generation_example.ipynb</a></p></blockquote><p>‍</p><h2 id="编写大模型友好代码"><a href="#编写大模型友好代码" class="headerlink" title="编写大模型友好代码"></a>编写大模型友好代码</h2><p>适合大模型生成代码的场景：</p><ul><li><p>功能明确，定义清楚</p><ul><li>通过规模较小的接口&#x2F;方法签名来清晰定义</li><li>清晰的注释&#x2F;Prompt的定义实现逻辑</li></ul></li><li><p>通用功能</p></li><li><p>依赖简单</p><ul><li>尤其是对自身遗留代码的依赖</li></ul></li></ul><p>‍</p><h2 id="大模型辅助运维和部署"><a href="#大模型辅助运维和部署" class="headerlink" title="大模型辅助运维和部署"></a>大模型辅助运维和部署</h2><p>利用大模型帮助Devops提高效率，赋能云原生实践</p><p>‍</p><p>什么是云原生？</p><p>计算资源弹性伸缩：需要的时候快速的获得计算资源（几十秒至几分钟），不需要的时候把计算资源释放掉。计算资源允许横向拓展（增加集群）和纵向拓展（加强机器配置）</p><p>单物理机（大型机） vs 云原生</p><p>​<img src="/2025/02/23/%E4%BD%BF%E7%94%A8GPT%E6%8F%90%E9%AB%98%E7%A0%94%E5%8F%91%E6%95%88%E7%8E%87/image-20250222203049-jioftgx.png" alt="image">​</p><p>‍</p><p>云原生实践中的CICD pipeline</p><p>​<img src="/2025/02/23/%E4%BD%BF%E7%94%A8GPT%E6%8F%90%E9%AB%98%E7%A0%94%E5%8F%91%E6%95%88%E7%8E%87/image-20250222203353-ht8yzo4.png" alt="image">​</p><p>‍</p><p>Terraform作为IaC工具，在云原生中发挥至关重要的作用</p><p>​<img src="/2025/02/23/%E4%BD%BF%E7%94%A8GPT%E6%8F%90%E9%AB%98%E7%A0%94%E5%8F%91%E6%95%88%E7%8E%87/image-20250222203619-xj2r1ye.png" alt="image">​</p><p>‍</p><p>可以利用大模型帮助开发者生成terraform template，开发人员只需要修改部分内容即可完成开发。</p><p>​<img src="/2025/02/23/%E4%BD%BF%E7%94%A8GPT%E6%8F%90%E9%AB%98%E7%A0%94%E5%8F%91%E6%95%88%E7%8E%87/image-20250222212927-ug7e6ny.png" alt="image">​</p><p>启用上下文记忆功能，让GPT把AWS云转换成阿里云的terraform格式</p><p>​<img src="/2025/02/23/%E4%BD%BF%E7%94%A8GPT%E6%8F%90%E9%AB%98%E7%A0%94%E5%8F%91%E6%95%88%E7%8E%87/image-20250222213417-vtmq4wm.png" alt="image">​</p><p>‍</p><p>还可以利用大模型生符合Kubernetes最佳实践的部署配置文件</p><p>最佳实践的要求</p><ul><li>部署的namespace为”service”</li><li>包含readiness及liveness probe</li><li>采用一个独立的 service account 运行</li><li>包含完美终止（graceful termination）配置</li></ul><p><a href="https://learnk8s.io/production-best-practices">K8s best practice</a></p><p>‍</p><blockquote><p>源码</p><p><a href="https://github.com/KaloSora/HelloGPT/blob/dev/code/gpt_cloud_devops_example.ipynb">https://github.com/KaloSora/HelloGPT/blob/dev/code/gpt_cloud_devops_example.ipynb</a></p></blockquote><p>‍</p><h2 id="探索开源AI社区"><a href="#探索开源AI社区" class="headerlink" title="探索开源AI社区"></a>探索开源AI社区</h2><p>利用Hugging Face开源社区中大量的开源模型，提升研发效率</p><p><a href="https://huggingface.co/">huggingface</a></p><p>​<img src="/2025/02/23/%E4%BD%BF%E7%94%A8GPT%E6%8F%90%E9%AB%98%E7%A0%94%E5%8F%91%E6%95%88%E7%8E%87/image-20250222214912-demx9p0.png" alt="image">​</p><p>‍</p><p>Open source的模型统称为 <code>pre-trained</code>​模型，可以直接使用它</p><p>Transformer Pipeline</p><p>​<img src="/2025/02/23/%E4%BD%BF%E7%94%A8GPT%E6%8F%90%E9%AB%98%E7%A0%94%E5%8F%91%E6%95%88%E7%8E%87/image-20250222215626-k9qx1ue.png" alt="image">​</p><p>‍</p><p>Hugging Face的模型可以统一使用Transformer Pipeline调用。</p><p>如果要使用远程调用模型的方式，需要注册账号并创建API token</p><p>​<img src="/2025/02/23/%E4%BD%BF%E7%94%A8GPT%E6%8F%90%E9%AB%98%E7%A0%94%E5%8F%91%E6%95%88%E7%8E%87/image-20250222221046-uj658fe.png" alt="image">​</p><p>‍</p><p><strong>注意：Hugging Face需要安装tensorflow</strong></p><p>Mac intel arm64会出现找不到安装包的情况</p><p>​<img src="/2025/02/23/%E4%BD%BF%E7%94%A8GPT%E6%8F%90%E9%AB%98%E7%A0%94%E5%8F%91%E6%95%88%E7%8E%87/image-20250223100358-l19mdgb.png" alt="image">​</p><p>‍</p><p>解决方法：安装Anaconda，并创建新的python运行环境</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">conda --version</span><br><span class="line"></span><br><span class="line">conda create -n TFmacOS python=3.9 pip</span><br><span class="line">conda activate TFmacOS </span><br><span class="line">python -m pip install tensorflow-macos==2.9.0</span><br><span class="line">python -m pip install tensorflow-metal</span><br><span class="line"></span><br><span class="line">conda install jupyter</span><br></pre></td></tr></table></figure><p>从<code>TFmacOS</code>​环境中启动jupyter notebook</p><p>‍</p><blockquote><p>源码</p><p>通过Hugging Face + Deepseek API 实现看图讲故事</p><p>或</p><p>LangChain + Hugging Face model</p><p><a href="https://github.com/KaloSora/HelloGPT/blob/dev/code/gpt_hugging_face_example.ipynb">https://github.com/KaloSora/HelloGPT/blob/dev/code/gpt_hugging_face_example.ipynb</a></p></blockquote><p>‍</p><h2 id="AI企业架构中的思考"><a href="#AI企业架构中的思考" class="headerlink" title="AI企业架构中的思考"></a>AI企业架构中的思考</h2><p>企业内部文档处理</p><p>​<img src="/2025/02/23/%E4%BD%BF%E7%94%A8GPT%E6%8F%90%E9%AB%98%E7%A0%94%E5%8F%91%E6%95%88%E7%8E%87/image-20250223091728-jlaozxf.png" alt="image">​</p><p>‍</p><p>其他参考架构</p><ul><li>使用<code>prompt validation</code>​防御提示词注入进攻</li></ul><p>​<img src="/2025/02/23/%E4%BD%BF%E7%94%A8GPT%E6%8F%90%E9%AB%98%E7%A0%94%E5%8F%91%E6%95%88%E7%8E%87/image-20250223092857-9zxbsip.png" alt="image">​</p><p>‍</p><p>最后总结一下使用到的模型社区</p><p>Hugging Face</p><p>Ollama</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;‍‍&lt;/p&gt;
&lt;p&gt;‍&lt;/p&gt;
&lt;p&gt;相同系列的文章&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://kalosora.github.io/2025/02/15/%E6%90%AD%E5%BB%BAHelloGPT/&quot;&gt;搭建HelloGPT&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a hr</summary>
      
    
    
    
    <category term="AI/ML" scheme="http://example.com/categories/AI-ML/"/>
    
    
    <category term="LLM" scheme="http://example.com/tags/LLM/"/>
    
    <category term="DeepSeek" scheme="http://example.com/tags/DeepSeek/"/>
    
  </entry>
  
  <entry>
    <title>让GPT使用工具</title>
    <link href="http://example.com/2025/02/22/%E8%AE%A9GPT%E4%BD%BF%E7%94%A8%E5%B7%A5%E5%85%B7/"/>
    <id>http://example.com/2025/02/22/%E8%AE%A9GPT%E4%BD%BF%E7%94%A8%E5%B7%A5%E5%85%B7/</id>
    <published>2025-02-22T08:24:11.000Z</published>
    <updated>2025-02-22T08:25:46.388Z</updated>
    
    <content type="html"><![CDATA[<p>‍‍</p><p>*使用DeepSeek API测试</p><h2 id="Function-Calling"><a href="#Function-Calling" class="headerlink" title="Function Calling"></a>Function Calling</h2><p>让AI调用已经定义好的python 方法</p><p>Function Calling 让模型能够调用外部工具，来增强自身能力。</p><ul><li>将可以使用方法（工具）说明，随用户请求一起放在Prompt中传给GPT</li><li>GPT返回要调用的方法及参数值，然后在外部运行该方法获得结果</li><li>将调用结果及前面的对话历史一起放入Prompt，再次调用GPT</li></ul><p>‍</p><p>例如：</p><ul><li>构建一个dict对象存储：{“Method1”, “Method2”, …}</li><li>在Prompt中加入方法定义</li><li>根据LLM的返回，决定是否调用函数（返回信息中含有”Function_call”），还是直接返回信息给用户</li><li>如需调用函数，则调用LLM指定函数，并将结果及调用的函数一起放在Prompt中再次调用LLM</li></ul><p>‍</p><p>OpenAI GPT4o的例子</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> openai</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> openai <span class="keyword">import</span> AzureOpenAI</span><br><span class="line">  </span><br><span class="line">client = AzureOpenAI(</span><br><span class="line">    api_key=os.getenv(<span class="string">&quot;OPENAI_API_KEY&quot;</span>),  </span><br><span class="line">    api_version=os.getenv(<span class="string">&quot;OPENAI_API_VERSION&quot;</span>),</span><br><span class="line">    azure_endpoint = os.getenv(<span class="string">&quot;OPENAI_API_BASE&quot;</span>)</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">funcs = &#123;<span class="string">&quot;get_current_cluster_state&quot;</span>: get_current_cluster_state&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_current_cluster_state</span>(<span class="params">cluster_name</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;cluster:<span class="subst">&#123;cluster_name&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span>  <span class="string">&quot;&quot;&quot;ERROR: Failed to pull image &quot;/docker/dsp:latest&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">run</span>(<span class="params"><span class="built_in">input</span></span>):</span><br><span class="line">    msg=[&#123;<span class="string">&quot;role&quot;</span>:<span class="string">&quot;user&quot;</span>,<span class="string">&quot;content&quot;</span>:<span class="built_in">input</span>&#125;]</span><br><span class="line">    ret = run_conversation(msg)</span><br><span class="line">    <span class="keyword">return</span> ret.content</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">run_conversation</span>(<span class="params">msg</span>):</span><br><span class="line">    response = client.chat.completions.create(</span><br><span class="line">        model=deployment,</span><br><span class="line">        messages=msg,</span><br><span class="line">        functions=[</span><br><span class="line">            &#123;</span><br><span class="line">                    <span class="string">&quot;name&quot;</span>: <span class="string">&quot;get_current_cluster_state&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;description&quot;</span>: <span class="string">&quot;Get the current state in a given cluster&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;parameters&quot;</span>: &#123;</span><br><span class="line">                        <span class="string">&quot;type&quot;</span>: <span class="string">&quot;object&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;properties&quot;</span>: &#123;</span><br><span class="line">                            <span class="string">&quot;cluster_name&quot;</span>: &#123;</span><br><span class="line">                                <span class="string">&quot;type&quot;</span>: <span class="string">&quot;string&quot;</span>,</span><br><span class="line">                                <span class="string">&quot;description&quot;</span>: <span class="string">&quot;the name of the cluster&quot;</span>,</span><br><span class="line">                            &#125;,</span><br><span class="line"></span><br><span class="line">                        &#125;,</span><br><span class="line">                        <span class="string">&quot;required&quot;</span>: [<span class="string">&quot;cluster_name&quot;</span>],</span><br><span class="line">                    &#125;</span><br><span class="line">          </span><br><span class="line">            &#125;</span><br><span class="line">        ],</span><br><span class="line">        function_call=<span class="string">&quot;auto&quot;</span>,</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    response_message = response.choices[<span class="number">0</span>].message</span><br><span class="line">  </span><br><span class="line">    function_call = response_message.function_call</span><br><span class="line">  </span><br><span class="line">    <span class="comment"># 如果不需要调用function，则直接返回结果</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> function_call:</span><br><span class="line">        <span class="keyword">return</span> response_message</span><br><span class="line">    function_name = function_call.name</span><br><span class="line">    function_to_call = funcs[function_name] </span><br><span class="line">    function_args = json.loads(response_message.function_call.arguments)</span><br><span class="line">    function_response = function_to_call(**function_args)            </span><br><span class="line">    msg.append( <span class="comment"># adding assistant response to messages</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;role&quot;</span>: response_message.role,</span><br><span class="line">            <span class="string">&quot;function_call&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;name&quot;</span>: function_name,</span><br><span class="line">                <span class="string">&quot;arguments&quot;</span>: response_message.function_call.arguments,</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">&quot;content&quot;</span>: <span class="literal">None</span></span><br><span class="line">        &#125;</span><br><span class="line">    )</span><br><span class="line">    msg.append( <span class="comment"># adding function response to messages</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;role&quot;</span>: <span class="string">&quot;function&quot;</span>,</span><br><span class="line">            <span class="string">&quot;name&quot;</span>: function_name,</span><br><span class="line">            <span class="string">&quot;content&quot;</span>: function_response,</span><br><span class="line">        &#125;</span><br><span class="line">    ) </span><br><span class="line">   </span><br><span class="line">    <span class="keyword">return</span> run_conversation(msg)</span><br><span class="line">   </span><br></pre></td></tr></table></figure><p>‍</p><p>在Prompt中加入方法描述</p><p>​<img src="/2025/02/22/%E8%AE%A9GPT%E4%BD%BF%E7%94%A8%E5%B7%A5%E5%85%B7/image-20250215180507-3yfoplo.png" alt="image">​</p><blockquote><p>DeepSeek示例源代码</p><p>目前会出现空回复的bug</p><p><a href="https://github.com/KaloSora/HelloGPT/blob/dev/code/gpt_function_calling.ipynb">https://github.com/KaloSora/HelloGPT/blob/dev/code/gpt_function_calling.ipynb</a></p></blockquote><p>‍</p><h2 id="使用LangChain-Agent"><a href="#使用LangChain-Agent" class="headerlink" title="使用LangChain Agent"></a>使用LangChain Agent</h2><p>让GPT以更简单的方式，学会使用工具。</p><p>Agent的核心思想是使用语言模型来选择要采取的一系列操作。</p><p>‍</p><blockquote><p>LangChain 工具集</p><p><a href="https://python.langchain.com/api_reference/">https://python.langchain.com/api_reference/</a></p></blockquote><p>‍</p><p>测试以后可以发现，LangChain使用工具的方法更加智能、灵活</p><p>​<img src="/2025/02/22/%E8%AE%A9GPT%E4%BD%BF%E7%94%A8%E5%B7%A5%E5%85%B7/image-20250216110005-bxe9e3f.png" alt="image">​</p><h3 id="Wolfram-Alpha-API-Wrapper"><a href="#Wolfram-Alpha-API-Wrapper" class="headerlink" title="Wolfram Alpha API Wrapper"></a>Wolfram Alpha API Wrapper</h3><p>​<code>Wolfram Alpha</code>​是专注于解决科学计算的工具，帮助AI更好得思考数学问题</p><blockquote><p>官网</p><p><a href="https://zh.wolframalpha.com/">https://zh.wolframalpha.com</a></p><p>‍</p><p>API ID Ceation</p><p><a href="https://developer.wolframalpha.com/">https://developer.wolframalpha.com</a></p><p>‍</p><p>WolframAlphaAPIWrapper document</p><p><a href="https://python.langchain.com/api_reference/community/utilities/langchain_community.utilities.wolfram_alpha.WolframAlphaAPIWrapper.html">https://python.langchain.com/api_reference/community/utilities/langchain_community.utilities.wolfram_alpha.WolframAlphaAPIWrapper.html</a></p></blockquote><p>‍</p><p>创建账号</p><p>​<img src="/2025/02/22/%E8%AE%A9GPT%E4%BD%BF%E7%94%A8%E5%B7%A5%E5%85%B7/image-20250216111208-2qgm45s.png" alt="image">​</p><p>创建你的APP ID</p><p>​<img src="/2025/02/22/%E8%AE%A9GPT%E4%BD%BF%E7%94%A8%E5%B7%A5%E5%85%B7/image-20250216111431-fmyfj9j.png" alt="image">​</p><p>复制<code>App ID</code>​<br><img src="/2025/02/22/%E8%AE%A9GPT%E4%BD%BF%E7%94%A8%E5%B7%A5%E5%85%B7/image-20250216111655-uxjwrxm.png" alt="image">​</p><blockquote><p>参考源代码</p><p><a href="https://github.com/KaloSora/HelloGPT/blob/dev/code/gpt_langchain_agent.ipynb">https://github.com/KaloSora/HelloGPT/blob/dev/code/gpt_langchain_agent.ipynb</a></p></blockquote><h2 id="In-context-learning"><a href="#In-context-learning" class="headerlink" title="In-context learning"></a>In-context learning</h2><p><strong>Zero-shot Learning</strong></p><p>一种机器学习方法，它允许模型在没有见过任何训练样本的情况下，对新类别的数据进行分类或识别。</p><p>这种方法通常依赖于模型在训练过程中学到的知识，以及对新类别的一些描述性信息，如属性或原数据。</p><p>例如，给出一些猫的特征，然后给出一堆图片，让机器识别出其中哪些图片是与猫相关的。</p><p>‍</p><p><strong>Few-shot Learning</strong></p><p>教导模型使用非常有限的训练数据来识别新的对象、类或任务。在这里是通过Prompt里加入少量示例，来实现模型学习。</p><p>‍</p><p>应用大语言模型要从传统机器学习思维切换为上下文学习思路</p><p>上下文学习包括Zero-shot Learning 和 Few-shot Learning，两者并无明显界限，可以根据实际需要灵活运用。</p><p>‍</p><blockquote><p>源代码</p><p><a href="https://github.com/KaloSora/HelloGPT/blob/dev/code/gpt_in-ontext_learning.ipynb">https://github.com/KaloSora/HelloGPT/blob/dev/code/gpt_in-ontext_learning.ipynb</a></p></blockquote><p>‍</p><h2 id="ReAct模式"><a href="#ReAct模式" class="headerlink" title="ReAct模式"></a>ReAct模式</h2><p>大语言模型具有推理能力，因为它们通过学习大量的文本数据，捕捉语言中的模式和结构。这些模型在训练过程中，会学习到各种知识、逻辑关系和推理方法。当它们遇到新的问题时，可以根据已经学到的知识和推理方法，生成有意义的回答。</p><p>​<img src="/2025/02/22/%E8%AE%A9GPT%E4%BD%BF%E7%94%A8%E5%B7%A5%E5%85%B7/image-20250220092417-an4b6d6.png" alt="image">​</p><p>‍</p><p>通过获取当前环境信息（观察），进一步思考，采取行动</p><p>​<img src="/2025/02/22/%E8%AE%A9GPT%E4%BD%BF%E7%94%A8%E5%B7%A5%E5%85%B7/image-20250220092516-ffjujn5.png" alt="image">​</p><p>‍</p><h3 id="LangChain-ReAct-Agent"><a href="#LangChain-ReAct-Agent" class="headerlink" title="LangChain ReAct Agent"></a>LangChain ReAct Agent</h3><p>​<img src="/2025/02/22/%E8%AE%A9GPT%E4%BD%BF%E7%94%A8%E5%B7%A5%E5%85%B7/image-20250220092544-lca8ao4.png" alt="image">​</p><p>‍</p><p>构建GPT，可以使用如下范式</p><p><span data-type="text" style="color: var(--b3-font-color6);">Question</span>: the input question you must answer</p><p><span data-type="text" style="color: var(--b3-font-color6);">Thought</span>: you should always think about what to do</p><p><span data-type="text" style="color: var(--b3-font-color6);">Action</span>: the action to take, should be one of [{tool_names}]</p><p><span data-type="text" style="color: var(--b3-font-color6);">Action Input:</span> the input to the action</p><p><span data-type="text" style="color: var(--b3-font-color6);">Observation</span>: the result of thr action… (Though&#x2F;Action&#x2F;Action Input&#x2F;Observation repeat N times)</p><p><span data-type="text" style="color: var(--b3-font-color6);">Thought</span>: Now I know the answer</p><p><span data-type="text" style="color: var(--b3-font-color6);">Final Answer</span>: the answer to the input question</p><p>‍</p><p>AutoGPT - 针对某个解决方案的循环自执行GPT</p><p>如果可以，配合短期和长期记忆保证上下文效果。</p><p>​<img src="/2025/02/22/%E8%AE%A9GPT%E4%BD%BF%E7%94%A8%E5%B7%A5%E5%85%B7/image-20250220093712-epgkrva.png" alt="image">​</p><p>Plan: 设计实现预期结果的计划，将复杂的任务分解为较小的步骤。</p><p>Criticize: 评估计划的可行性和效率，识别潜在问题和改进领域</p><p>Act: 使用其多功能的能力执行计划的操作，例如网络搜索和数据检索</p><p>Observe：分析从Act中生成的反馈，从以前的性能中学习以改善未来的结果</p><p>Plan（修改）：根据反馈，修改初始计划，允许持续改进问题解决策略</p><p>‍</p><blockquote><p>源代码</p><p><a href="https://github.com/KaloSora/HelloGPT/blob/dev/code/gpt_autogpt_example.ipynb">https://github.com/KaloSora/HelloGPT/blob/dev/code/gpt_autogpt_example.ipynb</a></p></blockquote><p>‍</p><h2 id="文本分片与向量化"><a href="#文本分片与向量化" class="headerlink" title="文本分片与向量化"></a>文本分片与向量化</h2><p>让大模型应用企业内部数据</p><p>大量文档和数据的挑战：如果使用prompt的方式来传递数据或上下文，会面临以下挑战：</p><ul><li>Prompt的内容大小限制</li><li>使用大量数据的成本</li><li>并非所有数据都会用于解决当前问题</li></ul><p>‍</p><p>​<img src="/2025/02/22/%E8%AE%A9GPT%E4%BD%BF%E7%94%A8%E5%B7%A5%E5%85%B7/image-20250220210925-xq0i4n2.png" alt="image">​</p><p>一种可能的处理方式<strong>关键词检索</strong>：通过Elaticsearch、Lucene等类似搜索引擎的方式，根据文本建立索引，通过关键词<u>严格匹配</u>到对应的文本内容。但是这种方式会丢失很多上下文的信息，会让相同语意的文本丢失。</p><p>‍</p><p>更好的方法是让关键词检索变为<strong>语义检索</strong></p><p>语义检索是一种基于文本内容和意义的信息检索方法，它试图理解查询和文档的语义，以便更准确地找到与查询相关的文档。</p><p>向量化(embedding)是将文本数据转为数值向量的过程。向量化后的文本可以用于计算文本之间的相似性，如余弦相似度、欧几里德距离等度量。<strong>这使得语义检索能够根据查询和文档之间的语义相似性来对文档进行排序和检索，从而提高检索的准确性和效率</strong>。</p><p>我们可以把字符块进行向量化，通过向量间的距离来求解这些向量之间的相似性。也就是说，语义越相近的向量，它的距离就越短。</p><blockquote><p>参考阅读</p><p>Word2Vec相关的一些机器学习的理论</p></blockquote><p>‍</p><p>实现流程</p><p>​<img src="/2025/02/22/%E8%AE%A9GPT%E4%BD%BF%E7%94%A8%E5%B7%A5%E5%85%B7/image-20250222100753-1kzxpe0.png" alt="image">​</p><p>代码示例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 向量化简单示例</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> langchain.embeddings.openai <span class="keyword">import</span> OpenAIEmbeddings</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment"># embedding = OpenAIEmbeddings() #如果直接使用OpenAI的GPT服务</span></span><br><span class="line">embedding = OpenAIEmbeddings(deployment=embedding_deployment) <span class="comment">#deployment是你在Azure中的 embedding 模型的部署名字</span></span><br><span class="line">sentence1 = <span class="string">&quot;我是一名软件工程师&quot;</span></span><br><span class="line">sentence2 = <span class="string">&quot;小张从事法律工作&quot;</span></span><br><span class="line">sentence3 = <span class="string">&quot;我是一名程序员&quot;</span></span><br><span class="line"></span><br><span class="line">embedding1 = embedding.embed_query(sentence1)</span><br><span class="line">embedding2 = embedding.embed_query(sentence2)</span><br><span class="line">embedding3 = embedding.embed_query(sentence3)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 点集计算向量间的距离</span></span><br><span class="line"><span class="built_in">print</span>(np.dot(embedding1,embedding2))</span><br><span class="line"><span class="built_in">print</span>(np.dot(embedding2,embedding3))</span><br><span class="line"><span class="built_in">print</span>(np.dot(embedding1,embedding3))</span><br></pre></td></tr></table></figure><p>‍</p><p>文本向量化</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> langchain.embeddings.openai <span class="keyword">import</span> OpenAIEmbeddings</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">embed</span>(<span class="params">chunks</span>): </span><br><span class="line">    <span class="comment"># embedding = OpenAIEmbeddings()#如果直接使用OpenAI的GPT服务</span></span><br><span class="line">    embedding = OpenAIEmbeddings(deployment=embedding_deployment)</span><br><span class="line">    <span class="keyword">return</span> [embedding.embed_query(chunk) <span class="keyword">for</span> chunk <span class="keyword">in</span> chunks]</span><br><span class="line"></span><br><span class="line">chunks = split_file_into_chunks(<span class="string">&quot;spotmax_intro.txt&quot;</span>,<span class="number">100</span>)</span><br><span class="line">embeddeds = embed(chunks)</span><br></pre></td></tr></table></figure><p>‍</p><p>向量检索</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">find_k_largest_indices</span>(<span class="params">input_list, k</span>):</span><br><span class="line">    sorted_indices = <span class="built_in">sorted</span>(<span class="built_in">range</span>(<span class="built_in">len</span>(input_list)), key=<span class="keyword">lambda</span> i: input_list[i], reverse=<span class="literal">True</span>)</span><br><span class="line">    <span class="built_in">print</span>(input_list)</span><br><span class="line">    <span class="built_in">print</span>(sorted_indices)</span><br><span class="line">    <span class="keyword">return</span> sorted_indices[:k]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">search</span>(<span class="params">chunks,embeddeds,top_k, txt</span>):</span><br><span class="line">    embedding = OpenAIEmbeddings(deployment=<span class="string">&quot;embedding&quot;</span>,chunk_size=<span class="number">1</span>)</span><br><span class="line">    embedded_txt = embedding.embed_query(txt)</span><br><span class="line">    distances = [np.dot(embedded_txt,embedded) <span class="keyword">for</span> embedded <span class="keyword">in</span> embeddeds]</span><br><span class="line">    ret_idx = find_k_largest_indices(distances, top_k)</span><br><span class="line">    <span class="keyword">return</span> [chunks[i] <span class="keyword">for</span> i <span class="keyword">in</span> ret_idx]</span><br><span class="line"></span><br><span class="line">search(chunks,embeddeds,<span class="number">2</span>, <span class="string">&quot;提高系统可用性&quot;</span>)</span><br></pre></td></tr></table></figure><p>‍</p><p>向量检索 + GPT</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> openai</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">anwser_question_with_doc</span>(<span class="params">question, chunks, embeddeds</span>):</span><br><span class="line">    relevent_chunks = search(chunks,embeddeds,<span class="number">2</span>, question)</span><br><span class="line">    prompt = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    仅通过总结以下的文字片段回答用户问题, 注意保持回答的语言通顺（字数在30字以内）</span></span><br><span class="line"><span class="string">    --- </span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> rchunks <span class="keyword">in</span> relevent_chunks:</span><br><span class="line">        prompt = prompt + <span class="string">&quot;\n&#x27;&quot;</span> + rchunks + <span class="string">&quot;&#x27;&quot;</span></span><br><span class="line">  </span><br><span class="line">    response = openai.ChatCompletion.create(</span><br><span class="line">    engine=deployment, <span class="comment"># engine = &quot;deployment_name&quot;.</span></span><br><span class="line">    messages=[</span><br><span class="line">            &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;system&quot;</span>, <span class="string">&quot;content&quot;</span>: prompt&#125;,   </span><br><span class="line">            &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;user&quot;</span>, <span class="string">&quot;content&quot;</span>: question&#125;</span><br><span class="line">        ],</span><br><span class="line">        temperature = <span class="number">0.9</span>, </span><br><span class="line">        max_tokens = <span class="number">200</span></span><br><span class="line">   )</span><br><span class="line">   <span class="keyword">return</span> response.choices[<span class="number">0</span>].message.content</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(anwser_question_with_doc(<span class="string">&quot;如何提高可用性&quot;</span>, chunks,embeddeds))</span><br></pre></td></tr></table></figure><p>‍</p><p>*也可以使用embedding模型辅助实现，embedding model使用<code>nomic-embed-text</code>​</p><blockquote><p>Ollama embedding model</p><p><a href="https://ollama.com/blog/embedding-models">https://ollama.com/blog/embedding-models</a></p><p>‍</p><p>nomic-embed-text model</p><p><a href="https://ollama.com/library/nomic-embed-text">https://ollama.com/library/nomic-embed-text</a></p></blockquote><p>‍</p><p>通过ollama安装模型</p><p>复制命令</p><p>​<img src="/2025/02/22/%E8%AE%A9GPT%E4%BD%BF%E7%94%A8%E5%B7%A5%E5%85%B7/image-20250220213540-anf19y3.png" alt="image">​</p><p>‍</p><p>在命令行安装</p><p>​<img src="/2025/02/22/%E8%AE%A9GPT%E4%BD%BF%E7%94%A8%E5%B7%A5%E5%85%B7/image-20250220214052-vh76gw4.png" alt="image">​</p><p>​<img src="/2025/02/22/%E8%AE%A9GPT%E4%BD%BF%E7%94%A8%E5%B7%A5%E5%85%B7/image-20250220214331-7pqihxh.png" alt="image">​</p><h3 id="LangChain-Retrieval"><a href="#LangChain-Retrieval" class="headerlink" title="LangChain Retrieval"></a>LangChain Retrieval</h3><p>通过LangChain连接大模型和内部文本</p><p>上面使用了chroma向量数据库，在这一节配合LangChain使用实现分片向量化的整个工作流</p><p>​<img src="/2025/02/22/%E8%AE%A9GPT%E4%BD%BF%E7%94%A8%E5%B7%A5%E5%85%B7/image-20250222100908-g99sack.png" alt="image">​</p><p>LangChain Document Loader加载数据</p><p>支持CSV，文件目录，HTML，JSON，PDF，Markdown等多种格式</p><p><a href="https://python.langchain.com/docs/integrations/document_loaders/">https://python.langchain.com/docs/integrations/document_loaders/</a></p><p>‍</p><p>LangChain Retrievers</p><p>更好的文档分片工具</p><p><a href="https://python.langchain.com/docs/integrations/document_transformers/">https://python.langchain.com/docs/integrations/retrievers/</a></p><p>‍</p><p>最后把分片好的数据embed到向量数据库</p><p>​<img src="/2025/02/22/%E8%AE%A9GPT%E4%BD%BF%E7%94%A8%E5%B7%A5%E5%85%B7/image-20250222101728-6nouej4.png" alt="image">​</p><p>LangChain提供了<code>RetrievalQA</code>​的方法直接查询向量数据库（Vectordb）</p><p>用户提问 -&gt; 向量数据库检索 -&gt; 构成新的prompt -&gt; 大模型回答</p><p>‍</p><p>这里使用md文档为例</p><p>​<img src="/2025/02/22/%E8%AE%A9GPT%E4%BD%BF%E7%94%A8%E5%B7%A5%E5%85%B7/image-20250222114740-ivn5gg8.png" alt="image">​</p><p>‍</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">retriever=vectordb.as_retriever(</span><br><span class="line">    search_type=<span class="string">&quot;mmr&quot;</span>, search_kwargs=&#123;<span class="string">&quot;k&quot;</span>: <span class="number">3</span>&#125;</span><br><span class="line">    <span class="comment">#search_type=&quot;similarity&quot;, search_kwargs=&#123;&quot;k&quot;: 3&#125;</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>search_type：根据场景选择适合的参数</p><ul><li>similarity：根据相似性查找，最多查找3个</li><li>mmr（max marginal）：找到三个最相似的，然后根据这三个数据库之间差别最大的，但是跟用户问题又有关联性的问题</li></ul><p>‍</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">qa = RetrievalQA.from_chain_type(llm=llm, chain_type=<span class="string">&quot;refine&quot;</span>, retriever=retriever,</span><br><span class="line">                                 return_source_documents=<span class="literal">False</span>, verbose=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p>chain_type: 可选值 stuff &#x2F; refine &#x2F; map reduce &#x2F; map re-rank</p><ul><li>要根据企业内部的实际情况和数据特性，尽可能多地测试</li><li>适当做一些定制化的改动以满足需求</li></ul><p>​<img src="/2025/02/22/%E8%AE%A9GPT%E4%BD%BF%E7%94%A8%E5%B7%A5%E5%85%B7/image-20250222103300-hr9bz2x.png" alt="image">​</p><p>​<img src="/2025/02/22/%E8%AE%A9GPT%E4%BD%BF%E7%94%A8%E5%B7%A5%E5%85%B7/image-20250222103405-zo9pqum.png" alt="image">​</p><p>‍</p><blockquote><p>源代码</p><p><a href="https://github.com/KaloSora/HelloGPT/blob/dev/code/gpt_langchain_retrieval.ipynb">https://github.com/KaloSora/HelloGPT/blob/dev/code/gpt_langchain_retrieval.ipynb</a></p><p>参考阅读</p><p><a href="https://medium.com/@rahul.dusad/run-rag-pipeline-locally-with-ollama-embedding-model-nomic-embed-text-generate-model-llama3-e7a554a541b3">https://medium.com/@rahul.dusad/run-rag-pipeline-locally-with-ollama-embedding-model-nomic-embed-text-generate-model-llama3-e7a554a541b3</a></p></blockquote><p>‍</p><h2 id="构建多模态Chatbot"><a href="#构建多模态Chatbot" class="headerlink" title="构建多模态Chatbot"></a>构建多模态Chatbot</h2><p>​<img src="/2025/02/22/%E8%AE%A9GPT%E4%BD%BF%E7%94%A8%E5%B7%A5%E5%85%B7/image-20250222150709-zlbhx60.png" alt="image">​</p><p>图形生成能力：openai可以使用DALL E2，或者是Stable Diffusion</p><p>Openai api示例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> http.client</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">create_image</span>(<span class="params">prompt</span>):</span><br><span class="line">  api_base = os.getenv(<span class="string">&quot;OPENAI_API_BASE&quot;</span>)</span><br><span class="line">  api_key = os.getenv(<span class="string">&quot;OPENAI_API_KEY&quot;</span>)</span><br><span class="line">  api_version = api_version = <span class="string">&#x27;2022-08-03-preview&#x27;</span></span><br><span class="line"></span><br><span class="line">  url = <span class="string">&quot;&#123;&#125;dalle/text-to-image?api-version=&#123;&#125;&quot;</span>.<span class="built_in">format</span>(api_base, api_version)</span><br><span class="line">  headers= &#123; <span class="string">&quot;api-key&quot;</span>: api_key, <span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;application/json&quot;</span> &#125;</span><br><span class="line">  body = &#123;</span><br><span class="line">      <span class="string">&quot;caption&quot;</span>: prompt,</span><br><span class="line">      <span class="string">&quot;resolution&quot;</span>: <span class="string">&quot;512x512&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">  submission = requests.post(url, headers=headers, json=body)</span><br><span class="line">  operation_location = submission.headers[<span class="string">&#x27;Operation-Location&#x27;</span>]</span><br><span class="line">  retry_after = submission.headers[<span class="string">&#x27;Retry-after&#x27;</span>]</span><br><span class="line">  status = <span class="string">&quot;&quot;</span></span><br><span class="line">  <span class="keyword">while</span> (status != <span class="string">&quot;Succeeded&quot;</span>):</span><br><span class="line">      time.sleep(<span class="built_in">int</span>(retry_after))</span><br><span class="line">      response = requests.get(operation_location, headers=headers)</span><br><span class="line">      status = response.json()[<span class="string">&#x27;status&#x27;</span>]</span><br><span class="line">  image_url = response.json()[<span class="string">&#x27;result&#x27;</span>][<span class="string">&#x27;contentUrl&#x27;</span>]</span><br><span class="line">  <span class="comment">#display(Image(url=image_url))</span></span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;\n![image](&quot;</span>+image_url+<span class="string">&quot;)&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> (create_image(<span class="string">&quot;A dog on the street.&quot;</span>))</span><br></pre></td></tr></table></figure><p>‍</p><blockquote><p>Openai 代码示例</p><p><a href="https://github.com/KaloSora/HelloGPT/blob/dev/code/gpt_all_in_one_example.ipynb">https://github.com/KaloSora/HelloGPT/blob/dev/code/gpt_all_in_one_example.ipynb</a></p></blockquote><p>‍</p><p>‍</p><p>‍</p><p>‍</p><p>‍</p><p>‍</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;‍‍&lt;/p&gt;
&lt;p&gt;*使用DeepSeek API测试&lt;/p&gt;
&lt;h2 id=&quot;Function-Calling&quot;&gt;&lt;a href=&quot;#Function-Calling&quot; class=&quot;headerlink&quot; title=&quot;Function Calling&quot;&gt;&lt;/a&gt;Fun</summary>
      
    
    
    
    <category term="AI/ML" scheme="http://example.com/categories/AI-ML/"/>
    
    
    <category term="LLM" scheme="http://example.com/tags/LLM/"/>
    
    <category term="DeepSeek" scheme="http://example.com/tags/DeepSeek/"/>
    
  </entry>
  
  <entry>
    <title>搭建HelloGPT</title>
    <link href="http://example.com/2025/02/15/%E6%90%AD%E5%BB%BAHelloGPT/"/>
    <id>http://example.com/2025/02/15/%E6%90%AD%E5%BB%BAHelloGPT/</id>
    <published>2025-02-15T07:49:11.000Z</published>
    <updated>2025-02-15T07:49:26.297Z</updated>
    
    <content type="html"><![CDATA[<p>‍</p><h2 id="通过Azure访问GPT"><a href="#通过Azure访问GPT" class="headerlink" title="通过Azure访问GPT"></a>通过Azure访问GPT</h2><p>中国大陆地区不允许访问GPT服务，可以通过微软云搭建GPT服务。</p><p>*微软云首次注册有30天免费体验</p><p><a href="https://azure.microsoft.com/zh-cn/pricing/purchase-options/azure-account/">https://azure.microsoft.com/zh-cn/pricing/purchase-options/azure-account/</a></p><p>‍</p><p>创建OpenAI服务</p><p>​<img src="/2025/02/15/%E6%90%AD%E5%BB%BAHelloGPT/image-20250125200329-jo21jm7.png" alt="image">​</p><p>‍</p><p>选择部署模型</p><p>​<img src="/2025/02/15/%E6%90%AD%E5%BB%BAHelloGPT/image-20250125200414-0bcfzdx.png" alt="image">​</p><p>‍</p><p>获取环境变量</p><p>​<img src="/2025/02/15/%E6%90%AD%E5%BB%BAHelloGPT/image-20250125200526-o69r4x2.png" alt="image">​</p><p>设置到系统配置文件中，也可以在代码中import</p><p>​<img src="/2025/02/15/%E6%90%AD%E5%BB%BAHelloGPT/image-20250125200541-inoh9dd.png" alt="image">​</p><p>‍</p><p>代码详解</p><p>​<img src="/2025/02/15/%E6%90%AD%E5%BB%BAHelloGPT/image-20250125200913-vsz9usw.png" alt="image">​</p><ul><li>temperature：针对回答的稳定性设置，0为最稳定</li><li>max_token：设置回答的长度</li></ul><p>‍</p><p>Token计费规则</p><p>​<img src="/2025/02/15/%E6%90%AD%E5%BB%BAHelloGPT/image-20250125105549-o7q171o.png" alt="image">​</p><p>‍</p><p>模型请求配额</p><p>​<img src="/2025/02/15/%E6%90%AD%E5%BB%BAHelloGPT/image-20250125105618-6jmorto.png" alt="image">​</p><h2 id="使用DeepSeekAPI"><a href="#使用DeepSeekAPI" class="headerlink" title="使用DeepSeekAPI"></a><strong>使用DeepSeekAPI</strong></h2><p>可以使用DeepSeek的API作为代替</p><p><a href="https://platform.deepseek.com/sign_in">deepseek open platform</a></p><p><a href="https://chat.deepseek.com/">deepseek free chat</a></p><p>首次注册可以获得免费额度</p><p>​<img src="/2025/02/15/%E6%90%AD%E5%BB%BAHelloGPT/image-20250128103053-btd7xa1.png" alt="image">​</p><p>‍</p><p><a href="https://api-docs.deepseek.com/zh-cn/">API document</a></p><blockquote><p>示例源代码</p><p><a href="https://github.com/KaloSora/HelloGPT/blob/dev/code/gpt_api_example.ipynb">https://github.com/KaloSora/HelloGPT/blob/main/code/gpt_api_example.ipynb</a></p></blockquote><p>‍</p><h2 id="提示词工程"><a href="#提示词工程" class="headerlink" title="提示词工程"></a>提示词工程</h2><p>大模型返回的自然语言无法被程序使用。</p><p>让大模型结合到程序中，让程序能理解大模型返回的结果。</p><h3 id="提示词技巧"><a href="#提示词技巧" class="headerlink" title="提示词技巧"></a>提示词技巧</h3><ul><li>利用反向提示词（如：不使用……）</li><li>规范输出的格式（如指定Json格式，便于程序处理）</li><li>文本规范异常输出的格式（如遇到异常时，返回简单的ERROR，便于程序处理）</li><li>不断迭代提示词</li><li>提示词尽量使用英语</li></ul><p>‍</p><p>DeepSeek官方提示库</p><p><a href="https://api-docs.deepseek.com/zh-cn/prompt-library/">DeepSeek提示库</a></p><p>‍</p><blockquote><p>示例源代码</p><p><a href="https://github.com/KaloSora/HelloGPT/blob/dev/code/gpt_prompt_demo.ipynb">https://github.com/KaloSora/HelloGPT/blob/dev/code/gpt_prompt_demo.ipynb</a></p></blockquote><p>‍</p><h2 id="LangChain"><a href="#LangChain" class="headerlink" title="LangChain"></a>LangChain</h2><p>大语言模型中的拓展工具类库，作为大语言模型和应用程序之间的桥梁。</p><blockquote><p>LangChain is a flexible abstractions and extensive toolkit enables developers to harness the power of LLMs.</p></blockquote><p>‍</p><p>安装方式</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pip install langchain</span><br><span class="line"></span><br><span class="line">pip install langchain-community</span><br></pre></td></tr></table></figure><p>‍</p><h3 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h3><ul><li><p>提示词模板</p></li><li><p>不同程度的上下文记忆</p></li><li><p>大模型调用API</p><ul><li>这种查询方式类似于爬虫，可能会被外部网站阻止，建议使用网站提供的API</li></ul></li><li><p>链式请求</p><ul><li>将复杂的任务分解为更简单的子任务</li><li>​<img src="/2025/02/15/%E6%90%AD%E5%BB%BAHelloGPT/image-20250128163023-kgl4499.png" alt="image">​</li></ul></li></ul><p>‍</p><blockquote><p>示例源代码</p><p><a href="https://github.com/KaloSora/HelloGPT/blob/dev/code/langchain_demo.ipynb">https://github.com/KaloSora/HelloGPT/blob/dev/code/langchain_demo.ipynb</a></p></blockquote><p>‍</p><h2 id="保持会话状态"><a href="#保持会话状态" class="headerlink" title="保持会话状态"></a>保持会话状态</h2><p>LLM模型本身的对话是无状态的。</p><p>使用<code>Gradio</code>​类库让Chatbot获得记忆，能够根据上下文回答问题。</p><ul><li>能够快速构建原型</li><li>能够保存上下文对话信息</li></ul><p>‍</p><p>安装</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install gradio</span><br></pre></td></tr></table></figure><p>‍</p><p>可以使用LangChain的记忆功能，让开发更加简单</p><p>可以尝试不同程度的记忆功能</p><p>例如：ConversationSummaryBufferMemory</p><p>当缓存内容Token超过参数 “max_token_limit” 的值后，就会将超出的会话内容进行总结，这个总结过程也是通过大模型完成的。</p><p>‍</p><p>使用记忆功能的模型：</p><p><strong>优点</strong></p><ul><li>控制了缓存内容的大小</li><li>尽量记忆对话的上下文</li></ul><p>缺点</p><ul><li>在缓存内容超出限制后，为了控制缓存的大小，会持续通过大模型来总结较早的内容，使程序相应的延迟增加</li><li>成本增加</li></ul><p>‍</p><blockquote><p> 示例源代码</p><p><a href="https://github.com/KaloSora/HelloGPT/blob/dev/code/gpt_langchain_history.ipynb">https://github.com/KaloSora/HelloGPT/blob/dev/code/gpt_langchain_history.ipynb</a></p></blockquote><p>‍</p><h2 id="大模型在企业中的应用畅想"><a href="#大模型在企业中的应用畅想" class="headerlink" title="大模型在企业中的应用畅想"></a>大模型在企业中的应用畅想</h2><p>启发式交互应用：如低代码平台，或自然语言生成代码</p><p>Copilot：AI助手，如微软、Apple的AI助手，或者是企业中的IT系统诊断助手</p><p>大语言模型的推理&#x2F;生成：生成式AI应用</p><p>‍</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;‍&lt;/p&gt;
&lt;h2 id=&quot;通过Azure访问GPT&quot;&gt;&lt;a href=&quot;#通过Azure访问GPT&quot; class=&quot;headerlink&quot; title=&quot;通过Azure访问GPT&quot;&gt;&lt;/a&gt;通过Azure访问GPT&lt;/h2&gt;&lt;p&gt;中国大陆地区不允许访问GPT服务，可以通过</summary>
      
    
    
    
    <category term="AI/ML" scheme="http://example.com/categories/AI-ML/"/>
    
    
    <category term="LLM" scheme="http://example.com/tags/LLM/"/>
    
    <category term="DeepSeek" scheme="http://example.com/tags/DeepSeek/"/>
    
  </entry>
  
  <entry>
    <title>Mac DeepSeek本地部署</title>
    <link href="http://example.com/2025/02/09/Mac-DeepSeek%E6%9C%AC%E5%9C%B0%E9%83%A8%E7%BD%B2/"/>
    <id>http://example.com/2025/02/09/Mac-DeepSeek%E6%9C%AC%E5%9C%B0%E9%83%A8%E7%BD%B2/</id>
    <published>2025-02-09T03:11:11.000Z</published>
    <updated>2025-02-09T03:11:25.396Z</updated>
    
    <content type="html"><![CDATA[<p>‍</p><blockquote><p>DeepSeek Github开源仓库</p><p><a href="https://github.com/deepseek-ai">https://github.com/deepseek-ai</a></p><p>‍</p><p>R1仓库</p><p><a href="https://github.com/deepseek-ai/DeepSeek-R1">https://github.com/deepseek-ai/DeepSeek-R1</a></p></blockquote><p>‍</p><h2 id="安装Ollama"><a href="#安装Ollama" class="headerlink" title="安装Ollama"></a>安装Ollama</h2><p>Ollama是一个开源框架，专为在本地机器（支持跨平台，如Mac&#x2F;Windows）上便捷部署和运行大语言模型（LLM）而设计。</p><p>*使用的机器为Mac 2018 Pro, Intel CPU，LM Studio不支持。</p><blockquote><p>Ollama下载链接</p><p><a href="https://ollama.com/download/mac">https://ollama.com/download/mac</a></p></blockquote><p>‍</p><p>验证安装结果</p><p>​<img src="/2025/02/09/Mac-DeepSeek%E6%9C%AC%E5%9C%B0%E9%83%A8%E7%BD%B2/image-20250208155744-ss6d35f.png" alt="image">​</p><p>‍</p><h2 id="Ollama载入Deepseek-r1"><a href="#Ollama载入Deepseek-r1" class="headerlink" title="Ollama载入Deepseek-r1"></a>Ollama载入Deepseek-r1</h2><p>在Ollama官网找到R1模型</p><p>​<img src="/2025/02/09/Mac-DeepSeek%E6%9C%AC%E5%9C%B0%E9%83%A8%E7%BD%B2/image-20250208160225-5ukfsvg.png" alt="image">​</p><p>‍</p><p>选择需要的模型，复制命令</p><p>​<img src="/2025/02/09/Mac-DeepSeek%E6%9C%AC%E5%9C%B0%E9%83%A8%E7%BD%B2/image-20250208160323-kngn783.png" alt="image">​</p><p>在命令行里运行对应的命令，会自动下载模型</p><p>​<img src="/2025/02/09/Mac-DeepSeek%E6%9C%AC%E5%9C%B0%E9%83%A8%E7%BD%B2/image-20250208160414-bywa9rp.png" alt="image">​</p><p>‍</p><p>运行结果</p><p>​<img src="/2025/02/09/Mac-DeepSeek%E6%9C%AC%E5%9C%B0%E9%83%A8%E7%BD%B2/image-20250208193550-jd15aq2.png" alt="image">​</p><p>‍</p><h2 id="Chatbox为AI添加UI"><a href="#Chatbox为AI添加UI" class="headerlink" title="Chatbox为AI添加UI"></a>Chatbox为AI添加UI</h2><blockquote><p>Chatbox官网</p><p><a href="https://chatboxai.app/zh">https://chatboxai.app/zh</a></p></blockquote><p>*UI也可以选择Cherry Studio</p><p>选择Ollama API</p><p>​<img src="/2025/02/09/Mac-DeepSeek%E6%9C%AC%E5%9C%B0%E9%83%A8%E7%BD%B2/image-20250208193833-c6ffl5u.png" alt="image">​</p><p>‍</p><p>选择已下载的模型</p><p>​<img src="/2025/02/09/Mac-DeepSeek%E6%9C%AC%E5%9C%B0%E9%83%A8%E7%BD%B2/image-20250208193914-rpsuerz.png" alt="image">​</p><p>‍</p><p>选择你配置好的模型，然后提出你的问题</p><p>​<img src="/2025/02/09/Mac-DeepSeek%E6%9C%AC%E5%9C%B0%E9%83%A8%E7%BD%B2/image-20250208194057-96fy3y7.png" alt="image">​</p><p>‍</p><h2 id="开启本地联网服务"><a href="#开启本地联网服务" class="headerlink" title="开启本地联网服务"></a>开启本地联网服务</h2><p>安装AnythingLLM</p><p><a href="https://docs.anythingllm.com/installation-desktop/macos">https://docs.anythingllm.com/installation-desktop/macos</a></p><p>‍</p><p>API提供商选择Ollama</p><p>​<img src="/2025/02/09/Mac-DeepSeek%E6%9C%AC%E5%9C%B0%E9%83%A8%E7%BD%B2/image-20250209094623-o1t509s.png" alt="image">​</p><p>‍</p><p>在设置中找到“代理技能”，开启连网搜索</p><p>​<img src="/2025/02/09/Mac-DeepSeek%E6%9C%AC%E5%9C%B0%E9%83%A8%E7%BD%B2/image-20250209094943-2vud5jw.png" alt="image">​</p><p>‍</p><p>尝试提出一个2025年2月的事件，并要求deepseek分析其影响</p><p>*这里联网速度和思考速度都比较慢</p><p>​<img src="/2025/02/09/Mac-DeepSeek%E6%9C%AC%E5%9C%B0%E9%83%A8%E7%BD%B2/image-20250209100454-72pvg99.png" alt="image">​</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;‍&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;DeepSeek Github开源仓库&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/deepseek-ai&quot;&gt;https://github.com/deepseek-ai&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;‍&lt;/p&gt;</summary>
      
    
    
    
    <category term="AI/ML" scheme="http://example.com/categories/AI-ML/"/>
    
    
    <category term="LLM" scheme="http://example.com/tags/LLM/"/>
    
    <category term="DeepSeek" scheme="http://example.com/tags/DeepSeek/"/>
    
  </entry>
  
  <entry>
    <title>Windows DeepSeek本地部署</title>
    <link href="http://example.com/2025/02/02/Windows-DeepSeek%E6%9C%AC%E5%9C%B0%E6%90%AD%E5%BB%BA/"/>
    <id>http://example.com/2025/02/02/Windows-DeepSeek%E6%9C%AC%E5%9C%B0%E6%90%AD%E5%BB%BA/</id>
    <published>2025-02-02T07:11:11.000Z</published>
    <updated>2025-02-09T03:16:02.904Z</updated>
    
    <content type="html"><![CDATA[<p>‍</p><p>DeepSeek R1 Distill 本地部署相关资料</p><blockquote><p>资料来源 <a href="https://henjihenji.feishu.cn/wiki/MN3Vwl2STigk2qk1r6lcGoY5nYg">https://henjihenji.feishu.cn/wiki/MN3Vwl2STigk2qk1r6lcGoY5nYg</a></p></blockquote><h1 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h1><p>建议使用 NVIDIA 卡，体验会好不少，AMD 显卡未做测试，但应该也是能跑的</p><p>欢迎各位在本文档评论区反馈各自运行情况，这样可以帮到更多人</p><h1 id="LM-Studio"><a href="#LM-Studio" class="headerlink" title="LM Studio"></a>LM Studio</h1><p>官网下载：<a href="https://lmstudio.ai/">https://lmstudio.ai/</a></p><p>夸克网盘：<a href="https://pan.quark.cn/s/f7f610d2ac7a">https://pan.quark.cn/s/f7f610d2ac7a</a></p><h1 id="模型列表"><a href="#模型列表" class="headerlink" title="模型列表"></a>模型列表</h1><p>请选择文件体积小于自己显存大小的模型，略大一些的虽然也能跑，但是速度会慢很多。因个人能力有限，以下模型推荐不一定是最好的</p><p>更多模型下载</p><p>  链接1：<a href="https://www.modelscope.cn/organization/lmstudio-community">https://www.modelscope.cn/organization/lmstudio-community</a></p><p>  记得用搜索功能搜索 DeepSeek 相关模型</p><p>  链接2：<a href="https://www.modelscope.cn/collections/DeepSeek-R1-Distill-GGUF-eec5fee2f2ee42">https://www.modelscope.cn/collections/DeepSeek-R1-Distill-GGUF-eec5fee2f2ee42</a></p><p>  相比链接1会多一点不同量化精度的模型</p><p><strong>点击模型名称可以直接下载</strong></p><table><thead><tr><th>显存大小</th><th>推荐模型</th><th>备注</th></tr></thead><tbody><tr><td>32GB</td><td><a href="https://www.modelscope.cn/models/lmstudio-community/DeepSeek-R1-Distill-Qwen-32B-GGUF/resolve/master/DeepSeek-R1-Distill-Qwen-32B-Q6_K.gguf">DeepSeek-R1-Distill-Qwen-32B-Q6_K.gguf</a></td><td></td></tr><tr><td>24GB</td><td><a href="https://www.modelscope.cn/models/lmstudio-community/DeepSeek-R1-Distill-Qwen-32B-GGUF/resolve/master/DeepSeek-R1-Distill-Qwen-32B-Q4_K_M.gguf">DeepSeek-R1-Distill-Qwen-32B-Q4_K_M.gguf</a><br><a href="https://www.modelscope.cn/models/unsloth/DeepSeek-R1-Distill-Qwen-32B-GGUF/resolve/master/DeepSeek-R1-Distill-Qwen-32B-Q5_K_M.gguf">DeepSeek-R1-Distill-Qwen-32B-Q5_K_M.gguf</a></td><td>二选一即可，比较推荐第一个<br><a href="https://www.modelscope.cn/models/unsloth/DeepSeek-R1-Distill-Qwen-32B-GGUF/resolve/master/DeepSeek-R1-Distill-Qwen-32B-Q5_K_M.gguf">Q5</a> 质量上可能会好一点，但是因为太接近 24G 显存，所以上下文多了之后，速度可能会慢。<br>上面的 <a href="https://www.modelscope.cn/models/lmstudio-community/DeepSeek-R1-Distill-Qwen-32B-GGUF/resolve/master/DeepSeek-R1-Distill-Qwen-32B-Q6_K.gguf">Q6</a> 勉强也能跑，但速度会比较慢。</td></tr><tr><td>16GB</td><td><a href="https://www.modelscope.cn/models/lmstudio-community/DeepSeek-R1-Distill-Qwen-14B-GGUF/resolve/master/DeepSeek-R1-Distill-Qwen-14B-Q6_K.gguf">DeepSeek-R1-Distill-Qwen-14B-Q6_K.gguf</a></td><td></td></tr><tr><td>12GB</td><td><a href="https://www.modelscope.cn/models/lmstudio-community/DeepSeek-R1-Distill-Qwen-14B-GGUF/resolve/master/DeepSeek-R1-Distill-Qwen-14B-Q4_K_M.gguf">DeepSeek-R1-Distill-Qwen-14B-Q4_K_M.gguf</a></td><td></td></tr><tr><td>11GB</td><td><a href="https://www.modelscope.cn/models/lmstudio-community/DeepSeek-R1-Distill-Qwen-14B-GGUF/resolve/master/DeepSeek-R1-Distill-Qwen-14B-Q4_K_M.gguf">DeepSeek-R1-Distill-Qwen-14B-Q4_K_M.gguf</a></td><td></td></tr><tr><td>8GB</td><td><a href="https://www.modelscope.cn/models/lmstudio-community/DeepSeek-R1-Distill-Qwen-7B-GGUF/resolve/master/DeepSeek-R1-Distill-Qwen-7B-Q6_K.gguf">DeepSeek-R1-Distill-Qwen-7B-Q6_K.gguf</a><br><a href="https://www.modelscope.cn/models/lmstudio-community/DeepSeek-R1-Distill-Llama-8B-GGUF/resolve/master/DeepSeek-R1-Distill-Llama-8B-Q6_K.gguf">DeepSeek-R1-Distill-Llama-8B-Q6_K.gguf</a></td><td>二选一即可</td></tr><tr><td>6GB</td><td><a href="https://www.modelscope.cn/models/lmstudio-community/DeepSeek-R1-Distill-Qwen-7B-GGUF/resolve/master/DeepSeek-R1-Distill-Qwen-7B-Q4_K_M.gguf">DeepSeek-R1-Distill-Qwen-7B-Q4_K_M.gguf</a><br><a href="https://www.modelscope.cn/models/lmstudio-community/DeepSeek-R1-Distill-Llama-8B-GGUF/resolve/master/DeepSeek-R1-Distill-Llama-8B-Q4_K_M.gguf">DeepSeek-R1-Distill-Llama-8B-Q4_K_M.gguf</a></td><td>二选一即可</td></tr><tr><td>4GB</td><td><a href="https://www.modelscope.cn/models/lmstudio-community/DeepSeek-R1-Distill-Qwen-7B-GGUF/resolve/master/DeepSeek-R1-Distill-Qwen-7B-Q3_K_L.gguf">DeepSeek-R1-Distill-Qwen-7B-Q3_K_L.gguf</a><br><a href="https://www.modelscope.cn/models/lmstudio-community/DeepSeek-R1-Distill-Qwen-1.5B-GGUF/resolve/master/DeepSeek-R1-Distill-Qwen-1.5B-Q8_0.gguf">DeepSeek-R1-Distill-Qwen-1.5B-Q8_0.gguf</a></td><td>二选一即可，比较推荐第一个<br>第二个 4G 显存能跑，但可能会比较慢</td></tr><tr><td>3GB、2GB</td><td><a href="https://www.modelscope.cn/models/lmstudio-community/DeepSeek-R1-Distill-Qwen-1.5B-GGUF/resolve/master/DeepSeek-R1-Distill-Qwen-1.5B-Q8_0.gguf">DeepSeek-R1-Distill-Qwen-1.5B-Q8_0.gguf</a></td><td></td></tr></tbody></table><h1 id="如何查看自己的显存"><a href="#如何查看自己的显存" class="headerlink" title="如何查看自己的显存"></a>如何查看自己的显存</h1><p>​<img src="/2025/02/02/Windows-DeepSeek%E6%9C%AC%E5%9C%B0%E6%90%AD%E5%BB%BA/image-20250209100647-xmyvf48.png" alt="image">​</p><table><thead><tr><th>显存大小</th><th>对应N卡型号</th></tr></thead><tbody><tr><td>2GB</td><td>GTX 1050、GT 1030</td></tr><tr><td>3GB</td><td>GTX 1060 3GB</td></tr><tr><td>4GB</td><td>GTX 1050 Ti</td></tr><tr><td>6GB</td><td>GTX 1060 6GB、RTX 2060 6GB、RTX 3050 (6GB)</td></tr><tr><td>8GB</td><td>GTX 1080、GTX 1070 Ti、GTX 1070、RTX 2080 SUPER、RTX 2080、RTX 2070 SUPER、RTX 2070、RTX 2060 SUPER、RTX 3070 Ti、RTX 3070、RTX 3060 Ti、RTX 3060 (8GB)、RTX 3050 (8GB)、RTX 4080、RTX 4060 Ti 8GB、RTX 4060、RTX 5070</td></tr><tr><td>11GB</td><td>GTX 1080 Ti、RTX 2080 Ti</td></tr><tr><td>12GB</td><td>RTX 2060 12GB、RTX 3060 (12GB)、RTX 4070 Ti SUPER、RTX 4070、RTX 5070 Ti</td></tr><tr><td>16GB</td><td>RTX 4060 Ti 16GB、RTX 5080</td></tr><tr><td>24GB</td><td>RTX 3090 Ti、RTX 3090、RTX 4090</td></tr><tr><td>32GB</td><td>RTX 5090</td></tr></tbody></table><p>‍</p><h1 id="本地部署测试"><a href="#本地部署测试" class="headerlink" title="本地部署测试"></a>本地部署测试</h1><p>GPU：AMD Radeon RX580 8G</p><p>CPU：AMD Ryzen 5600X</p><p>内存：16G</p><p>‍</p><p>运行LM Studio</p><p>​<img src="/2025/02/02/Windows-DeepSeek%E6%9C%AC%E5%9C%B0%E6%90%AD%E5%BB%BA/image-20250209110548-fxxeq1n.png" alt="image">​</p><p>‍</p><p>加载本地模型</p><p>注意模型这里直接选根目录，LM Studio会自动搜索</p><p>​<img src="/2025/02/02/Windows-DeepSeek%E6%9C%AC%E5%9C%B0%E6%90%AD%E5%BB%BA/image-20250209110613-zipexwj.png" alt="image">​</p><p>‍</p><p>点击顶部加载模型，开始新的对话</p><p>​<img src="/2025/02/02/Windows-DeepSeek%E6%9C%AC%E5%9C%B0%E6%90%AD%E5%BB%BA/image-20250209110630-hf4qhqg.png" alt="image">​</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;‍&lt;/p&gt;
&lt;p&gt;DeepSeek R1 Distill 本地部署相关资料&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;资料来源 &lt;a href=&quot;https://henjihenji.feishu.cn/wiki/MN3Vwl2STigk2qk1r6lcGoY5nYg&quot;&gt;ht</summary>
      
    
    
    
    <category term="AI/ML" scheme="http://example.com/categories/AI-ML/"/>
    
    
    <category term="LLM" scheme="http://example.com/tags/LLM/"/>
    
    <category term="DeepSeek" scheme="http://example.com/tags/DeepSeek/"/>
    
  </entry>
  
  <entry>
    <title>Jupyter Notebook</title>
    <link href="http://example.com/2025/01/29/Jupyter-Notebook/"/>
    <id>http://example.com/2025/01/29/Jupyter-Notebook/</id>
    <published>2025-01-29T06:07:11.000Z</published>
    <updated>2025-01-29T06:16:35.669Z</updated>
    
    <content type="html"><![CDATA[<p>‍</p><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p><a href="https://jupyter.org/">Jupyter官网</a></p><blockquote><p>JupyterLab是最新的基于web的笔记本、代码和数据交互式开发环境。其灵活的界面允许用户配置和安排数据科学、科学计算、计算新闻和机器学习中的工作流程。模块化设计邀请扩展来扩展和丰富功能。</p></blockquote><p>该工具具有以下特征：</p><ul><li>允许使用markdown语法</li><li>支持快速导出多种文件格式</li><li>支持部署在远程环境</li><li>不仅仅支持Python，也支持Javascript，Ruby等语言</li></ul><p>因此，许多公开课网站和大学课程普遍使用Jupyter分发作业。它也适合机器学习和数据分析，是集编程和写作与一身的工具。</p><p>这种编程方式也可以称为文学编程。</p><h2 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h2><p>安装命令</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install jupyter</span><br></pre></td></tr></table></figure><p>‍</p><p>运行结果</p><p>​<img src="/2025/01/29/Jupyter-Notebook/image-20250125194112-m528stx.png" alt="image">​</p><p>‍</p><p>运行命令</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd <span class="punctuation">[</span>target_folder<span class="punctuation">]</span></span><br><span class="line">jupyter notebook</span><br></pre></td></tr></table></figure><p>‍</p><p>运行结果</p><p>​<img src="/2025/01/29/Jupyter-Notebook/image-20250125194224-8owk4qo.png" alt="image">​</p><p>浏览器输入<code>http://localhost:8888/</code>​访问Jupyter</p><p>‍</p><p>创建新Python文件，并运行第一行测试代码</p><p>​<img src="/2025/01/29/Jupyter-Notebook/image-20250125194421-wre78l2.png" alt="image">​</p><p>​<img src="/2025/01/29/Jupyter-Notebook/image-20250125194624-s0xokbq.png" alt="image">​</p><p>‍</p><p>在本地目录检查新文件</p><p>​<img src="/2025/01/29/Jupyter-Notebook/image-20250125194833-rsd6qx2.png" alt="image">​</p><p>‍</p><p>Jupyter文件支持导出多种格式</p><p>​<img src="/2025/01/29/Jupyter-Notebook/image-20250125194946-9pknd69.png" alt="image">​</p><p>‍</p><p>输入<code>h</code>​查看所有快捷键</p><p>​<img src="/2025/01/29/Jupyter-Notebook/image-20250125194351-1zd7ao9.png" alt="image">​</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;‍&lt;/p&gt;
&lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://jupyter.org/&quot;&gt;Jupyter官网&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;</summary>
      
    
    
    
    <category term="AI/ML" scheme="http://example.com/categories/AI-ML/"/>
    
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="LLM" scheme="http://example.com/tags/LLM/"/>
    
  </entry>
  
  <entry>
    <title>AWS Terraform Section4 - Project</title>
    <link href="http://example.com/2024/06/30/AWS-Terraform-Section4-Project/"/>
    <id>http://example.com/2024/06/30/AWS-Terraform-Section4-Project/</id>
    <published>2024-06-30T02:27:54.000Z</published>
    <updated>2024-06-30T02:36:59.204Z</updated>
    
    <content type="html"><![CDATA[<p>‍</p><p>创建Git仓库用于存放Terraform代码</p><p>创建.gitignore</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># ignore local .terraform dir</span><br><span class="line">.terraform/*</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>‍</p><p>目标：创建一个EC2实例，并且在EC2里运行一个nginx docker容器</p><p>​<img src="/2024/06/30/AWS-Terraform-Section4-Project/image-20240627220019-nclsrwk.png" alt="image">​</p><p>‍</p><p>需要创建的AWS资源</p><p>*最好不要使用默认的AWS资源</p><ol><li>创建VPC</li><li>创建Subnet</li><li>创建Route Table &amp; Internet Gateway</li><li>创建EC2</li><li>部署nginx docker容器</li><li>创建Security Group(Firewall)，并允许ssh</li></ol><p>​<img src="/2024/06/30/AWS-Terraform-Section4-Project/image-20240627220353-vawsy7w.png" alt="image">​</p><p>‍</p><h2 id="创建VPC-Subnet"><a href="#创建VPC-Subnet" class="headerlink" title="创建VPC &amp; Subnet"></a>创建VPC &amp; Subnet</h2><p>terraform.tfvars</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">vpc_cidr_block = &quot;10.0.0.0/16&quot;</span><br><span class="line">subnet_cidr_block = &quot;10.0.0.0/24&quot;</span><br><span class="line">avail_zone = &quot;eu-west-3b&quot;</span><br><span class="line">env_prefix = &quot;dev&quot;</span><br></pre></td></tr></table></figure><p>‍</p><p>main.tf</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">provider &quot;aws&quot; &#123;</span><br><span class="line">    region = &quot;eu-west-3&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">variable vpc_cidr_block &#123;&#125;</span><br><span class="line">variable subnet_cidr_block &#123;&#125;</span><br><span class="line">variable avail_zone &#123;&#125;</span><br><span class="line">variable env_prefix &#123;&#125;</span><br><span class="line"></span><br><span class="line"># 创建VPC</span><br><span class="line">resource &quot;aws_vpc&quot; &quot;myapp-vpc&quot; &#123;</span><br><span class="line">  cidr_block = var.vpc_cidr_block</span><br><span class="line"></span><br><span class="line">  # vpc名称带有&quot;vpc&quot;前缀</span><br><span class="line">  tags = &#123;</span><br><span class="line">    Name: &quot;$&#123;var.env_prefix&#125;-vpc&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 创建Subnet</span><br><span class="line">resource &quot;aws_subnet&quot; &quot;myapp-subnet-1&quot; &#123;</span><br><span class="line">  vpc_id = aws_vpc.myapp-vpc.id</span><br><span class="line">  cidr_block = var.vpc_cidr_block</span><br><span class="line">  availability_zone = var.avail_zone</span><br><span class="line">  tags = &#123;</span><br><span class="line">    Name: &quot;$&#123;var.env_prefix&#125;-subnet-1&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>‍</p><p>在AWS上查看结果</p><p>​<img src="/2024/06/30/AWS-Terraform-Section4-Project/image-20240627221856-zq53z7g.png" alt="image">​</p><p>‍</p><h2 id="Route-Table"><a href="#Route-Table" class="headerlink" title="Route Table"></a>Route Table</h2><p>Route table决定了VPC转发的目的地</p><p>​<img src="/2024/06/30/AWS-Terraform-Section4-Project/image-20240629093707-g015c9a.png" alt="image">​</p><p>‍</p><p>在Terraform code不必根据执行的先后来编写代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"># 创建Route table</span><br><span class="line">resource &quot;aws_route_table&quot; &quot;myapp-route-table&quot; &#123;</span><br><span class="line">  vpc_id = aws_vpc.myapp-vpc.id</span><br><span class="line"></span><br><span class="line">  route = &#123;</span><br><span class="line">    cidr_block = &quot;0.0.0.0/0&quot;</span><br><span class="line">    gateway_id = aws_internet_gateway.myapp-igw.id</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  tags = &#123;</span><br><span class="line">    Name: &quot;$&#123;var.env_prefix&#125;-rtb&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># Route table gateway</span><br><span class="line">resource &quot;aws_internet_gateway&quot; &quot;myapp-igw&quot; &#123;</span><br><span class="line">  vpc_id = aws_vpc.myapp-vpc.id</span><br><span class="line"></span><br><span class="line">    tags = &#123;</span><br><span class="line">    Name: &quot;$&#123;var.env_prefix&#125;-igw&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>‍</p><p>执行结果</p><p>​<img src="/2024/06/30/AWS-Terraform-Section4-Project/image-20240629095048-bxhndn1.png" alt="image">​</p><p>‍</p><p>同时还要为Route table和Subnet创建关联</p><p>​<img src="/2024/06/30/AWS-Terraform-Section4-Project/image-20240629095414-dwpb65b.png" alt="image">​</p><p>Terraform code</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># Route table &amp; Subnect</span><br><span class="line">resource &quot;aws_route_table_association&quot; &quot;a-rtb-subnet&quot; &#123;</span><br><span class="line">  subnet_id = aws_subnet.myapp-subnet-1.id</span><br><span class="line">  route_table_id = aws_route_table.myapp-route-table.id</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>‍</p><h2 id="Security-Group-Firewall"><a href="#Security-Group-Firewall" class="headerlink" title="Security Group &amp; Firewall"></a>Security Group &amp; Firewall</h2><p>创建安全组</p><p>​<img src="/2024/06/30/AWS-Terraform-Section4-Project/image-20240629100936-owifg74.png" alt="image">​</p><p>Terraform code</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"># Security Group</span><br><span class="line">resource &quot;aws_security_group&quot; &quot;myapp-sg&quot; &#123;</span><br><span class="line">  name = &quot;myapp-sg&quot;</span><br><span class="line">  vpc_id = aws_vpc.myapp-vpc.id</span><br><span class="line">  </span><br><span class="line">  # Incoming traffic</span><br><span class="line">  ingress = &#123;</span><br><span class="line">    from_port = 22</span><br><span class="line">    to_port = 22</span><br><span class="line">    protocal = &quot;tcp&quot;</span><br><span class="line"></span><br><span class="line">    # IPs allow list</span><br><span class="line">    cidr_block = [&quot;your_allow_ip/32&quot;]</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  # Outgoing traffic</span><br><span class="line">  egress = &#123;</span><br><span class="line">    # Allowing all port and ip</span><br><span class="line">    from_port = 0</span><br><span class="line">    to_port = 0</span><br><span class="line">    protocal = &quot;-1&quot;</span><br><span class="line">    cidr_block = [&quot;0.0.0.0/0&quot;]</span><br><span class="line">    prefix_list_ids = []</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  tags = &#123;</span><br><span class="line">    Name: &quot;$&#123;var.env_prefix&#125;-sg&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>‍</p><p>执行结果</p><p>​<img src="/2024/06/30/AWS-Terraform-Section4-Project/image-20240629101551-0c9lczq.png" alt="image">​</p><p>‍</p><h2 id="EC2-AMI"><a href="#EC2-AMI" class="headerlink" title="EC2 &amp; AMI"></a>EC2 &amp; AMI</h2><p>Amazon Machine Image(AMI)是aws提供的操作系统镜像，用户可以根据AMI创建自己的操作系统实例。</p><p>​<img src="/2024/06/30/AWS-Terraform-Section4-Project/image-20240629102443-vk9vmei.png" alt="image">​</p><p>‍</p><p>Terraform code</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"># AWS AMI data definition</span><br><span class="line">data &quot;aws_ami&quot; &quot;latest_aws-linux-image&quot; &#123;</span><br><span class="line">  # Always get latest image</span><br><span class="line">  most_recent = true</span><br><span class="line"></span><br><span class="line">  owners = [&quot;amazon&quot;]</span><br><span class="line">  </span><br><span class="line">  # filter image name with regrex</span><br><span class="line">  filter &#123;</span><br><span class="line">    name = &quot;name&quot;</span><br><span class="line">    values = [&quot;amzn2-ami-hvm-*-x86_64_gp2&quot;]</span><br><span class="line">  &#125;</span><br><span class="line">  filter &#123;</span><br><span class="line">    name = &quot;virtualization-type&quot;</span><br><span class="line">    values = [&quot;hvm&quot;]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># Only test for ami id output</span><br><span class="line"># When execute &quot;terraform plan&quot;, can see value from console</span><br><span class="line"># output &quot;name&quot; &#123;</span><br><span class="line">#   value = data.aws_ami.latest_aws-linux-image</span><br><span class="line"># &#125;</span><br><span class="line"></span><br><span class="line"># 创建aws key pair</span><br><span class="line">resource &quot;aws_key_pair&quot; &quot;ssh-key&quot; &#123;</span><br><span class="line">  key_name = &quot;server-key&quot;</span><br><span class="line"></span><br><span class="line">  # 引用文件</span><br><span class="line">  public_key = &quot;$&#123;file(&quot;/User/xxx/.ssh/key_file.pub&quot;)&#125;&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 创建操作系统实例 - EC2</span><br><span class="line">resource &quot;aws_instance&quot; &quot;myapp-server&quot; &#123;</span><br><span class="line">  # Id of ami</span><br><span class="line">  ami = data.aws_ami.latest_aws-linux-image.id</span><br><span class="line">  instance_type = &quot;t2.micro&quot;</span><br><span class="line"></span><br><span class="line">  # 引用已经创建好的VPC &amp; Subnect</span><br><span class="line">  subnet_id = aws_subnet.myapp-subnet-1.id</span><br><span class="line">  vpc_security_group_ids = [aws_default_security_group.default-sg.id]</span><br><span class="line">  availability_zone = var.avail_zone</span><br><span class="line">  associate_public_ip_address = true</span><br><span class="line"></span><br><span class="line">  # Server key pair, permission should be 400</span><br><span class="line">  # AWS will reject ssh request if permission not set correctly</span><br><span class="line">  # It&#x27;s generate from AWS console, provide the key file name</span><br><span class="line">  key_name = aws_key_pair.ssh-key.key_name </span><br><span class="line">  </span><br><span class="line">  tags = &#123;</span><br><span class="line">    Name = &quot;$&#123;var.env_prefix&#125;-server&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>‍</p><p>等待EC2创建</p><p>​<img src="/2024/06/30/AWS-Terraform-Section4-Project/image-20240629145356-5h7sdlf.png" alt="image">​</p><p>‍</p><h3 id="EC2-initialize-script"><a href="#EC2-initialize-script" class="headerlink" title="EC2 initialize script"></a>EC2 initialize script</h3><p>添加 <code>user_data=</code>​，设置EC2初始化时自动运行脚本</p><p>下图中的代码块只会在初始化的时候被执行一次</p><p>​<img src="/2024/06/30/AWS-Terraform-Section4-Project/image-20240629152214-ngas3tc.png" alt="image">​</p><p>‍</p><p>如果需要执行定义好的脚本而不是代码块，可以使用如下方式</p><p>​<img src="/2024/06/30/AWS-Terraform-Section4-Project/image-20240629152738-j165ka4.png" alt="image">​</p><p>‍</p><p><strong>另一种方式：使用Provisioner执行脚本</strong></p><p>使用<code>remote-exec</code>​在EC2上执行脚本</p><p>​<img src="/2024/06/30/AWS-Terraform-Section4-Project/image-20240629154524-8ou2ulm.png" alt="image">​</p><p>‍</p><p>可以使用<code>local-exec</code>​在本地机器上执行命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">provisioner &quot;local-exec&quot; &#123;</span><br><span class="line">  command = &quot;echo $&#123;self.public_ip&#125; &gt; output.txt&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>‍</p><p>Terraform文档上说明<code>Provisioners</code>​是没有其他选择时的最后手段</p><ul><li>尽量采用<code>user_data</code>​而不是<code>Provisioners</code>​</li><li>尽量使用”local provider”取代<code>local-exec</code>​</li><li>尽量采用配置管理工具取代<code>Provisioners</code>​，如Ansible, Jenkins</li></ul><p>实际上<code>Provisioners</code>​打破了Terraform的概念。Terraform能通过相同的组件状态总是提供一致的返回结果，但是<code>Provisioners</code>​执行的脚本却是未知的，Terraform无法获取到其中的状态。</p><p>​<img src="/2024/06/30/AWS-Terraform-Section4-Project/image-20240629155206-cpb6z6n.png" alt="image">​</p><p>‍</p><p>一种可能的情况是，Provisioner中的脚本执行错误，此时terraform不会返回具体的状态信息。</p><p>这种状态下无法得知EC2具体是否被创建</p><p>​<img src="/2024/06/30/AWS-Terraform-Section4-Project/image-20240629160318-0x1irb3.png" alt="image">​</p><p>‍</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;‍&lt;/p&gt;
&lt;p&gt;创建Git仓库用于存放Terraform代码&lt;/p&gt;
&lt;p&gt;创建.gitignore&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span clas</summary>
      
    
    
    
    <category term="AWS Terraform" scheme="http://example.com/categories/AWS-Terraform/"/>
    
    
    <category term="AWS" scheme="http://example.com/tags/AWS/"/>
    
  </entry>
  
  <entry>
    <title>AWS Terraform Section3 - Input and Output</title>
    <link href="http://example.com/2024/06/29/AWS-Terraform-Section3-Input-and-Output/"/>
    <id>http://example.com/2024/06/29/AWS-Terraform-Section3-Input-and-Output/</id>
    <published>2024-06-29T07:20:11.000Z</published>
    <updated>2024-06-30T02:24:49.755Z</updated>
    
    <content type="html"><![CDATA[<p>‍</p><h2 id="Terraform-output"><a href="#Terraform-output" class="headerlink" title="Terraform output"></a>Terraform output</h2><p>示例</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">resource &quot;aws_subnet&quot; &quot;dev-subnet-1&quot; &#123;</span><br><span class="line">    # 指定subnet所属的VPC</span><br><span class="line">    # 目前VPC还没创建，所以需要动态引用定义的资源</span><br><span class="line">    vpc_id = aws_pvc.development-vpc.id</span><br><span class="line"></span><br><span class="line">    # 定义VPC地址范围的子集</span><br><span class="line">    cidr_block = &quot;10.0.10.0/24&quot;</span><br><span class="line"></span><br><span class="line">    availability_zone = &quot;eu-west-3a&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">output &quot;dev-subnet-id&quot; &#123;</span><br><span class="line">    value = aws_subnet.dev-subnet-1.id</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>‍</p><p>执行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">terraform plan</span><br></pre></td></tr></table></figure><p>‍</p><p>可以看到控制台输出了<code>output</code>​中定义的值</p><p>​<img src="/2024/06/29/AWS-Terraform-Section3-Input-and-Output/image-20240627085444-muswq4x.png" alt="image">​</p><p>‍</p><p>*可以使用vscode编写Terraform code，该工具支持打开终端</p><p>​<img src="/2024/06/29/AWS-Terraform-Section3-Input-and-Output/image-20240629162626-a5xvcbc.png" alt="image">​</p><p>‍</p><h2 id="Terraform-input"><a href="#Terraform-input" class="headerlink" title="Terraform input"></a>Terraform input</h2><p>在Terraform中引用变量</p><ul><li>通过<code>default</code>​给定默认值</li><li>通过<code>type</code>​设置变量类型，如list(string), string, object等</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">variable &quot;subnet_cidr_block&quot; &#123;</span><br><span class="line">    description = &quot;subnet cidr block&quot;</span><br><span class="line">default=&quot;10.0.10.0/24&quot;</span><br><span class="line">type = string</span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">resource &quot;aws_subnet&quot; &quot;dev-subnet-1&quot; &#123;</span><br><span class="line">    vpc_id = aws_pvc.development-vpc.id</span><br><span class="line">    cidr_block = var.subnet_cidr_block</span><br><span class="line"></span><br><span class="line">    availability_zone = &quot;eu-west-3a&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>‍</p><p>Object示例</p><p>terraform.tfvars</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cidr_blocks = [</span><br><span class="line">&#123;cidr_block-=&quot;10.0.0.0/16&quot;, name=&quot;dev-vpc&quot;&#125;, </span><br><span class="line">&#123;cidr_block-=&quot;10.0.0.0/16&quot;, name=&quot;dev-vpc&quot;&#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>‍</p><p>变量定义方式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">variable &quot;cidr_blocks&quot; &#123;</span><br><span class="line">  type = list(object(&#123;</span><br><span class="line">    cidr_block = string</span><br><span class="line">    name = string</span><br><span class="line">  &#125;))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>‍</p><p>引用方式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">resource &quot;aws_pvc&quot; &quot;development-vpc&quot; &#123;</span><br><span class="line"></span><br><span class="line">    cider_block = var.cider_block[0].cider_block</span><br><span class="line">    tags = &#123;</span><br><span class="line">        Name: var.cider_block[0].name</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>‍</p><h3 id="变量的赋值方式"><a href="#变量的赋值方式" class="headerlink" title="变量的赋值方式"></a>变量的赋值方式</h3><h4 id="通过控制台输入"><a href="#通过控制台输入" class="headerlink" title="通过控制台输入"></a>通过控制台输入</h4><p>直接执行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">terraform apply</span><br></pre></td></tr></table></figure><p>‍</p><p>然后在控制台输入内容</p><p>​<img src="/2024/06/29/AWS-Terraform-Section3-Input-and-Output/image-20240627090358-a0f77fr.png" alt="image">​</p><p>‍</p><h4 id="命令行传参数"><a href="#命令行传参数" class="headerlink" title="命令行传参数"></a>命令行传参数</h4><p>在控制台执行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">terraform -var &quot;subnet_cidr_block=10.0.30.0/24&quot;</span><br></pre></td></tr></table></figure><p>‍</p><h4 id="（常用）定义变量文件"><a href="#（常用）定义变量文件" class="headerlink" title="（常用）定义变量文件"></a>（常用）定义变量文件</h4><p>当执行如下命令时</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">terraform apply -var-file terraform-dev.tfvars --target=module.xxx</span><br></pre></td></tr></table></figure><p>变量传递链路如下</p><p>​<code>*.tfvars</code>​ -&gt; variable.tf -&gt; main.tf -&gt; output.tf</p><p>‍</p><p>例如：</p><p>创建一个<code>*.tfvars</code>​的文件，例如terraform.tfvars</p><p>Terraform能自动找到<code>tfvars</code>​并识别为变量文件</p><p>​<img src="/2024/06/29/AWS-Terraform-Section3-Input-and-Output/image-20240627091135-d3dfmv2.png" alt="image">​</p><p>‍</p><p>执行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">terraform apply</span><br></pre></td></tr></table></figure><p>‍</p><p>此时不需要额外输入变量的值，Terraform会自动找到变量并且赋值</p><p>‍</p><p>推荐把变量文件根据环境来命名</p><p>例如 terraform-dev.tfvars</p><p>​<img src="/2024/06/29/AWS-Terraform-Section3-Input-and-Output/image-20240627091655-ofb3joh.png" alt="image">​</p><p>指定变量文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">terraform apply -var-file terraform-dev.tfvars</span><br></pre></td></tr></table></figure><p>‍</p><h2 id="AWS-Credential"><a href="#AWS-Credential" class="headerlink" title="AWS Credential"></a>AWS Credential</h2><p>不推荐以下方式明文写入access key</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">provider &quot;aws&quot; &#123;</span><br><span class="line">    region = &quot;eu-west-3&quot; # 取决于购买的EC2实例所属的区域</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">    不推荐hardcode明文的key</span><br><span class="line">    **/</span><br><span class="line">    access_key = &quot;&quot;</span><br><span class="line">    secret_key = &quot;&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>‍</p><p>1.可以使用环境变量的方式</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">export AWS_SECRET_ACCESS = &quot;XXXX&quot;</span><br><span class="line">export AWS_ACCESS_KEY_ID = &quot;XXXX&quot;</span><br></pre></td></tr></table></figure><p>‍</p><p>然后直接执行terraform命令，会自动连接到AWS</p><p>​<img src="/2024/06/29/AWS-Terraform-Section3-Input-and-Output/image-20240627212211-b63szv1.png" alt="image">​</p><p>‍</p><p>2.在文件中存储以便全局调用</p><p>存储位置： <code>~/.aws/credentials</code>​</p><p>可以直接输入 aws configure进行配置，自动存储到 <code>~/.aws/credentials</code>​</p><p>​<img src="/2024/06/29/AWS-Terraform-Section3-Input-and-Output/image-20240627212506-aehf3ue.png" alt="image">​</p><p>‍</p><p>也可以设置AWS_DEFAULT_REGION指定默认的区域</p><p>​<img src="/2024/06/29/AWS-Terraform-Section3-Input-and-Output/image-20240627212919-krbqr1f.png" alt="image">​</p><p>‍</p><p>3.可以通过安装adfs登录AWS</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python install adf-assume</span><br></pre></td></tr></table></figure><p>‍</p><p>执行以下脚本一键连接到AWS</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line">source [python_env]</span><br><span class="line">echo -n &quot;Input AWS password: &quot;</span><br><span class="line">read -s AWS_PASSWORD</span><br><span class="line">export AWS_PROFILE=saml</span><br><span class="line">adfs-assume -u $ACCOUNT --domain=$DOMAIN</span><br></pre></td></tr></table></figure><h2 id="Global-Variable"><a href="#Global-Variable" class="headerlink" title="Global Variable"></a>Global Variable</h2><p>命名规则必须为：<code>TF_VAR_xxx</code>​</p><p>‍</p><p>例如，需要引用操作系统当前环境下的某个变量</p><p>​<img src="/2024/06/29/AWS-Terraform-Section3-Input-and-Output/image-20240627213207-7vyobna.png" alt="image">​</p><p>在Terraform中引用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">variable avail_zone &#123;&#125;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">resource &quot;aws_subnet&quot; &quot;dev-subnet-1&quot; &#123;</span><br><span class="line">  availability_zone = var.avail_zone</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>‍</p><p>执行结果</p><p>可以看到自动识别到了变量 avail_zone 自动匹配到了 TF_VAR_avail_zone</p><p>​<img src="/2024/06/29/AWS-Terraform-Section3-Input-and-Output/image-20240627213338-wu1puwy.png" alt="image">​</p><p>‍</p><h2 id="Terraform-Module"><a href="#Terraform-Module" class="headerlink" title="Terraform Module"></a>Terraform Module</h2><p>通过模块的方式编写，而不是将所有的代码都放在同一个<code>tf</code>​文件中</p><p>一个module应该将多个resource整合起来，方便相同的组件重用</p><p>例如VPC、Subnet、Route table、Internate gateway都应该放到同一个module中，方便创建EC2时直接调用</p><p>​<img src="/2024/06/29/AWS-Terraform-Section3-Input-and-Output/image-20240629160704-lusjo4f.png" alt="image">​</p><p>‍</p><p>同时Terraform也有一些现成的module方便参考，不需要重复创造功能相同的模块</p><p><a href="https://registry.terraform.io/browse/modules">https://registry.terraform.io/browse/modules</a></p><p>‍</p><h2 id="Terraform-state"><a href="#Terraform-state" class="headerlink" title="Terraform state"></a>Terraform state</h2><p>Terraform plan会根据state文件生成执行计划</p><p>最好把<code>tfstate</code>​存放起来远程访问，确保Jenkins和团队成员本地执行都能读取到最新的状态</p><p>AWS可以使用S3存储</p><p>​<img src="/2024/06/29/AWS-Terraform-Section3-Input-and-Output/image-20240629165547-mwpen00.png" alt="image">​</p><p>‍</p><p>例如</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 创建S3</span><br><span class="line">terraform &#123;</span><br><span class="line">  required_version = &quot;&gt;=0.12&quot;</span><br><span class="line">  backend &quot;s3&quot; &#123;</span><br><span class="line">    bucket = &quot;myapp-bucket&quot;</span><br><span class="line">    key = &quot;myapp/state.tfstate&quot;</span><br><span class="line">    region = &quot;eu-west-3&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>‍</p><p>在创建的时候会询问是否把状态存储到S3<img src="/2024/06/29/AWS-Terraform-Section3-Input-and-Output/image-20240629170359-36haj4u.png" alt="image">​</p><p>‍</p><p>此时state文件将交给AWS控制，Jenkins和开发人员本地会自动使用S3的state文件</p><p>​<img src="/2024/06/29/AWS-Terraform-Section3-Input-and-Output/image-20240629170604-2elttg6.png" alt="image">​</p><p>‍</p><p>使用如下命令验证，不同的环境执行应该得到相同的结果</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">terraform state list</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;‍&lt;/p&gt;
&lt;h2 id=&quot;Terraform-output&quot;&gt;&lt;a href=&quot;#Terraform-output&quot; class=&quot;headerlink&quot; title=&quot;Terraform output&quot;&gt;&lt;/a&gt;Terraform output&lt;/h2&gt;&lt;p&gt;示例&lt;/p</summary>
      
    
    
    
    <category term="AWS Terraform" scheme="http://example.com/categories/AWS-Terraform/"/>
    
    
    <category term="AWS" scheme="http://example.com/tags/AWS/"/>
    
  </entry>
  
  <entry>
    <title>AWS Terraform Section2 - VPC</title>
    <link href="http://example.com/2024/06/23/AWS-Terraform-Section2-VPC/"/>
    <id>http://example.com/2024/06/23/AWS-Terraform-Section2-VPC/</id>
    <published>2024-06-23T03:20:03.000Z</published>
    <updated>2024-06-30T02:29:24.441Z</updated>
    
    <content type="html"><![CDATA[<h2 id="VPC-Subnet"><a href="#VPC-Subnet" class="headerlink" title="VPC &amp; Subnet"></a>VPC &amp; Subnet</h2><p>​<img src="/2024/06/23/AWS-Terraform-Section2-VPC/image-20240621090538-0t4qsb0.png" alt="image">​</p><p>‍</p><p>每当一个账户在区域创建时，都会拥有一个AWS VPC（Virtual Private Cloud）</p><p>​<img src="/2024/06/23/AWS-Terraform-Section2-VPC/image-20240621090636-8pfda8m.png" alt="image">​</p><p>‍</p><p>跟随区域，跟随AWS账户默认创建，用于保护每个账户的私有资源访问权限</p><p>例如不同的账户可能创建在同一台物理服务器上，但是不同的账号间的资源访问是互相隔离的</p><p>​<img src="/2024/06/23/AWS-Terraform-Section2-VPC/image-20240621091018-bj1wwsq.png" alt="image">​</p><p>‍</p><p>控制台可以看到默认创建的VPC</p><p>​<img src="/2024/06/23/AWS-Terraform-Section2-VPC/image-20240621090729-glyury5.png" alt="image">​</p><p>‍</p><p>VPC代表了公司的网络架构，包括网络配置、路由、防火墙等</p><p>VPC由不同的<code>Availability Zone</code>​组成，具体指代实际的物理服务器所在的数据中心</p><p>例如 我在中国区，可能会有华南、华中、华北3个数据中心都有虚拟服务器运行，那么就会有3个<code>Availability Zone</code>​，也就会有3个subnet</p><p>​<img src="/2024/06/23/AWS-Terraform-Section2-VPC/image-20240621091717-r6rsa9e.png" alt="image">​</p><p>‍</p><p>当我们需要从外部访问资源时，需要配置一个公共IP地址，可以使用<code>Internet Gateway</code>​</p><p>当我们需要控制外部对VPC访问权限，可以配置防火墙</p><p>​<img src="/2024/06/23/AWS-Terraform-Section2-VPC/image-20240621092301-v45hvvl.png" alt="image">​</p><p>‍</p><h3 id="配置外部访问"><a href="#配置外部访问" class="headerlink" title="配置外部访问"></a>配置外部访问</h3><p>设置防火墙规则和安全组</p><p>VPC -&gt; SECURITY</p><p>​<img src="/2024/06/23/AWS-Terraform-Section2-VPC/image-20240621092558-4chx80a.png" alt="image">​</p><p>‍</p><h2 id="添加VPC资源"><a href="#添加VPC资源" class="headerlink" title="添加VPC资源"></a>添加VPC资源</h2><p>资源命名规则:  aws_[resource_name]</p><p>‍</p><p>所有的语法示例都能在文档中找到</p><p><a href="https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/vpc">https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/vpc</a></p><p>​<img src="/2024/06/23/AWS-Terraform-Section2-VPC/image-20240623100755-9y6u10a.png" alt="image">​</p><p>‍</p><p>代码示例</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">provider &quot;aws&quot; &#123;</span><br><span class="line">    region = &quot;eu-west-3&quot; # 取决于购买的EC2实例所属的区域</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">    不推荐hardcode明文的key</span><br><span class="line">    **/</span><br><span class="line">    access_key = &quot;&quot;</span><br><span class="line">    secret_key = &quot;&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 资源命名规则 - aws_resource</span><br><span class="line"># 创建名为 development-vpc的VPC</span><br><span class="line">resource &quot;aws_pvc&quot; &quot;development-vpc&quot; &#123;</span><br><span class="line"></span><br><span class="line">    # VPC地址范围</span><br><span class="line">    cider_block = &quot;10.0.0.0/16&quot;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 创建名为 dev-subnet-1 的subnet</span><br><span class="line">resource &quot;aws_subnet&quot; &quot;dev-subnet-1&quot; &#123;</span><br><span class="line">    # 指定subnet所属的VPC</span><br><span class="line">    # 目前VPC还没创建，所以需要动态引用定义的资源</span><br><span class="line">    vpc_id = aws_pvc.development-vpc.id</span><br><span class="line"></span><br><span class="line">    # 定义VPC地址范围的子集</span><br><span class="line">    cidr_block = &quot;10.0.10.0/24&quot;</span><br><span class="line"></span><br><span class="line">    availability_zone = &quot;eu-west-3a&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>‍</p><p>通过执行如下命令应用到AWS</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">terraform apply</span><br></pre></td></tr></table></figure><p>‍</p><p>执行命令以后可以预览terraform的执行计划，然后输入<code>yes</code>​确认该计划</p><p>​<img src="/2024/06/23/AWS-Terraform-Section2-VPC/image-20240623101644-fx9ybbf.png" alt="image">​</p><p>‍</p><h3 id="DataSource"><a href="#DataSource" class="headerlink" title="DataSource"></a>DataSource</h3><p>假如我们需要从已有的VPC中创建subnet，则需要先拉取AWS已有的VPC信息，然后引用其id</p><p>​<img src="/2024/06/23/AWS-Terraform-Section2-VPC/image-20240623102401-7sfq2ts.png" alt="image">​</p><p>‍</p><p>示例</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"># 拉取aws数据</span><br><span class="line"># 定义变量名为 existing_vpc 的vpc数据源</span><br><span class="line">data &quot;aws_vpc&quot; &quot;existing_vpc&quot; &#123;</span><br><span class="line"></span><br><span class="line">    # 拉取默认的vpc</span><br><span class="line">    default = true</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 创建名为 dev-subnet-1 的subnet</span><br><span class="line">resource &quot;aws_subnet&quot; &quot;dev-subnet-2&quot; &#123;</span><br><span class="line">    # 从已有的vpc中获取id</span><br><span class="line">    vpc_id = data.aws_vpc.existing_vpc.id</span><br><span class="line"></span><br><span class="line">    # 定义VPC地址范围的子集</span><br><span class="line">    # 不应与vpc中的已有subnet ip范围重复</span><br><span class="line">    cidr_block = &quot;172.31.48.0/20&quot;</span><br><span class="line"></span><br><span class="line">    availability_zone = &quot;eu-west-3a&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>‍</p><p>执行 terraform apply</p><p>​<img src="/2024/06/23/AWS-Terraform-Section2-VPC/image-20240623103153-6tu25vy.png" alt="image">​</p><p>‍</p><h2 id="修改-删除资源"><a href="#修改-删除资源" class="headerlink" title="修改 &amp; 删除资源"></a>修改 &amp; 删除资源</h2><p>继续以AWS VPC为例</p><h3 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h3><p>使用关键字<code>tags</code>​，它存在于所有的资源中</p><p>例如，指定VPC名称</p><p>​<img src="/2024/06/23/AWS-Terraform-Section2-VPC/image-20240623104620-e98o9gy.png" alt="image">​</p><p>在应用tf文件的时候，<code>~</code>​代表资源修改，<code>+</code>​代表新增</p><p>并且在执行计划中有8个属性保持不变</p><p>​<img src="/2024/06/23/AWS-Terraform-Section2-VPC/image-20240623105005-f2r9sza.png" alt="image">​</p><p>‍</p><p>将会在控制台显示名称</p><p>​<img src="/2024/06/23/AWS-Terraform-Section2-VPC/image-20240623104640-82dkf08.png" alt="image">​</p><p>‍</p><p>如果删除掉<code>tags</code>​，那么在执行计划中会以<code>-</code>​显示</p><p>​<img src="/2024/06/23/AWS-Terraform-Section2-VPC/image-20240623105243-u2uvsfs.png" alt="image">​</p><p>‍</p><h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><h4 id="修改tf"><a href="#修改tf" class="headerlink" title="修改tf"></a>修改tf</h4><p> *<strong>推荐使用配置文件的方式，配置文件方便代码管理</strong></p><p>如果把<code>*.tf</code>​中的subnet删除，执行 terraform apply，则意味着删除该subnet</p><p>​<img src="/2024/06/23/AWS-Terraform-Section2-VPC/image-20240623105535-ysouex2.png" alt="image">​</p><p>‍</p><p>执行计划如下</p><p>可以看到整个资源都标有<code>-</code>​，因为这个资源即将被删除</p><p>​<img src="/2024/06/23/AWS-Terraform-Section2-VPC/image-20240623105738-ldw0dxg.png" alt="image">​</p><p>‍</p><h4 id="terraform-destroy"><a href="#terraform-destroy" class="headerlink" title="terraform destroy"></a>terraform destroy</h4><p>执行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">terraform destroy -target [resource_type] [resource_name]</span><br></pre></td></tr></table></figure><p>‍</p><p>例如</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">terraform destroy -target aws_subnet dev-subnet-2</span><br></pre></td></tr></table></figure><p>‍</p><p>可以看到执行计划也是类似的</p><p>​<img src="/2024/06/23/AWS-Terraform-Section2-VPC/image-20240623110048-4j3479w.png" alt="image">​</p><p>‍</p><h2 id="对比差异"><a href="#对比差异" class="headerlink" title="对比差异"></a>对比差异</h2><p>检查aws和tf文件的差异</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">terraform plan</span><br></pre></td></tr></table></figure><p>示例</p><p>​<img src="/2024/06/23/AWS-Terraform-Section2-VPC/image-20240623110453-hpt2fxs.png" alt="image">​</p><p>‍</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>provider: 用于导入一组或一段代码，类似import library</li><li>resource: 类似于从库中调用一段函数</li><li>data: 类似于返回已经存在的资源的函数</li></ul><p>​<img src="/2024/06/23/AWS-Terraform-Section2-VPC/image-20240623103603-vixezkm.png" alt="image">​</p><p>‍</p><p>需要注意的是，这里的用户必须具有创建资源所必须的权限<img src="/2024/06/23/AWS-Terraform-Section2-VPC/image-20240623103705-nm2hmts.png" alt="image">​</p><p>‍</p><p>另外，terraform在apply相同的tf文件的时候，会自动检查所有组件的状态</p><p>如果组件已经存在，则terraform不会再执行操作</p><p>也就是说每当应用相同的配置时，总会得到一样的结果。用户不需要记住当前组件的状态，也不会意外地破坏某些原有的组件。</p><p>‍</p><p>‍</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;VPC-Subnet&quot;&gt;&lt;a href=&quot;#VPC-Subnet&quot; class=&quot;headerlink&quot; title=&quot;VPC &amp;amp; Subnet&quot;&gt;&lt;/a&gt;VPC &amp;amp; Subnet&lt;/h2&gt;&lt;p&gt;​&lt;img src=&quot;/2024/06/23/AWS</summary>
      
    
    
    
    <category term="AWS Terraform" scheme="http://example.com/categories/AWS-Terraform/"/>
    
    
    <category term="AWS" scheme="http://example.com/tags/AWS/"/>
    
  </entry>
  
  <entry>
    <title>AWS Terraform Section1 - 简介</title>
    <link href="http://example.com/2024/06/23/AWS-Terraform-Section1/"/>
    <id>http://example.com/2024/06/23/AWS-Terraform-Section1/</id>
    <published>2024-06-23T03:13:21.000Z</published>
    <updated>2024-06-30T02:31:47.218Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>官网 <a href="https://developer.hashicorp.com/terraform/intro">https://developer.hashicorp.com/terraform/intro</a></p><p>Infrastructure as Code tool.</p><p>Terraform本质上是通过调用API实现对各种服务器资源的CRUD操作。</p><p>​<img src="/2024/06/23/AWS-Terraform-Section1/image-20240621083744-cph8xt3.png" alt="image">​</p><p>Terraform主要是用于架构的编排，譬如创建EC2，设置VPC，安装docker等，而且其中的顺序必须要遵循一定的顺序。</p><p>另一个IaC工具是Ansible。Ansible可以用来配置基础设置、部署应用、安装和更新应用等</p><p>Terraform创建并测试完后，可以精确自动化地复制更多的环境。</p><p>​<img src="/2024/06/23/AWS-Terraform-Section1/image-20240617213010-g7rnt9g.png" alt="image">​</p><p>‍<img src="/2024/06/23/AWS-Terraform-Section1/image-20240629153340-5rpwr4n.png" alt="image">​</p><p>‍</p><h2 id="安装Terraform"><a href="#安装Terraform" class="headerlink" title="安装Terraform"></a>安装Terraform</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install terraform</span><br></pre></td></tr></table></figure><p>‍</p><p>查看Terraform版本号</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">terraform -v</span><br></pre></td></tr></table></figure><p>‍</p><p>安装结果如下</p><p>​<img src="/2024/06/23/AWS-Terraform-Section1/image-20240617213642-gi9trte.png" alt="image">​</p><p>‍</p><h2 id="初始化AWS环境"><a href="#初始化AWS环境" class="headerlink" title="初始化AWS环境"></a>初始化AWS环境</h2><ul><li>连接到AWS账户</li><li>创建VPC</li><li>创建Subnet</li></ul><h3 id="本地环境设置"><a href="#本地环境设置" class="headerlink" title="本地环境设置"></a>本地环境设置</h3><p>创建名为<code>Terraformed</code>​的文件夹，并在其中创建文件<code>main.tf</code>​</p><p>​<code>*.tf</code>​是Terraform文件的标准命名方式</p><p>​<img src="/2024/06/23/AWS-Terraform-Section1/image-20240617214824-h3zyfo9.png" alt="image">​</p><p>‍</p><p>使用Visual Studio Code打开<code>main.tf</code>​，并且安装Terraform官方插件。</p><p>​<img src="/2024/06/23/AWS-Terraform-Section1/image-20240617215049-jdiqpkh.png" alt="image">​</p><p>‍</p><p>安装完插件以后可以在VS Code中更方便地编辑Terraform文件</p><p>‍</p><h3 id="注册AWS云账号"><a href="#注册AWS云账号" class="headerlink" title="注册AWS云账号"></a>注册AWS云账号</h3><p>注册完毕后可以免费使用AWS云计算资源</p><p>​<img src="/2024/06/23/AWS-Terraform-Section1/image-20240617215341-n63hg26.png" alt="image">​</p><p>‍</p><p>注册完毕后会自动创建root用户，此时应该通过IAM创建一个权限较低的管理员账户，并通过管理员账户管理普通账户。</p><p>​<img src="/2024/06/23/AWS-Terraform-Section1/image-20240621082633-pze0qoe.png" alt="image">​</p><p>​<img src="/2024/06/23/AWS-Terraform-Section1/image-20240621082734-ltw8n4d.png" alt="image">​</p><p>添加group或者选择”Attach existing policies directly”勾选需要赋予的权限</p><p>​<img src="/2024/06/23/AWS-Terraform-Section1/image-20240621082909-kl5bllb.png" alt="image">​</p><p>‍</p><h3 id="Terraform连接到AWS"><a href="#Terraform连接到AWS" class="headerlink" title="Terraform连接到AWS"></a>Terraform连接到AWS</h3><p>​<img src="/2024/06/23/AWS-Terraform-Section1/image-20240621083520-o2agtmi.png" alt="image">​</p><p>‍</p><p>Providers作为Terraform中最重要的关键字，用于标识需要调用的远程云服务供应商API</p><p>Providers列表如下，支持许多的云服务供应商</p><p>支持的资源供应商列表 <a href="https://registry.terraform.io/browse/providers">https://registry.terraform.io/browse/providers</a></p><p>包括云服务、Devops工具(Ansible、Github、Grafana、Jenkins、Kubernetes …)等</p><p>​<img src="/2024/06/23/AWS-Terraform-Section1/image-20240621084141-ejuxa61.png" alt="image">​</p><p>‍</p><p>通过以下*.tf文件，将以编程的方式连接到AWS服务</p><p>AWS语法和源码示例</p><p><a href="https://registry.terraform.io/providers/hashicorp/aws/latest">https://registry.terraform.io/providers/hashicorp/aws/latest</a></p><p><a href="https://registry.terraform.io/providers/hashicorp/aws/latest/docs">https://registry.terraform.io/providers/hashicorp/aws/latest/docs</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">provider &quot;aws&quot; &#123;</span><br><span class="line">    region = &quot;eu-west-3&quot; # 取决于购买的EC2实例所属的区域</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">    不推荐hardcode明文的key</span><br><span class="line">    **/</span><br><span class="line">    access_key = &quot;&quot;</span><br><span class="line">    secret_key = &quot;&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>‍</p><p>*.tf文件是一个定义文件，编写完毕后需要执行以下命令安装相应的依赖(类似npm&#x2F;maven instal)</p><p>进入<code>*.tf</code>​所在的文件夹</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">terraform init</span><br></pre></td></tr></table></figure><p>‍</p><p>运行结果</p><p>​<img src="/2024/06/23/AWS-Terraform-Section1/image-20240621090125-g8a8waj.png" alt="image">​</p><p>‍</p><p>可以看到新文件生成</p><p>​<img src="/2024/06/23/AWS-Terraform-Section1/image-20240621090308-ajssusd.png" alt="image">​</p><p>‍</p><h3 id="查看terraform状态"><a href="#查看terraform状态" class="headerlink" title="查看terraform状态"></a>查看terraform状态</h3><p>执行 terraaform state，以生成<code>tfstate</code>​文件</p><p>该文件可以记录当前terraform资源的状态列表</p><p>​<img src="/2024/06/23/AWS-Terraform-Section1/image-20240627084650-6jzruh4.png" alt="image">​</p><p>‍</p><p>​<img src="/2024/06/23/AWS-Terraform-Section1/image-20240627084208-hc9n0md.png" alt="image">​</p><p>‍</p><p>terraform state的子命令</p><p>​<img src="/2024/06/23/AWS-Terraform-Section1/image-20240627084312-2xv492o.png" alt="image">​</p><p>‍</p><h2 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h2><p>官网 <a href="https://developer.hashicorp.com/terraform/intro">https://developer.hashicorp.com/terraform/intro</a></p><p>Infrastructure as Code tool.</p><p>Terraform本质上是通过调用API实现对各种服务器资源的CRUD操作。</p><p>​<img src="/2024/06/23/AWS-Terraform-Section1/image-20240621083744-cph8xt3.png" alt="image">​</p><p>Terraform主要是用于架构的编排，譬如创建EC2，设置VPC，安装docker等，而且其中的顺序必须要遵循一定的顺序。</p><p>另一个IaC工具是Ansible。Ansible可以用来配置基础设置、部署应用、安装和更新应用等</p><p>​<img src="/2024/06/23/AWS-Terraform-Section1/image-20240617213010-g7rnt9g.png" alt="image">​</p><p>‍</p><p>Terraform创建并测试完后，可以精确自动化地复制更多的环境。</p><p>‍</p><h2 id="安装Terraform-1"><a href="#安装Terraform-1" class="headerlink" title="安装Terraform"></a>安装Terraform</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install terraform</span><br></pre></td></tr></table></figure><p>‍</p><p>查看Terraform版本号</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">terraform -v</span><br></pre></td></tr></table></figure><p>‍</p><p>安装结果如下</p><p>​<img src="/2024/06/23/AWS-Terraform-Section1/image-20240617213642-gi9trte.png" alt="image">​</p><p>‍</p><h2 id="初始化AWS环境-1"><a href="#初始化AWS环境-1" class="headerlink" title="初始化AWS环境"></a>初始化AWS环境</h2><ul><li>连接到AWS账户</li><li>创建VPC</li><li>创建Subnet</li></ul><h3 id="本地环境设置-1"><a href="#本地环境设置-1" class="headerlink" title="本地环境设置"></a>本地环境设置</h3><p>创建名为<code>Terraformed</code>​的文件夹，并在其中创建文件<code>main.tf</code>​</p><p>​<code>*.tf</code>​是Terraform文件的标准命名方式</p><p>​<img src="/2024/06/23/AWS-Terraform-Section1/image-20240617214824-h3zyfo9.png" alt="image">​</p><p>‍</p><p>使用Visual Studio Code打开<code>main.tf</code>​，并且安装Terraform官方插件。</p><p>​<img src="/2024/06/23/AWS-Terraform-Section1/image-20240617215049-jdiqpkh.png" alt="image">​</p><p>‍</p><p>安装完插件以后可以在VS Code中更方便地编辑Terraform文件</p><p>‍</p><h3 id="注册AWS云账号-1"><a href="#注册AWS云账号-1" class="headerlink" title="注册AWS云账号"></a>注册AWS云账号</h3><p>注册完毕后可以免费使用AWS云计算资源</p><p>​<img src="/2024/06/23/AWS-Terraform-Section1/image-20240617215341-n63hg26.png" alt="image">​</p><p>‍</p><p>注册完毕后会自动创建root用户，此时应该通过IAM创建一个权限较低的管理员账户，并通过管理员账户管理普通账户。</p><p>​<img src="/2024/06/23/AWS-Terraform-Section1/image-20240621082633-pze0qoe.png" alt="image">​</p><p>​<img src="/2024/06/23/AWS-Terraform-Section1/image-20240621082734-ltw8n4d.png" alt="image">​</p><p>添加group或者选择”Attach existing policies directly”勾选需要赋予的权限</p><p>​<img src="/2024/06/23/AWS-Terraform-Section1/image-20240621082909-kl5bllb.png" alt="image">​</p><p>‍</p><h3 id="Terraform连接到AWS-1"><a href="#Terraform连接到AWS-1" class="headerlink" title="Terraform连接到AWS"></a>Terraform连接到AWS</h3><p>​<img src="/2024/06/23/AWS-Terraform-Section1/image-20240621083520-o2agtmi.png" alt="image">​</p><p>‍</p><p>Providers作为Terraform中最重要的关键字，用于标识需要调用的远程云服务供应商API</p><p>Providers列表如下，支持许多的云服务供应商</p><p>支持的资源供应商列表 <a href="https://registry.terraform.io/browse/providers">https://registry.terraform.io/browse/providers</a></p><p>包括云服务、Devops工具(Ansible、Github、Grafana、Jenkins、Kubernetes …)等</p><p>​<img src="/2024/06/23/AWS-Terraform-Section1/image-20240621084141-ejuxa61.png" alt="image">​</p><p>‍</p><p>通过以下*.tf文件，将以编程的方式连接到AWS服务</p><p>AWS语法和源码示例</p><p><a href="https://registry.terraform.io/providers/hashicorp/aws/latest">https://registry.terraform.io/providers/hashicorp/aws/latest</a></p><p><a href="https://registry.terraform.io/providers/hashicorp/aws/latest/docs">https://registry.terraform.io/providers/hashicorp/aws/latest/docs</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">provider &quot;aws&quot; &#123;</span><br><span class="line">    region = &quot;eu-west-3&quot; # 取决于购买的EC2实例所属的区域</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">    不推荐hardcode明文的key</span><br><span class="line">    **/</span><br><span class="line">    access_key = &quot;&quot;</span><br><span class="line">    secret_key = &quot;&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>‍</p><p>*.tf文件是一个定义文件，编写完毕后需要执行以下命令安装相应的依赖(类似npm&#x2F;maven instal)</p><p>进入<code>*.tf</code>​所在的文件夹</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">terraform init</span><br></pre></td></tr></table></figure><p>‍</p><p>运行结果</p><p>​<img src="/2024/06/23/AWS-Terraform-Section1/image-20240621090125-g8a8waj.png" alt="image">​</p><p>‍</p><p>可以看到新文件生成</p><p>​<img src="/2024/06/23/AWS-Terraform-Section1/image-20240621090308-ajssusd.png" alt="image">​</p><p>‍</p><h2 id="Terraform常用命令"><a href="#Terraform常用命令" class="headerlink" title="Terraform常用命令"></a>Terraform常用命令</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">terraform init       # 初始化terraform文件</span><br><span class="line"></span><br><span class="line">terraform plan       # 比对当前环境与tf文件的差异</span><br><span class="line"></span><br><span class="line">terraform apply      # 将tf文件的设置应用到aws</span><br><span class="line"></span><br><span class="line">terraform destroy -target [resource_type] [resource_name]  # 删除资源 </span><br><span class="line"></span><br><span class="line">terraform apply -auto-approve  # 无需二次确认，立即应用tf配置文件</span><br><span class="line"></span><br><span class="line">terraform destroy    # 删除全部基础设施</span><br><span class="line"></span><br><span class="line">terraform state      # 生成terraform状态文件</span><br><span class="line"></span><br><span class="line">terraform state list # tfstate 显示文件中所有组件</span><br><span class="line"></span><br><span class="line">terraform state show [组件名]  # 显示tfstate文件中某个组件的terraform完整语法</span><br><span class="line"></span><br><span class="line">terraform version    # 显示terraform版本</span><br><span class="line"></span><br><span class="line">terraform fmt        # 格式化tf文件</span><br><span class="line"></span><br><span class="line">terraform validate   # 验证terraform文件是否正确</span><br><span class="line"></span><br><span class="line">terraform show       # 查看terraform状态</span><br><span class="line"></span><br><span class="line">terraform workspace  # 管理terraform工作空间</span><br><span class="line"></span><br><span class="line">terraform get        # 下载 &amp; 安装(或升级)模块</span><br><span class="line"></span><br><span class="line">terraform import     # 导入模块</span><br></pre></td></tr></table></figure><p>‍</p><p>‍</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;官网 &lt;a href=&quot;https://developer.hashicorp.com/terraform/intro&quot;&gt;https://d</summary>
      
    
    
    
    <category term="AWS Terraform" scheme="http://example.com/categories/AWS-Terraform/"/>
    
    
    <category term="AWS" scheme="http://example.com/tags/AWS/"/>
    
  </entry>
  
  <entry>
    <title>DRF Django 学习笔记</title>
    <link href="http://example.com/2024/06/16/DRF-Django-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://example.com/2024/06/16/DRF-Django-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
    <published>2024-06-16T13:34:18.000Z</published>
    <updated>2024-06-16T13:43:02.751Z</updated>
    
    <content type="html"><![CDATA[<h2 id="创建第一个测试项目"><a href="#创建第一个测试项目" class="headerlink" title="创建第一个测试项目"></a>创建第一个测试项目</h2><p>安装djanago</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install Django==<span class="number">4.2</span><span class="number">.1</span></span><br></pre></td></tr></table></figure><p>‍</p><p>创建项目</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">django-admin startproject [project_name]</span><br></pre></td></tr></table></figure><p>可以看到项目已经创建</p><p>​<img src="/2024/06/16/DRF-Django-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20240520212137-og7cyxd.png" alt="image">​</p><p>‍</p><p>然后在pycharm打开项目</p><p>​<img src="/2024/06/16/DRF-Django-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20240520212307-dqj5svv.png" alt="image">​</p><p>‍</p><p>项目基本结构</p><p>​<img src="/2024/06/16/DRF-Django-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20240520212403-15sh3or.png" alt="image">​</p><ul><li>wsgi.py - 配置WSGI兼容的Web服务站点</li><li>asgi.py - 配置ASGI兼容的Web服务站点</li><li>urls.py - 配置站点转发的路径</li><li>settings.py - Django项目的全局配置文件（重要）</li></ul><p>‍</p><p>添加项目模块</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py startapp [module_app]</span><br></pre></td></tr></table></figure><p>‍</p><p>执行以下命令创建第一个模块</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py startapp first_module</span><br></pre></td></tr></table></figure><p>‍</p><p>可以看到第一个模块已经创建成功</p><p>​<img src="/2024/06/16/DRF-Django-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20240520212725-g8y3rur.png" alt="image">​</p><p>‍</p><p>添加到settings.py</p><p>​<img src="/2024/06/16/DRF-Django-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20240524211817-438xeg9.png" alt="image">​</p><p>‍</p><p>模块文件结构</p><p>​<img src="/2024/06/16/DRF-Django-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20240520213459-e7qzjk5.png" alt="image">​</p><ul><li>views.py - 视图层，相当于Web开发中的Controller。用于拦截请求，进行逻辑处理并返回数据</li><li>tests.py - 用于编写测试用例</li><li>models.py - 模型层，用于存放与数据库实体相对应的model</li><li>apps.py -</li><li>admin.py - 一般不用</li></ul><p>‍</p><p>运行项目</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py runserver [port]</span><br></pre></td></tr></table></figure><p>‍</p><p>使用7000端口启动项目</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py runserver <span class="number">7000</span></span><br></pre></td></tr></table></figure><p>‍</p><p>控制台</p><p>​<img src="/2024/06/16/DRF-Django-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20240520214939-lfnc7qk.png" alt="image">​</p><p>‍</p><p>输入URL访问 <a href="http://127.0.0.1:7000/">http://127.0.0.1:7000/</a></p><p>​<img src="/2024/06/16/DRF-Django-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20240520215022-tmwz4k0.png" alt="image">​</p><p>‍</p><p>‍</p><h2 id="连接数据库"><a href="#连接数据库" class="headerlink" title="连接数据库"></a>连接数据库</h2><p>连接MySQL</p><p>先安装mysql客户端</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install mysqlclient</span><br></pre></td></tr></table></figure><p>‍</p><p>启动docker数据库</p><p>通过UI启动</p><p>​<img src="/2024/06/16/DRF-Django-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20240524210048-lomz4iw.png" alt="image">​</p><p>或通过命令启动</p><p>​<img src="/2024/06/16/DRF-Django-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20240524210149-3nlah8m.png" alt="image">​</p><p>‍</p><p>settings.py添加数据库信息</p><p>​<img src="/2024/06/16/DRF-Django-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20240525103915-lf2t7a9.png" alt="image">​</p><p>如果能正常启动则说明配置成功</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 manage.py runserver <span class="number">8000</span></span><br></pre></td></tr></table></figure><p>‍</p><h2 id="DRF实现登录功能"><a href="#DRF实现登录功能" class="headerlink" title="DRF实现登录功能"></a>DRF实现登录功能</h2><h3 id="DRF概述"><a href="#DRF概述" class="headerlink" title="DRF概述"></a>DRF概述</h3><p>DRF(Django rest framework) 基于Django的封装，是Restful风格的开发框架</p><p>官方网站 <a href="https://www.django-rest-framework.org/">https://www.django-rest-framework.org</a></p><p>‍</p><p>安装</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install djangorestframework</span><br></pre></td></tr></table></figure><p>‍</p><p>添加到settings.py</p><p>​<img src="/2024/06/16/DRF-Django-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20240524211854-v56ns98.png" alt="image">​</p><p>‍</p><h3 id="创建user和item模块"><a href="#创建user和item模块" class="headerlink" title="创建user和item模块"></a>创建user和item模块</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">python manage.py startapp user</span><br><span class="line">python manage.py startapp item</span><br></pre></td></tr></table></figure><p>‍</p><p>添加到settings.py</p><p>​<img src="/2024/06/16/DRF-Django-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20240525110511-tt1031h.png" alt="image">​</p><p>‍</p><h3 id="数据表设计"><a href="#数据表设计" class="headerlink" title="数据表设计"></a>数据表设计</h3><p>User表</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Create your models here.</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">User</span>(models.Model):</span><br><span class="line">    <span class="built_in">id</span> = models.AutoField(primary_key=<span class="literal">True</span>, null=<span class="literal">False</span>, unique=<span class="literal">True</span>)</span><br><span class="line">    user_name = models.CharField(null=<span class="literal">False</span>, max_length=<span class="number">255</span>, unique=<span class="literal">True</span>)</span><br><span class="line">    is_delete = models.IntegerField()</span><br><span class="line">    password = models.CharField(null=<span class="literal">False</span>, max_length=<span class="number">255</span>, unique=<span class="literal">False</span>)</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        db_table = <span class="string">&quot;user_tbl&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>‍</p><p>Item表</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">create table `item_tbl`(</span><br><span class="line">  `<span class="built_in">id</span>` <span class="built_in">int</span> NOT NULL AUTO_INCREMENT,</span><br><span class="line">`name` varchar(<span class="number">255</span>) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL,</span><br><span class="line">`price` <span class="built_in">int</span> NULL DEFAULT NULL,</span><br><span class="line">`vendor_id` <span class="built_in">int</span> NULL DEFAULT NULL,</span><br><span class="line">PRIMARY KEY (`<span class="built_in">id</span>`) USING BTREE</span><br><span class="line">)ENGINE = InnoDB AUTO_INCREMENT = <span class="number">4894</span> CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci ROW_FORMAT = Dynamic;</span><br></pre></td></tr></table></figure><p>‍</p><p><strong>User表 - 根据class自动在mysql db创建</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">python manage.py makemigrations</span><br><span class="line">python manage.py migrate</span><br></pre></td></tr></table></figure><p>‍</p><p>数据表已经创建</p><p>​<img src="/2024/06/16/DRF-Django-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20240525110258-ot38hp7.png" alt="image">​</p><p>‍</p><p><strong>Item表 - 在数据库创建表，并自动在项目里生成对应的model class</strong></p><p>​<img src="/2024/06/16/DRF-Django-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20240525111124-9q3y8t1.png" alt="image">​</p><p>‍</p><p>运行命令生成class</p><ul><li>如果需要追加则把<code>&gt;</code>​替换为<code>&gt;&gt;</code>​</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py inspectdb --database default item_tbl &gt; item/models.py</span><br></pre></td></tr></table></figure><p>‍</p><p>对应的class自动生成</p><p>​<img src="/2024/06/16/DRF-Django-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20240525111655-kg6g4qh.png" alt="image">​</p><p>‍</p><p>在user_tbl插入一条记录作为第一个用户</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> user_tbl(user_name, is_delete, password) <span class="keyword">VALUES</span>(<span class="string">&#x27;test1&#x27;</span>, <span class="number">0</span>, <span class="string">&#x27;123456&#x27;</span>);</span><br></pre></td></tr></table></figure><p>‍</p><h3 id="前端UI准备"><a href="#前端UI准备" class="headerlink" title="前端UI准备"></a>前端UI准备</h3><p>前后端分离，使用Vue + axios + Bootstrap快速开发</p><p>UI source code <a href="https://github.com/nauvalazhar/bootstrap-4-login-page">https://github.com/nauvalazhar/bootstrap-4-login-page</a></p><p>index.html引入vue和axios</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@3.4.21&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>‍</p><p>修改django主页</p><p>settings.py</p><p>​<img src="/2024/06/16/DRF-Django-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20240531165314-j1pafek.png" alt="image">​</p><p>‍</p><p>添加路由和controller</p><p>urls.py</p><p>​<img src="/2024/06/16/DRF-Django-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20240531165237-mww0vfw.png" alt="image">​</p><p>views.py</p><p>​<img src="/2024/06/16/DRF-Django-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20240531165219-ej1ga44.png" alt="image">​</p><p>‍</p><p>启动效果</p><p>​<img src="/2024/06/16/DRF-Django-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20240531151106-gh93lfl.png" alt="image">​</p><p>‍</p><h3 id="添加后端数据查询接口"><a href="#添加后端数据查询接口" class="headerlink" title="添加后端数据查询接口"></a>添加后端数据查询接口</h3><p>目的：连接到数据库查询用户表，并且校验用户密码</p><p>项目入口文件urls.py添加user路由</p><p>​<img src="/2024/06/16/DRF-Django-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20240531152238-c1ml76q.png" alt="image">​</p><p>‍</p><p>User模块下添加序列化器</p><p>*文件名必须为<code>serializers.py</code>​</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">from user.models import User</span><br><span class="line">from rest_framework import serializers</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class UserSerializer(serializers.ModelSerializer):</span><br><span class="line">    class Meta:</span><br><span class="line">        model = User</span><br><span class="line">        fields = &quot;__all__&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>‍</p><p>User模块下views.py添加控制器逻辑</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">from django.shortcuts import render</span><br><span class="line">from rest_framework.generics import GenericAPIView</span><br><span class="line">from rest_framework.mixins import CreateModelMixin, RetrieveModelMixin</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">from user.models import User</span><br><span class="line">from user.serializers import UserSerializer</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># Create your views here.</span><br><span class="line">def home_page(request):</span><br><span class="line">    return render(request, &quot;index.html&quot;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># User controller</span><br><span class="line"># post   - 对应db操作insert</span><br><span class="line"># get    - query by id</span><br><span class="line"># put    - update by id</span><br><span class="line"># delete - delete by id</span><br><span class="line">class UserMixinAPIView(GenericAPIView,</span><br><span class="line">                        CreateModelMixin,</span><br><span class="line">                        RetrieveModelMixin):</span><br><span class="line"></span><br><span class="line">    queryset = User.objects</span><br><span class="line">    serializer_class = UserSerializer</span><br><span class="line"></span><br><span class="line">    # 添加用户</span><br><span class="line">    # 添加user方法测试</span><br><span class="line">    def post(self, request):</span><br><span class="line">        return self.create(request)</span><br><span class="line"></span><br><span class="line">    # 查询用户</span><br><span class="line">    def get(self, request, pk):</span><br><span class="line">        return self.retrieve(request, pk)</span><br></pre></td></tr></table></figure><p>‍</p><p>User模块下urls.py添加路由拦截规则</p><p>​<img src="/2024/06/16/DRF-Django-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20240531165409-zoibwhs.png" alt="image">​</p><p>‍</p><p>通过postman测试get接口, user id为1</p><p>可以看到正常返回了db里的用户信息</p><p>​<img src="/2024/06/16/DRF-Django-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20240531160648-oo4nkj6.png" alt="image">​</p><p>‍</p><p>目前可以看到访问api返回的是Json数据，而不是状态码</p><p>需要添加一个工具类，并且将返回结果进行封装</p><p>​<img src="/2024/06/16/DRF-Django-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20240531165446-ta1euqw.png" alt="image">​</p><p>修改user&#x2F;views.py</p><p>​<img src="/2024/06/16/DRF-Django-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20240531165622-705tdqv.png" alt="image">​</p><p>‍</p><p>​<img src="/2024/06/16/DRF-Django-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20240531165536-de2orro.png" alt="image">​</p><h3 id="登录改造"><a href="#登录改造" class="headerlink" title="登录改造"></a>登录改造</h3><p>一般业务场景下，不会用user_id进行登录，而是使用账号和密码</p><p>views.py</p><p>​<img src="/2024/06/16/DRF-Django-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20240531172411-rt9ehxp.png" alt="image">​</p><ul><li><p>这里引入了<code>ViewSetMixin</code>​，用于区分两个get请求</p><ul><li><a href="http://127.0.0.1:8000/user/">http://127.0.0.1:8000/user/</a> -&gt; 转发到<code>login</code>​方法, 同时会发送一个request body</li><li><a href="http://127.0.0.1:8000/user/1-%3E">http://127.0.0.1:8000/user/1-&gt;</a> 转发到<code>get</code>​方法，参数只有一个id，没有request body</li></ul></li></ul><p>‍</p><p>urls.py也要做相应的改动</p><p>​<img src="/2024/06/16/DRF-Django-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20240616105216-aghtber.png" alt="image">​</p><p>可以看到同一个get url可以兼容不同的输入参数</p><p>​<img src="/2024/06/16/DRF-Django-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20240531172635-ki0kfir.png" alt="image">​</p><p>‍</p><p>添加前端返回结果</p><p>通过@click绑定点击事件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@3.4.21&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">const</span> app = <span class="title class_">Vue</span>.<span class="title function_">createApp</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// Method will be executed when the page initialize</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="title function_">created</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// For testing</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// this.loginTest();</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// Mount your method to DOM element</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// Static method</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="attr">methods</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="title function_">loginTest</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="title function_">alert</span>(<span class="string">&quot;Test vue.&quot;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="title function_">userLogin</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">var</span> accountName = $(<span class="string">&#x27;#account-name&#x27;</span>).<span class="title function_">val</span>();</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">var</span> accountPwd = $(<span class="string">&#x27;#account-password&#x27;</span>).<span class="title function_">val</span>();</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">var</span> userLoginInfo = &#123;&#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">userLoginInfo.<span class="property">accountName</span> = accountName;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">userLoginInfo.<span class="property">accountPwd</span> = accountPwd;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">axios.<span class="title function_">post</span>(<span class="string">&#x27;/user/&#x27;</span>, userLoginInfo)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">.<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// debugger;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="variable language_">console</span>.<span class="title function_">log</span>(res.<span class="property">data</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">if</span> (res.<span class="property">data</span>.<span class="property">status</span> == <span class="number">200</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// TODO 登录成功，跳转到首页</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="title function_">alert</span>(<span class="string">&#x27;登录成功&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125; <span class="keyword">else</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="title function_">alert</span>(res.<span class="property">data</span>.<span class="property">msg</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">app.<span class="title function_">mount</span>(<span class="string">&#x27;#loginApp&#x27;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>‍</p><h2 id="JWT认证"><a href="#JWT认证" class="headerlink" title="JWT认证"></a>JWT认证</h2><p>Web app的会话控制</p><ul><li>Cookie  -&gt; 存储在浏览器（客户端）上的小文件，用于保存用户信息的key-value文件</li><li>Session -&gt; 存储在服务端，用于保存用户会话所需的属性及配置信息。如果用户过多会导致占用的内存过大</li><li>Token    -&gt; 用户访问API资源所需的凭证，一般由身份标识、时间戳、用户必要信息等内容组成，是一串加密的字符串</li></ul><p>‍</p><p>响应流程</p><p>‍</p><p>JWT：Json web token</p><p>官网：<a href="https://jwt.io/">https://jwt.io</a></p><p>JWT格式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c</span><br></pre></td></tr></table></figure><p>通过<code>.</code>​连接成的三段字符串</p><p>JWT组成</p><ul><li>第一段：header，指头信息包含算法，字符串是由头信息进行base64加密</li><li>第二段：payload，指系统自定义存储的信息，如用户名、过期时间等，并进行base64加密</li><li>第三段：verify signature，指需要系统定义 “salt”，或者称为密钥</li></ul><p>​<img src="/2024/06/16/DRF-Django-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20231123211650-59w49ap.png" alt="image">​</p><p>‍</p><p>JWT服务端解密</p><p>获取token，例如</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">request.GET.get(<span class="string">&quot;token&quot;</span>)</span><br></pre></td></tr></table></figure><p>然后通过<code>.</code>​把字符串分割成三个部分</p><ul><li>第一步：用base64解密得到<code>header</code>​头部信息</li><li>第二步：用base64解密得到系统中的<code>info</code>​用户数据</li><li>第三步：判断 base64 (header + info + 系统密钥) 是否等于分割后的第三部分</li></ul><p>*要注意保护好系统的密钥</p><p>‍</p><h3 id="安装pyjwt"><a href="#安装pyjwt" class="headerlink" title="安装pyjwt"></a>安装pyjwt</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install pyjwt</span><br></pre></td></tr></table></figure><p>‍</p><h3 id="JWT工具类测试"><a href="#JWT工具类测试" class="headerlink" title="JWT工具类测试"></a>JWT工具类测试</h3><p>Django在初始化项目的时候会自动生成一个key，可以使用这个作为密钥</p><p>也根据自定义算法生成随机字符串</p><p>​<img src="/2024/06/16/DRF-Django-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20240616112951-1zjp40y.png" alt="image">​</p><p>‍</p><p>编写工具类生成token</p><p>设置token过期时间为5分钟</p><p>​<img src="/2024/06/16/DRF-Django-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20240616185722-ugvjkj5.png" alt="image">​</p><p>jwt_demo.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> jwt</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> djangoDRFDemo.settings <span class="keyword">import</span> SECRET_KEY</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">create_token</span>():</span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">&#x27;alg&#x27;</span>: <span class="string">&quot;HS256&quot;</span>,</span><br><span class="line">        <span class="string">&#x27;typ&#x27;</span>: <span class="string">&quot;jwt&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    payload = &#123;</span><br><span class="line">        <span class="string">&#x27;user_id&#x27;</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="string">&#x27;username&#x27;</span>: <span class="string">&quot;test_user&quot;</span>,</span><br><span class="line">        <span class="string">&#x27;exp&#x27;</span>: datetime.datetime.utcnow() + datetime.timedelta(minutes=<span class="number">1</span>)  <span class="comment"># 定义超时时间</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    result = jwt.encode(headers=headers, payload=payload, key=SECRET_KEY, algorithm=<span class="string">&quot;HS256&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_payload</span>(<span class="params">token</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">return</span> jwt.decode(token, SECRET_KEY,algorithms=[<span class="string">&quot;HS256&quot;</span>])</span><br><span class="line">    <span class="keyword">except</span> jwt.exceptions.DecodeError:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;token认证失败&quot;</span>)</span><br><span class="line">    <span class="keyword">except</span> jwt.exceptions.ExpiredSignatureError:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;token已经失效了&quot;</span>)</span><br><span class="line">    <span class="keyword">except</span> jwt.exceptions.InvalidTokenError:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;无效的token&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 加密过程 - 生成token</span></span><br><span class="line">    token = create_token()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;生成token：&quot;</span> + token)</span><br><span class="line"></span><br><span class="line">    payload = get_payload(token)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;获取payload：&quot;</span> + <span class="built_in">str</span>(payload))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 使用旧的token测试验证过程</span></span><br><span class="line">    <span class="comment"># 会抛出Signature has expired异常</span></span><br><span class="line">    expired_token = <span class="string">&quot;&quot;&quot;eyJhbGciOiJIUzI1NiIsInR5cCI6Imp3dCJ9.eyJ1c2VyX2lkIjoxLCJ1c2VybmFtZSI6InRlc3RfdXNlciIsImV4cCI6MTcxODUzNTcyNH0.8miAzL3pG7yMRonfR68kBJdGnUM1JksyriomfdB-zFY&quot;&quot;&quot;</span></span><br><span class="line">    payload = get_payload(expired_token)</span><br></pre></td></tr></table></figure><p>‍</p><p>运行结果</p><p>​<img src="/2024/06/16/DRF-Django-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20240616190642-p6db7se.png" alt="image">​</p><p>‍</p><h3 id="JWT登录功能整合"><a href="#JWT登录功能整合" class="headerlink" title="JWT登录功能整合"></a>JWT登录功能整合</h3><h4 id="首次登录时返回token"><a href="#首次登录时返回token" class="headerlink" title="首次登录时返回token"></a>首次登录时返回token</h4><p>1.添加JWT工具类</p><p>​<img src="/2024/06/16/DRF-Django-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20240616193837-in20fg9.png" alt="image">​</p><p>‍</p><p>2.添加View方法</p><p>​<img src="/2024/06/16/DRF-Django-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20240616193907-luppdc2.png" alt="image">​</p><p>‍</p><p>3.添加路由</p><p>​<img src="/2024/06/16/DRF-Django-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20240616193933-5vh48a9.png" alt="image">​</p><p>‍</p><p>4.测试接口</p><p>成功返回token</p><p>​<img src="/2024/06/16/DRF-Django-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20240616194000-v88wi5c.png" alt="image">​</p><p>‍</p><h4 id="针对非登录接口添加JWT验证"><a href="#针对非登录接口添加JWT验证" class="headerlink" title="针对非登录接口添加JWT验证"></a>针对非登录接口添加JWT验证</h4><p>1.针对url中携带token进行验证</p><p>jwt工具类添加方法</p><p>​<img src="/2024/06/16/DRF-Django-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20240616201642-aawmuiu.png" alt="image">​</p><p>‍</p><p>View中的方法也做相应的修改</p><p>​<img src="/2024/06/16/DRF-Django-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20240616203620-gtorlbn.png" alt="image">​</p><p>‍</p><p>测试</p><p>1.先登录一次拿到token</p><p>​<img src="/2024/06/16/DRF-Django-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20240616202924-6gi24r3.png" alt="image">​</p><p>‍</p><p>2.在参数中使用token，然后发送GET请求</p><p>​<img src="/2024/06/16/DRF-Django-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20240616202946-8wylpft.png" alt="image">​</p><p>‍</p><p>控制台也会打印出token的信息</p><p>​<img src="/2024/06/16/DRF-Django-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20240616203047-lokq4um.png" alt="image">​</p><p>‍</p><p>3.等待token过期后再次发起请求</p><p>​<img src="/2024/06/16/DRF-Django-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20240616203640-pq1rd2p.png" alt="image">​</p><p>控制台显示token失效</p><p>​<img src="/2024/06/16/DRF-Django-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20240616203707-qw67jl3.png" alt="image">​</p><p>‍</p><h4 id="针对请求header中携带token的验证方式"><a href="#针对请求header中携带token的验证方式" class="headerlink" title="针对请求header中携带token的验证方式"></a>针对请求header中携带token的验证方式</h4><p>添加工具类</p><p>​<img src="/2024/06/16/DRF-Django-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20240616204928-23tnv8s.png" alt="image">​</p><p>‍</p><p>View里做相应的修改</p><p>​<img src="/2024/06/16/DRF-Django-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20240616205007-v9zy1hx.png" alt="image">​</p><p>‍</p><p>测试接口，也是先拿到token</p><p>​<img src="/2024/06/16/DRF-Django-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20240616205048-svf0zn0.png" alt="image">​</p><p>‍</p><p>‍</p><h4 id="JWT全局配置"><a href="#JWT全局配置" class="headerlink" title="JWT全局配置"></a>JWT全局配置</h4><p>如果每一个类都添加JWT验证类，不方便维护</p><p>​<img src="/2024/06/16/DRF-Django-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20240616205142-aeipl2x.png" alt="image">​</p><p>‍</p><p>在settings.py中添加全局配置</p><p>所有的url都会被拦截</p><p>​<img src="/2024/06/16/DRF-Django-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20240616205423-o15i58r.png" alt="image">​</p><p>‍</p><p>View里做相应的修改</p><p>注释掉类里的authentication</p><p>​<img src="/2024/06/16/DRF-Django-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20240616205511-oxd492e.png" alt="image">​</p><p>‍</p><p>需要验证的方法里面只需要添加如下代码即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 判断token状态</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> request.user.get(<span class="string">&quot;status&quot;</span>):</span><br><span class="line"><span class="keyword">return</span> ResponseMessage.UserResponse.failed(<span class="string">&quot;User token is invalid.&quot;</span>)</span><br></pre></td></tr></table></figure><p>‍</p><p>测试</p><p>​<img src="/2024/06/16/DRF-Django-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20240616205732-ufbdmfi.png" alt="image">​</p><p>‍</p><h2 id="设置定时任务"><a href="#设置定时任务" class="headerlink" title="设置定时任务"></a>设置定时任务</h2><p>安装APSchedule</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install django_apscheduler</span><br></pre></td></tr></table></figure><p>‍</p><p>settings.py添加</p><p>​<img src="/2024/06/16/DRF-Django-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20240616210113-vl0ot45.png" alt="image">​</p><p>‍</p><p>执行如下命令完成DB的更改</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">python3 manage.py makemigrations</span><br><span class="line">python3 manage.py migrate</span><br></pre></td></tr></table></figure><p>​<img src="/2024/06/16/DRF-Django-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20240616210647-anm7hc6.png" alt="image">​</p><p>‍</p><p>会在DB中创建APScheduler所需的表</p><p>​<img src="/2024/06/16/DRF-Django-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20240616210633-bolnwxx.png" alt="image">​</p><p>‍</p><p>修改app folder中的urls.py</p><p>​<img src="/2024/06/16/DRF-Django-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20240616212555-kl9jbpb.png" alt="image">​</p><p>‍</p><p>启动APP即可看到效果</p><p>代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> apscheduler.schedulers.background <span class="keyword">import</span> BackgroundScheduler</span><br><span class="line"><span class="keyword">from</span> django_apscheduler.jobstores <span class="keyword">import</span> DjangoJobStore,register_job</span><br><span class="line"></span><br><span class="line">scheduler = BackgroundScheduler()</span><br><span class="line">scheduler.add_jobstore(DjangoJobStore(), <span class="string">&quot;default&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@register_job(<span class="params">scheduler, <span class="string">&#x27;interval&#x27;</span>, seconds=<span class="number">5</span>, name=<span class="string">&#x27;auto_hello&#x27;</span>, replace_existing=<span class="literal">True</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test_schedule</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Hello schedule&quot;</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;创建第一个测试项目&quot;&gt;&lt;a href=&quot;#创建第一个测试项目&quot; class=&quot;headerlink&quot; title=&quot;创建第一个测试项目&quot;&gt;&lt;/a&gt;创建第一个测试项目&lt;/h2&gt;&lt;p&gt;安装djanago&lt;/p&gt;
&lt;figure class=&quot;highlight pyt</summary>
      
    
    
    
    <category term="Django" scheme="http://example.com/categories/Django/"/>
    
    
    <category term="Python Web" scheme="http://example.com/tags/Python-Web/"/>
    
  </entry>
  
  <entry>
    <title>Java Lucene中文分词</title>
    <link href="http://example.com/2024/04/15/Lucene%E4%B8%AD%E6%96%87%E5%88%86%E8%AF%8D/"/>
    <id>http://example.com/2024/04/15/Lucene%E4%B8%AD%E6%96%87%E5%88%86%E8%AF%8D/</id>
    <published>2024-04-15T14:07:18.000Z</published>
    <updated>2024-04-16T13:23:34.203Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Lucene中文分词"><a href="#Lucene中文分词" class="headerlink" title="Lucene中文分词"></a>Lucene中文分词</h1><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><h3 id="非结构化数据查询方法"><a href="#非结构化数据查询方法" class="headerlink" title="非结构化数据查询方法"></a>非结构化数据查询方法</h3><p>（1）顺序扫描法(Serial Scanning)</p><p>所谓顺序扫描，比如要找内容包含某一个字符串的文件，就是一个文档一个文档的看，对于每一个文档，</p><p>从头看到尾，如果此文档包含此字符串，则此文档为我们要找的文件，接着看下一个文件，</p><p>直到扫描完所有的文件。如利用windows的搜索也可以搜索文件内容，只是相当的慢。</p><p>（2）全文检索(Full-text Search)</p><p>将非结构化数据中的一部分信息提取出来，重新组织，使其变得有一定结构，然后对此有一定结构的数据进行搜索，</p><p>从而达到搜索相对较快的目的。这部分从非结构化数据中提取出的然后重新组织的信息，我们称之索引。</p><p>例如：字典。字典的拼音表和部首检字表就相当于字典的索引，对每一个字的解释是非结构化的，</p><p>如果字典没有音节表和部首检字表，在茫茫辞海中找一个字只能顺序扫描。然而字的某些信息可以提取出来进行结构化处理，</p><p>比如读音，就比较结构化，分声母和韵母，分别只有几种可以一一列举，于是将读音拿出来按一定的顺序排列，</p><p>每一项读音都指向此字的详细解释的页数。我们搜索时按结构化的拼音搜到读音，然后按其指向的页数，便可找到我们的非结构化数据——也即对字的解释。</p><p><strong>这种先建立索引，再对索引进行搜索的过程就叫全文检索(Full-text Search)。</strong></p><p>虽然创建索引的过程也是非常耗时的，但是索引一旦创建就可以多次使用，全文检索主要处理的是查询，所以耗时间创建索引是值得的。</p><p>‍</p><h3 id="什么是Lucene"><a href="#什么是Lucene" class="headerlink" title="什么是Lucene"></a>什么是Lucene</h3><p><strong>Lucene是apache下的一个开放源代码的全文检索引擎工具包</strong>。提供了完整的查询引擎和索引引擎，部分文本分析引擎（英文与德文两种西方语言）。</p><p>对于数据量大、数据结构不固定的数据可采用全文检索方式搜索，比如百度、Google等搜索引擎、论坛站内搜索、电商网站站内搜索等。</p><p><img src="/2024/04/15/Lucene%E4%B8%AD%E6%96%87%E5%88%86%E8%AF%8D/image-20210529105841-4936d6f.png" alt="image.png"></p><p>对搜索的原始内容进行索引构建一个索引库，索引过程包括：确定原始内容即要搜索的内容、采集文档、创建文档、分析文档、索引文档</p><p>从索引库中搜索内容，搜索过程包括：用户通过搜索界面、创建查询、执行搜索，从索引库搜索、渲染搜索结果</p><p>‍</p><h3 id="全文索引"><a href="#全文索引" class="headerlink" title="全文索引"></a>全文索引</h3><p>搜索引擎通常检索的场景是：给定几个关键词，找出包含关键词的文档。怎么快速找到包含某个关键词的文档就成为搜索的关键。所以全文检索引擎一般使用倒排索引，如Lucene。</p><p><strong>全文正排索引</strong></p><p>一句话总结：通过文档找到所有的词，称为正排索引</p><p>正排表是以文档的ID为关键字，表中记录文档中每个字的位置信息，查找时扫描表中每个文档中字的信息直到找出所有包含查询关键字的文档。<br>正排表结构如图所示，这种组织方法在建立索引的时候结构比较简单，建立比较方便且易于维护;因为索引是基于文档建立的，若是有新的文档加入，直接为该文档建立一个新的索引块，挂接在原来索引文件的后面。若是有文档删除，则直接找到该文档号文档对应的索引信息，将其直接删除。但是在查询的时候需对所有的文档进行扫描以确保没有遗漏，这样就使得检索时间大大延长，检索效率低下。<br>尽管正排表的工作原理非常的简单，但是由于其检索效率太低，除非在特定情况下，否则实用性价值不大。</p><p><img src="/2024/04/15/Lucene%E4%B8%AD%E6%96%87%E5%88%86%E8%AF%8D/image-20210602160526-o4n214r.png" alt="image.png"></p><p>‍</p><p><strong>全文倒排索引</strong></p><p>一句话总结：通过词找到所有文档，称为倒排索引</p><p>倒排表以字或词为关键字进行索引，表中关键字所对应的记录表项记录了出现这个字或词的所有文档，一个表项就是一个字表段，它记录该文档的ID和字符在该文档中出现的位置情况。<br>由于每个字或词对应的文档数量在动态变化，所以倒排表的建立和维护都较为复杂，但是在查询的时候由于可以一次得到查询关键字所对应的所有文档，所以效率高于正排表。在全文检索中，检索的快速响应是一个最为关键的性能，而索引建立由于在后台进行，尽管效率相对低一些，但不会影响整个搜索引擎的效率。</p><p><img src="/2024/04/15/Lucene%E4%B8%AD%E6%96%87%E5%88%86%E8%AF%8D/image-20210602160619-ul7mobu.png" alt="image.png"></p><p>‍</p><h3 id="Lucene的评分机制"><a href="#Lucene的评分机制" class="headerlink" title="Lucene的评分机制"></a>Lucene的评分机制</h3><ul><li>结果：（TF-IDF，文档id）</li><li>词频：Term Frequency，简称TF——词在文档中出现的频率</li><li>逆文档频率：Inverse Document Frequency，简称IDF——词在所有文档中出现的频率越低，说明词越重要</li></ul><p>‍</p><h3 id="中文分析器"><a href="#中文分析器" class="headerlink" title="中文分析器"></a>中文分析器</h3><p>Analyzer替换成能处理中文的分析器</p><ul><li>庖丁</li><li>盘古</li><li>IK</li></ul><p>‍</p><h2 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h2><p>主要目标：针对txt小说文件进行关键词查询，关键词为<code>泡沫 贷款</code></p><h3 id="步骤分解"><a href="#步骤分解" class="headerlink" title="步骤分解"></a>步骤分解</h3><p>1.明确查询范围，准备基础数据，并整理到目录下</p><p><img src="/2024/04/15/Lucene%E4%B8%AD%E6%96%87%E5%88%86%E8%AF%8D/image-20210603145755-lvyw6f9.png" alt="image.png"></p><p>【注意】使用<code>IK Analyzer</code>要保证文档是<code>UTF_8</code>编码格式</p><p>‍</p><p>2.创建索引生成器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 创建索引生成器</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> IndexWriter <span class="title function_">createWriter</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 指定索引生成目录并打开</span></span><br><span class="line">    <span class="type">var</span> <span class="variable">path</span> <span class="operator">=</span> Paths.get(INDEX_DIR);</span><br><span class="line">    <span class="type">var</span> <span class="variable">dir</span> <span class="operator">=</span> FSDirectory.open(path);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 指定词法分析器</span></span><br><span class="line">    <span class="type">var</span> <span class="variable">analyzer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">IKAnalyzer</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 建造者模式生成配置</span></span><br><span class="line">    <span class="type">var</span> <span class="variable">writerConfig</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">IndexWriterConfig</span>(analyzer);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">IndexWriter</span>(dir, writerConfig);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果需要使用英文分析器，则<code>new IKAnalyzer()</code>改为<code>new StandardAnalyzer()</code></p><p>‍</p><p>3.读取小说数据，由Lucene引擎在指定目录创建索引</p><p>4.创建索引搜索器</p><p>5.使用索引搜索器进行搜索，注意搜索中的分析器必须与<code>第二步</code>中的<strong>分析器一致</strong></p><blockquote><p>Lucene的查询方式很 丰富，对于数值类型的数据，采取TermRangeQuery的方式，对于String类型的，就可以采取TermQuery等，查询方式了，可以通过采取合适的查询方式，检索到数据。Queryparser这个查询方式包含了其他几种查询方式。</p></blockquote><p>【注意】几种查询方式的比较</p><table><thead><tr><th>TermQuery</th><th>精确查询</th></tr></thead><tbody><tr><td>TermRangeQuery</td><td>查询一个范围</td></tr><tr><td>PrefixQuery</td><td>前缀匹配查询</td></tr><tr><td>WildcardQuery</td><td>通配符查询</td></tr><tr><td>BooleanQuery</td><td>多条件查询</td></tr><tr><td>PhraseQuery</td><td>短语查询</td></tr><tr><td>FuzzyQuery</td><td>模糊查询</td></tr><tr><td>Queryparser</td><td>万能查询（上面的都可以用这个来查询到）</td></tr></tbody></table><p>‍</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>Lucene.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> lucene;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> data.Book;</span><br><span class="line"><span class="keyword">import</span> org.apache.lucene.analysis.standard.StandardAnalyzer;</span><br><span class="line"><span class="keyword">import</span> org.apache.lucene.document.Document;</span><br><span class="line"><span class="keyword">import</span> org.apache.lucene.document.Field;</span><br><span class="line"><span class="keyword">import</span> org.apache.lucene.document.TextField;</span><br><span class="line"><span class="keyword">import</span> org.apache.lucene.index.DirectoryReader;</span><br><span class="line"><span class="keyword">import</span> org.apache.lucene.index.IndexWriter;</span><br><span class="line"><span class="keyword">import</span> org.apache.lucene.index.IndexWriterConfig;</span><br><span class="line"><span class="keyword">import</span> org.apache.lucene.queryparser.classic.ParseException;</span><br><span class="line"><span class="keyword">import</span> org.apache.lucene.queryparser.classic.QueryParser;</span><br><span class="line"><span class="keyword">import</span> org.apache.lucene.search.IndexSearcher;</span><br><span class="line"><span class="keyword">import</span> org.apache.lucene.store.FSDirectory;</span><br><span class="line"><span class="keyword">import</span> org.wltea.analyzer.lucene.IKAnalyzer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Paths;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.LinkedList;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Lucene中文分词</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LuceneCN</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">INDEX_DIR</span> <span class="operator">=</span> <span class="string">&quot;/Users/kalosora/Desktop/novel/index_data&quot;</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">DATA_DIR</span> <span class="operator">=</span> <span class="string">&quot;/Users/kalosora/Desktop/novel/book&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建索引生成器</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> IndexWriter <span class="title function_">createWriter</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 指定索引生成目录并打开</span></span><br><span class="line">        <span class="type">var</span> <span class="variable">path</span> <span class="operator">=</span> Paths.get(INDEX_DIR);</span><br><span class="line">        <span class="type">var</span> <span class="variable">dir</span> <span class="operator">=</span> FSDirectory.open(path);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 指定词法分析器</span></span><br><span class="line">        <span class="type">var</span> <span class="variable">analyzer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">IKAnalyzer</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 建造者模式生成配置</span></span><br><span class="line">        <span class="type">var</span> <span class="variable">writerConfig</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">IndexWriterConfig</span>(analyzer);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">IndexWriter</span>(dir, writerConfig);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建索引</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">createIndex</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取索引生成器</span></span><br><span class="line">        <span class="type">var</span> <span class="variable">writer</span> <span class="operator">=</span> <span class="built_in">this</span>.createWriter();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 采集数据</span></span><br><span class="line">        Map&lt;Integer, Book&gt; bookMap = readFromBooks(DATA_DIR);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// TODO 按章节分割文档</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// TODO 多线程处理以提高效率</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建文档对象</span></span><br><span class="line">        <span class="type">var</span> <span class="variable">documents</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;Document&gt;();</span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;Integer, Book&gt; entry : bookMap.entrySet()) &#123;</span><br><span class="line">            <span class="type">Integer</span> <span class="variable">key</span> <span class="operator">=</span> entry.getKey();</span><br><span class="line">            <span class="type">Book</span> <span class="variable">value</span> <span class="operator">=</span> entry.getValue();</span><br><span class="line"></span><br><span class="line">            <span class="type">var</span> <span class="variable">document</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Document</span>();</span><br><span class="line">            document.add(<span class="keyword">new</span> <span class="title class_">TextField</span>(<span class="string">&quot;Name&quot;</span>,</span><br><span class="line">                    value.getName(),</span><br><span class="line">                    Field.Store.YES));</span><br><span class="line"><span class="comment">//            document.add(new TextField(&quot;Author&quot;,</span></span><br><span class="line"><span class="comment">//                    value.getAuthor(),</span></span><br><span class="line"><span class="comment">//                    Field.Store.YES));</span></span><br><span class="line">            document.add(<span class="keyword">new</span> <span class="title class_">TextField</span>(<span class="string">&quot;Sentence&quot;</span>,</span><br><span class="line">                    value.getSentence(),</span><br><span class="line">                    Field.Store.YES));</span><br><span class="line"></span><br><span class="line">            documents.add(document);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 对文档对象创建索引</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> document : documents) &#123;</span><br><span class="line">            writer.addDocument(document);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        writer.close();</span><br><span class="line">        System.out.println(<span class="string">&quot;全文索引生成完毕!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 从指定目录读取数据</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> bookPath</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Map&lt;Integer, Book&gt; <span class="title function_">readFromBooks</span><span class="params">(String bookPath)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        Map&lt;Integer, Book&gt; bookMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取文件列表</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">booksPath</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(bookPath);</span><br><span class="line">        <span class="type">var</span> <span class="variable">books</span> <span class="operator">=</span> booksPath.listFiles();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 遍历文件</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> book : books) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 获取书名和作者名</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> book.getName();</span><br><span class="line"></span><br><span class="line">            <span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(book);</span><br><span class="line">            <span class="type">BufferedReader</span> <span class="variable">reader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(fis, <span class="string">&quot;UTF-8&quot;</span>));</span><br><span class="line"></span><br><span class="line">            <span class="type">String</span> <span class="variable">context</span> <span class="operator">=</span> reader.readLine();</span><br><span class="line">            <span class="keyword">while</span> (context != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="comment">// 组装书本信息</span></span><br><span class="line">                <span class="type">Book</span> <span class="variable">bookInfo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Book</span>();</span><br><span class="line">                bookInfo.setName(fileName);</span><br><span class="line">                <span class="comment">//bookInfo.setAuthor(bookAuthor);</span></span><br><span class="line">                bookInfo.setSentence(context);</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 入队并读取下一个句子</span></span><br><span class="line">                bookMap.put(count, bookInfo);</span><br><span class="line">                context = reader.readLine();</span><br><span class="line"></span><br><span class="line">                count++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> bookMap;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建索引搜索器</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> IndexSearcher <span class="title function_">createSearcher</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 指定索引生成目录并打开</span></span><br><span class="line">        <span class="type">var</span> <span class="variable">path</span> <span class="operator">=</span> Paths.get(INDEX_DIR);</span><br><span class="line">        <span class="type">var</span> <span class="variable">dir</span> <span class="operator">=</span> FSDirectory.open(path);</span><br><span class="line">        <span class="type">var</span> <span class="variable">reader</span> <span class="operator">=</span> DirectoryReader.open(dir);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">IndexSearcher</span>(reader);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 从索引搜索</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> keyWord</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">queryIndex</span><span class="params">(String keyWord)</span> <span class="keyword">throws</span> ParseException, IOException &#123;</span><br><span class="line">        <span class="type">var</span> <span class="variable">query</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">QueryParser</span>(<span class="string">&quot;Sentence&quot;</span>, <span class="keyword">new</span> <span class="title class_">IKAnalyzer</span>()).parse(keyWord);</span><br><span class="line"></span><br><span class="line">        <span class="type">var</span> <span class="variable">searcher</span> <span class="operator">=</span> <span class="built_in">this</span>.createSearcher();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 仅查询前10条</span></span><br><span class="line">        <span class="type">var</span> <span class="variable">docs</span> <span class="operator">=</span> searcher.search(query, <span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 输出结果</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> scoreDoc : docs.scoreDocs) &#123;</span><br><span class="line">            <span class="type">var</span> <span class="variable">docID</span> <span class="operator">=</span> scoreDoc.doc;</span><br><span class="line">            <span class="type">var</span> <span class="variable">doc</span> <span class="operator">=</span> searcher.doc(docID);</span><br><span class="line"><span class="comment">//            System.out.format(&quot;%s %s %s %s\n&quot;, scoreDoc.score,</span></span><br><span class="line"><span class="comment">//                    doc.get(&quot;Author&quot;),</span></span><br><span class="line"><span class="comment">//                    doc.get(&quot;Name&quot;),</span></span><br><span class="line"><span class="comment">//                    doc.get(&quot;Sentence&quot;));</span></span><br><span class="line"></span><br><span class="line">            System.out.format(<span class="string">&quot;%s %s %s\n&quot;</span>, scoreDoc.score,</span><br><span class="line">                    doc.get(<span class="string">&quot;Name&quot;</span>),</span><br><span class="line">                    doc.get(<span class="string">&quot;Sentence&quot;</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>‍</p><p>main.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 中文分词入口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">main</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, ParseException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">LuceneCN</span> <span class="variable">lucene</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LuceneCN</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建索引</span></span><br><span class="line">        <span class="comment">//lucene.createIndex();</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 查询关键词</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">keyword</span> <span class="operator">=</span> <span class="string">&quot;贷款 泡沫&quot;</span>;</span><br><span class="line">        lucene.queryIndex(keyword);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>‍</p><p>pom.xml</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="line">&lt;project xmlns=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span><br><span class="line">         xmlns:xsi=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="line">         xsi:schemaLocation=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><br><span class="line">    &lt;modelVersion&gt;<span class="number">4.0</span><span class="number">.0</span>&lt;/modelVersion&gt;</span><br><span class="line"></span><br><span class="line">    &lt;groupId&gt;org.example&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;LuceneX&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;<span class="number">1.0</span>-SNAPSHOT&lt;/version&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line">        &lt;!-- Lucene Lib --&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.apache.lucene&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;lucene-memory&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;<span class="number">7.1</span><span class="number">.0</span>&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.apache.lucene&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;lucene-core&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;<span class="number">7.1</span><span class="number">.0</span>&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.apache.lucene&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;lucene-queryparser&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;<span class="number">7.1</span><span class="number">.0</span>&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- IK 中文分词 --&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;com.github.magese&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;ik-analyzer&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;<span class="number">7.4</span><span class="number">.0</span>&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">    &lt;/dependencies&gt;</span><br><span class="line"></span><br><span class="line">    &lt;build&gt;</span><br><span class="line">        &lt;plugins&gt;</span><br><span class="line">            &lt;plugin&gt;</span><br><span class="line">                &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;</span><br><span class="line">                &lt;configuration&gt;</span><br><span class="line">                    &lt;source&gt;<span class="number">12</span>&lt;/source&gt;</span><br><span class="line">                    &lt;target&gt;<span class="number">12</span>&lt;/target&gt;</span><br><span class="line">                &lt;/configuration&gt;</span><br><span class="line">            &lt;/plugin&gt;</span><br><span class="line">        &lt;/plugins&gt;</span><br><span class="line">    &lt;/build&gt;</span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure><p>‍</p><h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><p>输出目录</p><p><img src="/2024/04/15/Lucene%E4%B8%AD%E6%96%87%E5%88%86%E8%AF%8D/image-20210603151149-q6tptou.png" alt="image.png"></p><p>‍</p><p>运行结果</p><p><img src="/2024/04/15/Lucene%E4%B8%AD%E6%96%87%E5%88%86%E8%AF%8D/image-20210603151130-diflmqr.png" alt="image.png"></p><p>‍</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://zhuanlan.zhihu.com/p/47764999">Java 全文检索引擎工具包 Lucene 原理解析</a></p><p>‍</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Lucene中文分词&quot;&gt;&lt;a href=&quot;#Lucene中文分词&quot; class=&quot;headerlink&quot; title=&quot;Lucene中文分词&quot;&gt;&lt;/a&gt;Lucene中文分词&lt;/h1&gt;&lt;h2 id=&quot;基本概念&quot;&gt;&lt;a href=&quot;#基本概念&quot; class=&quot;head</summary>
      
    
    
    
    <category term="Java" scheme="http://example.com/categories/Java/"/>
    
    
    <category term="Java Core" scheme="http://example.com/tags/Java-Core/"/>
    
  </entry>
  
  <entry>
    <title>旅程还在继续</title>
    <link href="http://example.com/2024/03/29/%E6%97%85%E7%A8%8B%E8%BF%98%E5%9C%A8%E7%BB%A7%E7%BB%AD/"/>
    <id>http://example.com/2024/03/29/%E6%97%85%E7%A8%8B%E8%BF%98%E5%9C%A8%E7%BB%A7%E7%BB%AD/</id>
    <published>2024-03-29T14:22:13.000Z</published>
    <updated>2024-03-30T03:31:59.330Z</updated>
    
    <content type="html"><![CDATA[<h1 id="旅程还在继续"><a href="#旅程还在继续" class="headerlink" title="旅程还在继续"></a>旅程还在继续</h1><p>一年半没有更新博客，原因是Mac重置数据以后，我发现博客数据没有备份…</p><p>还好有记下hexo配置的过程，于是只能从头来过</p><p>Hexo NEXT主题也从原来的5.X升级到了7.X</p><p>​<img src="/2024/03/29/%E6%97%85%E7%A8%8B%E8%BF%98%E5%9C%A8%E7%BB%A7%E7%BB%AD/image-20240317124230-zpap1uq.png" alt="image">​</p><p>‍</p><p>旅程还在继续，学习也不能止步。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;旅程还在继续&quot;&gt;&lt;a href=&quot;#旅程还在继续&quot; class=&quot;headerlink&quot; title=&quot;旅程还在继续&quot;&gt;&lt;/a&gt;旅程还在继续&lt;/h1&gt;&lt;p&gt;一年半没有更新博客，原因是Mac重置数据以后，我发现博客数据没有备份…&lt;/p&gt;
&lt;p&gt;还好有记下hexo配置</summary>
      
    
    
    
    <category term="随记" scheme="http://example.com/categories/%E9%9A%8F%E8%AE%B0/"/>
    
    
    <category term="随记" scheme="http://example.com/tags/%E9%9A%8F%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Oracle 开发常用代码</title>
    <link href="http://example.com/2022/06/14/Oracle%20%E5%BC%80%E5%8F%91%E5%B8%B8%E7%94%A8%E4%BB%A3%E7%A0%81/"/>
    <id>http://example.com/2022/06/14/Oracle%20%E5%BC%80%E5%8F%91%E5%B8%B8%E7%94%A8%E4%BB%A3%E7%A0%81/</id>
    <published>2022-06-14T03:04:05.000Z</published>
    <updated>2024-03-29T14:19:05.191Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基本"><a href="#基本" class="headerlink" title="基本"></a>基本</h2><h3 id="获取环境信息"><a href="#获取环境信息" class="headerlink" title="获取环境信息"></a>获取环境信息</h3><p>USEREVN()方法返回用户环境的信息。</p><p>option 可以是 ENTRYID,SESSIONID,TERMINAL,ISDBA,LANGUAGE,CLIENT_INFO,LANG,VSIZE</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--查看当前用户是否是 DBA，如果是返回 true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> userevn(<span class="string">&#x27;isbda&#x27;</span>) <span class="keyword">from</span> dual;</span><br><span class="line"></span><br><span class="line"><span class="comment">--返回 SESSION 会话 ID </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> userevn(<span class="string">&#x27;sessionid&#x27;</span>) <span class="keyword">from</span> dual;</span><br><span class="line"></span><br><span class="line"><span class="comment">--返回多人会话人数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> userevn(<span class="string">&#x27;entryid&#x27;</span>) <span class="keyword">from</span> dual;</span><br><span class="line"></span><br><span class="line"><span class="comment">--返回当前 instance 标志</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> userevn(<span class="string">&#x27;instance&#x27;</span>) <span class="keyword">from</span> dual;</span><br><span class="line"></span><br><span class="line"><span class="comment">--返回当前语言环境</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> userevn(<span class="string">&#x27;language&#x27;</span>) <span class="keyword">from</span> dual;</span><br><span class="line"></span><br><span class="line"><span class="comment">--返回当前语言环境的缩写，如 ZHS,EN 等</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> userevn(<span class="string">&#x27;lang&#x27;</span>) <span class="keyword">from</span> dual;</span><br><span class="line"></span><br><span class="line"><span class="comment">--返回用户终端或机器标识</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> userevn(<span class="string">&#x27;terminal&#x27;</span>) <span class="keyword">from</span> dual;</span><br><span class="line"></span><br><span class="line"><span class="comment">--返回传入字符的字节数，以 X 为例，返回的就是 X 字符的大小</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> userevn(X) <span class="keyword">from</span> dual;</span><br></pre></td></tr></table></figure><p>‍</p><h3 id="截取到某一个字符串前面的内容"><a href="#截取到某一个字符串前面的内容" class="headerlink" title="截取到某一个字符串前面的内容"></a>截取到某一个字符串前面的内容</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> substr(<span class="string">&#x27;210-1106000001&#x27;</span>,<span class="number">1</span>,instr(<span class="string">&#x27;210-1106000001&#x27;</span>,<span class="string">&#x27;-&#x27;</span>)<span class="number">-1</span>) <span class="keyword">from</span> dual;</span><br></pre></td></tr></table></figure><p>‍</p><h3 id="设置当前会话日期格式"><a href="#设置当前会话日期格式" class="headerlink" title="设置当前会话日期格式"></a>设置当前会话日期格式</h3><p>设置当前会话日期格式为英文</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> session <span class="keyword">set</span> nls_date_language<span class="operator">=</span>american;</span><br></pre></td></tr></table></figure><p>‍</p><h3 id="开启控制台输出"><a href="#开启控制台输出" class="headerlink" title="开启控制台输出"></a>开启控制台输出</h3><p>用于使 <code>dbms_output.put_line()</code> 生效</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span> serveroutput <span class="keyword">on</span>;</span><br><span class="line"><span class="operator">/</span></span><br></pre></td></tr></table></figure><p>‍</p><h3 id="关闭参数输入"><a href="#关闭参数输入" class="headerlink" title="关闭参数输入"></a>关闭参数输入</h3><p>使Oracle的参数符号 <code>&amp;</code> 失效</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span> <span class="keyword">define</span> off;</span><br><span class="line"><span class="operator">/</span></span><br></pre></td></tr></table></figure><p>‍</p><h2 id="数据库指标"><a href="#数据库指标" class="headerlink" title="数据库指标"></a>数据库指标</h2><h3 id="查看占用表空间大小"><a href="#查看占用表空间大小" class="headerlink" title="查看占用表空间大小"></a>查看占用表空间大小</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> se.username,</span><br><span class="line">       se.sid,</span><br><span class="line">       su.extents,</span><br><span class="line">       su.blocks <span class="operator">*</span> to_number(rtrim(p.value)) <span class="keyword">AS</span> Space,</span><br><span class="line">       tablespace,</span><br><span class="line">       segtype,</span><br><span class="line">       sql_text</span><br><span class="line">  <span class="keyword">FROM</span> v$sort_usage su, v$<span class="keyword">parameter</span> p, v$session se, v$<span class="keyword">sql</span> s</span><br><span class="line"> <span class="keyword">WHERE</span> p.name <span class="operator">=</span> <span class="string">&#x27;db_block_size&#x27;</span></span><br><span class="line">   <span class="keyword">AND</span> su.session_addr <span class="operator">=</span> se.saddr</span><br><span class="line">   <span class="keyword">AND</span> s.hash_value <span class="operator">=</span> su.sqlhash</span><br><span class="line">   <span class="keyword">AND</span> s.address <span class="operator">=</span> su.sqladdr</span><br><span class="line"> <span class="keyword">ORDER</span> <span class="keyword">BY</span> se.username, se.sid;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>‍</p><h3 id="查看占用的磁盘空间"><a href="#查看占用的磁盘空间" class="headerlink" title="查看占用的磁盘空间"></a>查看占用的磁盘空间</h3><p>对于产生大量DML的场景，会需要监控磁盘空间。如果空间爆满会导致Oracle宕机。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> TRUNC(first_time) &quot;Date&quot;,</span><br><span class="line">       to_char(first_time, <span class="string">&#x27;Dy&#x27;</span>) &quot;Day&quot;,</span><br><span class="line">       <span class="built_in">COUNT</span>(<span class="number">1</span>) &quot;Total(GB)&quot;,</span><br><span class="line">       <span class="built_in">SUM</span>(DECODE(to_char(first_time, <span class="string">&#x27;hh24&#x27;</span>), <span class="string">&#x27;00&#x27;</span>, <span class="number">1</span>, <span class="number">0</span>)) &quot;h0&quot;,</span><br><span class="line">       <span class="built_in">SUM</span>(DECODE(to_char(first_time, <span class="string">&#x27;hh24&#x27;</span>), <span class="string">&#x27;01&#x27;</span>, <span class="number">1</span>, <span class="number">0</span>)) &quot;h1&quot;,</span><br><span class="line">       <span class="built_in">SUM</span>(DECODE(to_char(first_time, <span class="string">&#x27;hh24&#x27;</span>), <span class="string">&#x27;02&#x27;</span>, <span class="number">1</span>, <span class="number">0</span>)) &quot;h2&quot;,</span><br><span class="line">       <span class="built_in">SUM</span>(DECODE(to_char(first_time, <span class="string">&#x27;hh24&#x27;</span>), <span class="string">&#x27;03&#x27;</span>, <span class="number">1</span>, <span class="number">0</span>)) &quot;h3&quot;,</span><br><span class="line">       <span class="built_in">SUM</span>(DECODE(to_char(first_time, <span class="string">&#x27;hh24&#x27;</span>), <span class="string">&#x27;04&#x27;</span>, <span class="number">1</span>, <span class="number">0</span>)) &quot;h4&quot;,</span><br><span class="line">       <span class="built_in">SUM</span>(DECODE(to_char(first_time, <span class="string">&#x27;hh24&#x27;</span>), <span class="string">&#x27;05&#x27;</span>, <span class="number">1</span>, <span class="number">0</span>)) &quot;h5&quot;,</span><br><span class="line">       <span class="built_in">SUM</span>(DECODE(to_char(first_time, <span class="string">&#x27;hh24&#x27;</span>), <span class="string">&#x27;06&#x27;</span>, <span class="number">1</span>, <span class="number">0</span>)) &quot;h6&quot;,</span><br><span class="line">       <span class="built_in">SUM</span>(DECODE(to_char(first_time, <span class="string">&#x27;hh24&#x27;</span>), <span class="string">&#x27;07&#x27;</span>, <span class="number">1</span>, <span class="number">0</span>)) &quot;h7&quot;,</span><br><span class="line">       <span class="built_in">SUM</span>(DECODE(to_char(first_time, <span class="string">&#x27;hh24&#x27;</span>), <span class="string">&#x27;08&#x27;</span>, <span class="number">1</span>, <span class="number">0</span>)) &quot;h8&quot;,</span><br><span class="line">       <span class="built_in">SUM</span>(DECODE(to_char(first_time, <span class="string">&#x27;hh24&#x27;</span>), <span class="string">&#x27;09&#x27;</span>, <span class="number">1</span>, <span class="number">0</span>)) &quot;h9&quot;,</span><br><span class="line">       <span class="built_in">SUM</span>(DECODE(to_char(first_time, <span class="string">&#x27;hh24&#x27;</span>), <span class="string">&#x27;10&#x27;</span>, <span class="number">1</span>, <span class="number">0</span>)) &quot;h10&quot;,</span><br><span class="line">       <span class="built_in">SUM</span>(DECODE(to_char(first_time, <span class="string">&#x27;hh24&#x27;</span>), <span class="string">&#x27;11&#x27;</span>, <span class="number">1</span>, <span class="number">0</span>)) &quot;h11&quot;,</span><br><span class="line">       <span class="built_in">SUM</span>(DECODE(to_char(first_time, <span class="string">&#x27;hh24&#x27;</span>), <span class="string">&#x27;12&#x27;</span>, <span class="number">1</span>, <span class="number">0</span>)) &quot;h12&quot;,</span><br><span class="line">       <span class="built_in">SUM</span>(DECODE(to_char(first_time, <span class="string">&#x27;hh24&#x27;</span>), <span class="string">&#x27;13&#x27;</span>, <span class="number">1</span>, <span class="number">0</span>)) &quot;h13&quot;,</span><br><span class="line">       <span class="built_in">SUM</span>(DECODE(to_char(first_time, <span class="string">&#x27;hh24&#x27;</span>), <span class="string">&#x27;14&#x27;</span>, <span class="number">1</span>, <span class="number">0</span>)) &quot;h14&quot;,</span><br><span class="line">       <span class="built_in">SUM</span>(DECODE(to_char(first_time, <span class="string">&#x27;hh24&#x27;</span>), <span class="string">&#x27;15&#x27;</span>, <span class="number">1</span>, <span class="number">0</span>)) &quot;h15&quot;,</span><br><span class="line">       <span class="built_in">SUM</span>(DECODE(to_char(first_time, <span class="string">&#x27;hh24&#x27;</span>), <span class="string">&#x27;16&#x27;</span>, <span class="number">1</span>, <span class="number">0</span>)) &quot;h16&quot;,</span><br><span class="line">       <span class="built_in">SUM</span>(DECODE(to_char(first_time, <span class="string">&#x27;hh24&#x27;</span>), <span class="string">&#x27;17&#x27;</span>, <span class="number">1</span>, <span class="number">0</span>)) &quot;h17&quot;,</span><br><span class="line">       <span class="built_in">SUM</span>(DECODE(to_char(first_time, <span class="string">&#x27;hh24&#x27;</span>), <span class="string">&#x27;18&#x27;</span>, <span class="number">1</span>, <span class="number">0</span>)) &quot;h18&quot;,</span><br><span class="line">       <span class="built_in">SUM</span>(DECODE(to_char(first_time, <span class="string">&#x27;hh24&#x27;</span>), <span class="string">&#x27;19&#x27;</span>, <span class="number">1</span>, <span class="number">0</span>)) &quot;h19&quot;,</span><br><span class="line">       <span class="built_in">SUM</span>(DECODE(to_char(first_time, <span class="string">&#x27;hh24&#x27;</span>), <span class="string">&#x27;20&#x27;</span>, <span class="number">1</span>, <span class="number">0</span>)) &quot;h20&quot;,</span><br><span class="line">       <span class="built_in">SUM</span>(DECODE(to_char(first_time, <span class="string">&#x27;hh24&#x27;</span>), <span class="string">&#x27;21&#x27;</span>, <span class="number">1</span>, <span class="number">0</span>)) &quot;h21&quot;,</span><br><span class="line">       <span class="built_in">SUM</span>(DECODE(to_char(first_time, <span class="string">&#x27;hh24&#x27;</span>), <span class="string">&#x27;22&#x27;</span>, <span class="number">1</span>, <span class="number">0</span>)) &quot;h22&quot;,</span><br><span class="line">       <span class="built_in">SUM</span>(DECODE(to_char(first_time, <span class="string">&#x27;hh24&#x27;</span>), <span class="string">&#x27;23&#x27;</span>, <span class="number">1</span>, <span class="number">0</span>)) &quot;h23&quot;,</span><br><span class="line">       ROUND(<span class="built_in">COUNT</span>(<span class="number">1</span>) <span class="operator">/</span> <span class="number">24</span>, <span class="number">2</span>) &quot;Avg&quot;</span><br><span class="line">  <span class="keyword">FROM</span> gv$log_history</span><br><span class="line"> <span class="keyword">WHERE</span> thread# <span class="operator">=</span> inst_id</span><br><span class="line">   <span class="keyword">AND</span> TRUNC(first_time) <span class="operator">&gt;=</span> to_date(<span class="string">&#x27;2022/01/25&#x27;</span>, <span class="string">&#x27;yyyy/mm/dd&#x27;</span>)</span><br><span class="line"> <span class="keyword">GROUP</span> <span class="keyword">BY</span> TRUNC(first_time), to_char(first_time, <span class="string">&#x27;Dy&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>‍</p><h3 id="查询锁住的表"><a href="#查询锁住的表" class="headerlink" title="查询锁住的表"></a>查询锁住的表</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> dob.object_name &quot;对象名称&quot;,</span><br><span class="line">       lo.session_id &quot;会话ID&quot;,</span><br><span class="line">       vss.serial# &quot;穿行&quot;,</span><br><span class="line">       vss.action &quot;职责&quot;,</span><br><span class="line">       vss.module &quot;表单&quot;,</span><br><span class="line">       vss.blocking_session &quot;等待其他会话ID&quot;,</span><br><span class="line">       vss.client_identifier &quot;用户&quot;,</span><br><span class="line">       vql.sql_text &quot;SQL语句&quot;,</span><br><span class="line">       <span class="string">&#x27;alter system kill session &#x27;</span> <span class="operator">||</span> <span class="string">&#x27;&#x27;&#x27;&#x27;</span> <span class="operator">||</span> lo.session_id <span class="operator">||</span> <span class="string">&#x27;,&#x27;</span> <span class="operator">||</span> vss.serial# <span class="operator">||</span> <span class="string">&#x27;&#x27;&#x27;immediate;&#x27;</span> &quot;命令&quot;</span><br><span class="line">  <span class="keyword">FROM</span> v$locked_object lo,</span><br><span class="line">       dba_objects     dob,</span><br><span class="line">       v$session       vss,</span><br><span class="line">       v$process       vps,</span><br><span class="line">       v$<span class="keyword">sql</span>           vql</span><br><span class="line"> <span class="keyword">WHERE</span> lo.object_id <span class="operator">=</span> dob.object_id</span><br><span class="line">   <span class="keyword">AND</span> lo.session_id <span class="operator">=</span> vss.sid</span><br><span class="line">   <span class="keyword">AND</span> vss.paddr <span class="operator">=</span> vps.addr</span><br><span class="line">   <span class="keyword">AND</span> vql.sql_id(<span class="operator">+</span>) <span class="operator">=</span> vss.sql_id</span><br><span class="line">   <span class="comment">--AND OBJECT_NAME = &#x27;AP_INVOICES_ALL&#x27;</span></span><br><span class="line"> <span class="keyword">ORDER</span> <span class="keyword">BY</span> lo.session_id;</span><br></pre></td></tr></table></figure><p>‍</p><h2 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h2><h3 id="数字转换成大写"><a href="#数字转换成大写" class="headerlink" title="数字转换成大写"></a>数字转换成大写</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FUNCTION</span> convert_money(input_nbr1 NUMBER) <span class="keyword">RETURN</span> VARCHAR2 <span class="keyword">IS</span></span><br><span class="line">    input_nbr_bak  NUMBER(<span class="number">20</span>);</span><br><span class="line">    num_character  VARCHAR2(<span class="number">200</span>) :<span class="operator">=</span> <span class="string">&#x27;零壹贰叁肆伍陆柒捌玖&#x27;</span>;</span><br><span class="line">    unit_character VARCHAR2(<span class="number">400</span>) :<span class="operator">=</span> <span class="string">&#x27;分角圆拾佰仟万拾佰仟亿拾佰仟万拾佰仟亿&#x27;</span>;</span><br><span class="line">    output_string  VARCHAR2(<span class="number">1000</span>) :<span class="operator">=</span> <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    remain_nbr     NUMBER(<span class="number">20</span>);</span><br><span class="line">    bit_num        NUMBER(<span class="number">20</span>);</span><br><span class="line">    bit_unit       VARCHAR2(<span class="number">20</span>);</span><br><span class="line">    bit_indic      NUMBER(<span class="number">1</span>) :<span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    i              NUMBER(<span class="number">2</span>) :<span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    spe_unit       VARCHAR2(<span class="number">20</span>) :<span class="operator">=</span> <span class="string">&#x27;A&#x27;</span>;</span><br><span class="line">    sign_indic     VARCHAR2(<span class="number">10</span>);</span><br><span class="line">    input_nbr      NUMBER(<span class="number">38</span>);</span><br><span class="line">  <span class="keyword">BEGIN</span></span><br><span class="line">    input_nbr :<span class="operator">=</span> input_nbr1 <span class="operator">*</span> <span class="number">100</span>;</span><br><span class="line">    IF input_nbr <span class="operator">=</span> <span class="number">0</span> <span class="keyword">THEN</span></span><br><span class="line">      <span class="keyword">RETURN</span> <span class="string">&#x27;零圆整&#x27;</span>;</span><br><span class="line">    ELSIF input_nbr <span class="operator">&gt;</span> <span class="number">0</span> <span class="keyword">THEN</span></span><br><span class="line">      sign_indic    :<span class="operator">=</span> <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">      input_nbr_bak :<span class="operator">=</span> input_nbr;</span><br><span class="line">    ELSIF input_nbr <span class="operator">&lt;</span> <span class="number">0</span> <span class="keyword">THEN</span></span><br><span class="line">      sign_indic    :<span class="operator">=</span> <span class="string">&#x27;1&#x27;</span>;</span><br><span class="line">      input_nbr_bak :<span class="operator">=</span> <span class="operator">-</span>input_nbr;</span><br><span class="line">    <span class="keyword">END</span> IF;</span><br><span class="line">    LOOP</span><br><span class="line">      remain_nbr    :<span class="operator">=</span> <span class="built_in">floor</span>(input_nbr_bak <span class="operator">/</span> <span class="number">10</span>);</span><br><span class="line">      bit_num       :<span class="operator">=</span> input_nbr_bak <span class="operator">-</span> remain_nbr <span class="operator">*</span> <span class="number">10</span>;</span><br><span class="line">      input_nbr_bak :<span class="operator">=</span> remain_nbr;</span><br><span class="line">      bit_unit      :<span class="operator">=</span> rtrim(substr(unit_character,</span><br><span class="line">                                    i <span class="operator">+</span> <span class="number">1</span>,</span><br><span class="line">                                    <span class="number">1</span>));</span><br><span class="line">      IF bit_num <span class="operator">&gt;</span> <span class="number">0</span> <span class="keyword">THEN</span></span><br><span class="line"> </span><br><span class="line">        bit_indic :<span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        IF i <span class="operator">=</span> <span class="number">6</span></span><br><span class="line">           <span class="keyword">OR</span> i <span class="operator">=</span> <span class="number">14</span> <span class="keyword">THEN</span></span><br><span class="line"> </span><br><span class="line">          spe_unit :<span class="operator">=</span> <span class="string">&#x27;万&#x27;</span>;</span><br><span class="line">        ELSIF (i <span class="operator">&gt;=</span> <span class="number">7</span> <span class="keyword">AND</span> i <span class="operator">&lt;=</span> <span class="number">9</span>)</span><br><span class="line">              <span class="keyword">OR</span> (i <span class="operator">&gt;=</span> <span class="number">15</span> <span class="keyword">AND</span> i <span class="operator">&lt;=</span> <span class="number">17</span>) <span class="keyword">THEN</span></span><br><span class="line"> </span><br><span class="line">          IF spe_unit <span class="operator">!=</span> <span class="string">&#x27;万&#x27;</span> <span class="keyword">THEN</span></span><br><span class="line"> </span><br><span class="line">            output_string :<span class="operator">=</span> <span class="string">&#x27;万&#x27;</span> <span class="operator">||</span> output_string;</span><br><span class="line">            spe_unit      :<span class="operator">=</span> <span class="string">&#x27;万&#x27;</span>;</span><br><span class="line">          <span class="keyword">END</span> IF;</span><br><span class="line">        <span class="keyword">END</span> IF;</span><br><span class="line">        output_string :<span class="operator">=</span> substr(num_character,</span><br><span class="line">                                bit_num <span class="operator">+</span> <span class="number">1</span>,</span><br><span class="line">                                <span class="number">1</span>) <span class="operator">||</span> bit_unit <span class="operator">||</span> output_string;</span><br><span class="line">      <span class="keyword">ELSE</span></span><br><span class="line"> </span><br><span class="line">        IF bit_indic <span class="operator">=</span> <span class="number">1</span> <span class="keyword">THEN</span></span><br><span class="line"> </span><br><span class="line">          output_string :<span class="operator">=</span> <span class="string">&#x27;零&#x27;</span> <span class="operator">||</span> output_string;</span><br><span class="line">        <span class="keyword">END</span> IF;</span><br><span class="line">        IF bit_unit <span class="keyword">IN</span> (<span class="string">&#x27;圆&#x27;</span>,</span><br><span class="line">                        <span class="string">&#x27;亿&#x27;</span>) <span class="keyword">THEN</span></span><br><span class="line"> </span><br><span class="line">          spe_unit      :<span class="operator">=</span> bit_unit;</span><br><span class="line">          output_string :<span class="operator">=</span> bit_unit <span class="operator">||</span> output_string;</span><br><span class="line">        <span class="keyword">END</span> IF;</span><br><span class="line">        bit_indic :<span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">END</span> IF;</span><br><span class="line">      i :<span class="operator">=</span> i <span class="operator">+</span> <span class="number">1</span>;</span><br><span class="line">      EXIT <span class="keyword">WHEN</span> input_nbr_bak <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">END</span> LOOP;</span><br><span class="line">    IF <span class="built_in">MOD</span>(input_nbr,</span><br><span class="line">           <span class="number">100</span>) <span class="operator">=</span> <span class="number">0</span> <span class="keyword">THEN</span></span><br><span class="line"> </span><br><span class="line">      output_string :<span class="operator">=</span> output_string <span class="operator">||</span> <span class="string">&#x27;整&#x27;</span>;</span><br><span class="line">    <span class="keyword">END</span> IF;</span><br><span class="line">    IF sign_indic <span class="operator">=</span> <span class="string">&#x27;1&#x27;</span> <span class="keyword">THEN</span></span><br><span class="line">      output_string :<span class="operator">=</span> <span class="string">&#x27;负&#x27;</span> <span class="operator">||</span> output_string;</span><br><span class="line">    <span class="keyword">END</span> IF;</span><br><span class="line">    <span class="keyword">RETURN</span> output_string;</span><br><span class="line">  <span class="keyword">END</span>;</span><br></pre></td></tr></table></figure><p>‍</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;基本&quot;&gt;&lt;a href=&quot;#基本&quot; class=&quot;headerlink&quot; title=&quot;基本&quot;&gt;&lt;/a&gt;基本&lt;/h2&gt;&lt;h3 id=&quot;获取环境信息&quot;&gt;&lt;a href=&quot;#获取环境信息&quot; class=&quot;headerlink&quot; title=&quot;获取环境信息&quot;&gt;&lt;/a&gt;获</summary>
      
    
    
    
    <category term="Database" scheme="http://example.com/categories/Database/"/>
    
    
    <category term="Oracle" scheme="http://example.com/tags/Oracle/"/>
    
  </entry>
  
  <entry>
    <title>Java 单例模式的安全性</title>
    <link href="http://example.com/2022/05/26/Java%20%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F%E7%9A%84%E5%AE%89%E5%85%A8%E6%80%A7/"/>
    <id>http://example.com/2022/05/26/Java%20%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F%E7%9A%84%E5%AE%89%E5%85%A8%E6%80%A7/</id>
    <published>2022-05-26T02:14:13.000Z</published>
    <updated>2024-03-29T14:17:51.079Z</updated>
    
    <content type="html"><![CDATA[<h2 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h2><p>单例模式是指，某个对象在运行时仅存在一个，并对外提供统一访问方式。</p><ul><li>饿汉模式：类被加载的时候就立即初始化并创建唯一实例</li><li>懒汉模式：在被首次调用的时候才创建唯一实例。加入双重检查锁机制能保证线程安全。</li></ul><p>‍</p><h3 id="饿汉单例模式"><a href="#饿汉单例模式" class="headerlink" title="饿汉单例模式"></a>饿汉单例模式</h3><p>实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 饿汉单例模式</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BeanContainerStaving</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">BeanContainerStaving</span> <span class="variable">instance</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BeanContainerStaving</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 禁止访问构造方法</span></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">BeanContainerStaving</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> BeanContainerStaving <span class="title function_">getInstance</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>‍</p><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SingletonTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>()</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;Thread 1 get instance&quot;</span>);</span><br><span class="line">                System.out.println(BeanContainerStaving.getInstance());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>()</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;Thread 2 get instance&quot;</span>);</span><br><span class="line">                System.out.println(BeanContainerStaving.getInstance());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        thread2.start();</span><br><span class="line">        thread1.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>‍</p><p>结果</p><p>保证获取到的是唯一实例</p><p><img src="/2022/05/26/Java%20%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F%E7%9A%84%E5%AE%89%E5%85%A8%E6%80%A7/image-20220527094219-vqdoi4y.png" alt="image.png"></p><p>‍</p><h3 id="懒汉单例模式"><a href="#懒汉单例模式" class="headerlink" title="懒汉单例模式"></a>懒汉单例模式</h3><p>实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 懒汉单例模式</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BeanContainerLazy</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 防止指令重排序</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span>  BeanContainerLazy instance;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">BeanContainerLazy</span><span class="params">()</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> BeanContainerLazy <span class="title function_">getInstance</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 双重检测</span></span><br><span class="line">        <span class="keyword">if</span>(instance == <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (BeanContainerLazy.class)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(instance == <span class="literal">null</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    instance = <span class="keyword">new</span> <span class="title class_">BeanContainerLazy</span>();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>‍</p><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SingletonTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>()&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;Thread 1 get instance: &quot;</span> + BeanContainerLazy.getInstance());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>()&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;Thread 2 get instance: &quot;</span> + BeanContainerLazy.getInstance());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        thread2.start();</span><br><span class="line">        thread1.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>‍</p><p>结果</p><p>懒汉模式同样保证了实例在运行时唯一</p><p><img src="/2022/05/26/Java%20%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F%E7%9A%84%E5%AE%89%E5%85%A8%E6%80%A7/image-20220527094800-q1lz1rw.png" alt="image.png"></p><p>‍</p><h2 id="单例的安全性"><a href="#单例的安全性" class="headerlink" title="单例的安全性"></a>单例的安全性</h2><p>尽管单例模式已经将构造方法设置为 <code>private</code> 但是依然存在让单例不唯一的手段。</p><ul><li>反射攻击</li><li>序列化攻击</li></ul><p>‍</p><h3 id="反射攻击"><a href="#反射攻击" class="headerlink" title="反射攻击"></a>反射攻击</h3><p>实现：通过反射创建实例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SingletonTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>()&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;Thread 1 get instance: &quot;</span> + BeanContainerLazy.getInstance());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>()&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;Thread 2 get instance: &quot;</span> + BeanContainerLazy.getInstance());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 反射创建懒汉单例模式</span></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>()&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="type">Class</span> <span class="variable">lazyClazz</span> <span class="operator">=</span> BeanContainerLazy.class;</span><br><span class="line">                <span class="type">Constructor</span> <span class="variable">constructor</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    constructor = lazyClazz.getDeclaredConstructor();</span><br><span class="line">                    constructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">                    System.out.println(<span class="string">&quot;Thread 3 get instance: &quot;</span> + constructor.newInstance());</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        thread2.start();</span><br><span class="line">        thread1.start();</span><br><span class="line">        thread3.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>‍</p><p>结果：出现了地址不相同的实例，表明通过反射可以破坏单例模式的唯一性</p><p><img src="/2022/05/26/Java%20%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F%E7%9A%84%E5%AE%89%E5%85%A8%E6%80%A7/image-20220527150904-rey5u1e.png" alt="image.png"></p><p>‍</p><h3 id="序列化攻击"><a href="#序列化攻击" class="headerlink" title="序列化攻击"></a>序列化攻击</h3><p>懒汉式单，实现序列化接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 懒汉单例模式</span></span><br><span class="line"><span class="comment"> * 实现序列化接口</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BeanContainerLazySel</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 防止指令重排序</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> BeanContainerLazySel instance;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">BeanContainerLazySel</span><span class="params">()</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> BeanContainerLazySel <span class="title function_">getInstance</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 双重检测</span></span><br><span class="line">        <span class="keyword">if</span>(instance == <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (BeanContainerLazySel.class)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(instance == <span class="literal">null</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    instance = <span class="keyword">new</span> <span class="title class_">BeanContainerLazySel</span>();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>‍</p><p>测试序列化攻击</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SingletonTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 序列化</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> instance</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setObject</span><span class="params">(BeanContainerLazySel instance)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;instance&quot;</span>));</span><br><span class="line">        outputStream.writeObject(instance);</span><br><span class="line">        outputStream.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 反序列化</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> BeanContainerLazySel <span class="title function_">getObject</span><span class="params">()</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;instance&quot;</span>));</span><br><span class="line">        <span class="type">BeanContainerLazySel</span> <span class="variable">object</span> <span class="operator">=</span> (BeanContainerLazySel)inputStream.readObject();</span><br><span class="line">        inputStream.close();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> object;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">BeanContainerLazySel</span> <span class="variable">instance</span> <span class="operator">=</span> BeanContainerLazySel.getInstance();</span><br><span class="line">        System.out.println(instance);</span><br><span class="line">        setObject(instance);</span><br><span class="line"></span><br><span class="line">        <span class="type">BeanContainerLazySel</span> <span class="variable">object</span> <span class="operator">=</span> getObject();</span><br><span class="line">        System.out.println(object);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>‍</p><p>结果：在懒汉式单例下，通过序列化来获取单例，可以看到地址不一致。</p><p><img src="/2022/05/26/Java%20%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F%E7%9A%84%E5%AE%89%E5%85%A8%E6%80%A7/image-20220529101039-2xeopat.png" alt="image.png"></p><p>‍</p><h3 id="最佳实践"><a href="#最佳实践" class="headerlink" title="最佳实践"></a>最佳实践</h3><h4 id="抵御反射攻击"><a href="#抵御反射攻击" class="headerlink" title="抵御反射攻击"></a>抵御反射攻击</h4><p><strong>使用枚举类型</strong></p><p>把懒汉式单例存放到枚举类型中，可防止反射和序列化攻击</p><p>以懒汉式单例为例子：</p><p>实现（枚举）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 懒汉单例模式</span></span><br><span class="line"><span class="comment"> * 实现序列化接口</span></span><br><span class="line"><span class="comment"> * 单例存放在枚举类型</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EnumBeanContainerStavingSel</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">EnumBeanContainerStavingSel</span><span class="params">()</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> EnumBeanContainerStavingSel <span class="title function_">getInstance</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> ContainerHolder.HOLDER.instance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">enum</span> <span class="title class_">ContainerHolder</span></span><br><span class="line">    &#123;</span><br><span class="line">        HOLDER;</span><br><span class="line">        <span class="keyword">private</span> EnumBeanContainerStavingSel instance;</span><br><span class="line"></span><br><span class="line">        ContainerHolder()</span><br><span class="line">        &#123;</span><br><span class="line">            instance = <span class="keyword">new</span> <span class="title class_">EnumBeanContainerStavingSel</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.coding.singleton;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SingletonTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 序列化</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> instance</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setObject</span><span class="params">(EnumBeanContainerStavingSel instance)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;instance&quot;</span>));</span><br><span class="line">        outputStream.writeObject(instance);</span><br><span class="line">        outputStream.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 反序列化</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> EnumBeanContainerStavingSel <span class="title function_">getObject</span><span class="params">()</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;instance&quot;</span>));</span><br><span class="line">        <span class="type">EnumBeanContainerStavingSel</span> <span class="variable">object</span> <span class="operator">=</span> (EnumBeanContainerStavingSel)inputStream.readObject();</span><br><span class="line">        inputStream.close();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> object;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>()&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;Thread 1 get instance: &quot;</span> + EnumBeanContainerStavingSel.getInstance());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 反射攻击</span></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>()&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="type">Constructor</span> <span class="variable">constructor</span> <span class="operator">=</span> EnumBeanContainerStavingSel.class.getDeclaredConstructor();</span><br><span class="line">                    constructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">                    <span class="type">EnumBeanContainerStavingSel</span> <span class="variable">enumBeanContainerStavingSel</span> <span class="operator">=</span> (EnumBeanContainerStavingSel)constructor.newInstance();</span><br><span class="line">                    System.out.println(<span class="string">&quot;Thread 2 get instance: &quot;</span> + enumBeanContainerStavingSel.getInstance());</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 序列化攻击</span></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>()&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">                <span class="type">EnumBeanContainerStavingSel</span> <span class="variable">instance</span> <span class="operator">=</span> EnumBeanContainerStavingSel.getInstance();</span><br><span class="line"></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">// 把对象写入到磁盘</span></span><br><span class="line">                    setObject(instance);</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// 从磁盘中读取对象，并观察是否与运行中的实例相同</span></span><br><span class="line">                    <span class="type">EnumBeanContainerStavingSel</span> <span class="variable">object</span> <span class="operator">=</span> getObject();</span><br><span class="line">                    System.out.println(<span class="string">&quot;Thread 3 get instance: &quot;</span> + object);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        thread2.start();</span><br><span class="line">        thread1.start();</span><br><span class="line">        thread3.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>‍</p><p>结果</p><p>可以看到放在枚举中的实:</p><ol><li>反射的方式读取都是同一个类。</li><li>序列化方式读取，却不是同一个类，也就是说枚举类型能够抵御反射攻击，却不能抵御序列化攻击</li></ol><p><img src="/2022/05/26/Java%20%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F%E7%9A%84%E5%AE%89%E5%85%A8%E6%80%A7/image-20220529103748-ram6wrj.png" alt="image.png"></p><p>‍</p><h4 id="抵御序列化攻击"><a href="#抵御序列化攻击" class="headerlink" title="抵御序列化攻击"></a>抵御序列化攻击</h4><p>在类中定义 <code>readResolve</code> 的逻辑</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 懒汉单例模式</span></span><br><span class="line"><span class="comment"> * 实现序列化接口</span></span><br><span class="line"><span class="comment"> * 单例存放在枚举类型</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EnumBeanContainerStavingSel</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">EnumBeanContainerStavingSel</span><span class="params">()</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> EnumBeanContainerStavingSel <span class="title function_">getInstance</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> ContainerHolder.HOLDER.instance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">enum</span> <span class="title class_">ContainerHolder</span></span><br><span class="line">    &#123;</span><br><span class="line">        HOLDER;</span><br><span class="line">        <span class="keyword">private</span> EnumBeanContainerStavingSel instance;</span><br><span class="line"></span><br><span class="line">        ContainerHolder()</span><br><span class="line">        &#123;</span><br><span class="line">            instance = <span class="keyword">new</span> <span class="title class_">EnumBeanContainerStavingSel</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Object <span class="title function_">readResolve</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(getInstance() == <span class="literal">null</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">EnumBeanContainerStavingSel</span>();</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> ContainerHolder.HOLDER.instance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>‍</p><p>使用同样的测试用例进行测试，结果如下</p><p><img src="/2022/05/26/Java%20%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F%E7%9A%84%E5%AE%89%E5%85%A8%E6%80%A7/image-20220529104010-0nrheqc.png" alt="image.png"></p><p>‍</p><h4 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h4><ol><li>枚举类型实际上是 <code>static</code> 的代码块，会在类加载的时候执行，不能被反射创建。枚举类型中的实例是线程安全的。</li><li>在序列化对象的时候，如果要保证单例，则需要实现 <code>readResolve()</code> 方法保证对象唯一。</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;单例模式&quot;&gt;&lt;a href=&quot;#单例模式&quot; class=&quot;headerlink&quot; title=&quot;单例模式&quot;&gt;&lt;/a&gt;单例模式&lt;/h2&gt;&lt;p&gt;单例模式是指，某个对象在运行时仅存在一个，并对外提供统一访问方式。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;饿汉模式：类被加载的时候就立即</summary>
      
    
    
    
    <category term="Java" scheme="http://example.com/categories/Java/"/>
    
    
    <category term="Java Core" scheme="http://example.com/tags/Java-Core/"/>
    
  </entry>
  
  <entry>
    <title>MinIO搭建OSS</title>
    <link href="http://example.com/2021/08/23/MinIO%E6%90%AD%E5%BB%BAOSS/"/>
    <id>http://example.com/2021/08/23/MinIO%E6%90%AD%E5%BB%BAOSS/</id>
    <published>2021-08-23T06:34:17.000Z</published>
    <updated>2024-03-29T14:15:51.448Z</updated>
    
    <content type="html"><![CDATA[<h1 id="MinIO搭建OSS"><a href="#MinIO搭建OSS" class="headerlink" title="MinIO搭建OSS"></a>MinIO搭建OSS</h1><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>环境基于dokcer。</p><p>首先确保docker启动状态，输入命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull minio/minio</span><br></pre></td></tr></table></figure><p>‍</p><p>等待下载完毕后，需要创建两个文件夹：config和data，作为minIO的docker映射文件夹</p><p><img src="/2021/08/23/MinIO%E6%90%AD%E5%BB%BAOSS/image-20210823142734-i76o6a9.png" alt="image.png"></p><p>‍</p><p>执行命令，启动容器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line">  -p 9000:9000 \</span><br><span class="line">  -p 9001:9001 \</span><br><span class="line">  --name minio \</span><br><span class="line">  -e <span class="string">&quot;MINIO_ROOT_USER=KALOSORA&quot;</span> \</span><br><span class="line">  -e <span class="string">&quot;MINIO_ROOT_PASSWORD=KALOSORA&quot;</span> \</span><br><span class="line">  -v /Users/kalosora/docker-reflection/minio/data:/data \</span><br><span class="line">  -v /Users/kalosora/docker-reflection/minio/config:/root/.minio \</span><br><span class="line">  minio/minio server /data --console-address <span class="string">&quot;:9001&quot;</span></span><br></pre></td></tr></table></figure><p>命令说明：</p><ul><li>需要映射两个端口，一个是api端口，另一个是web控制台端口，最后要用 <code>--console-address</code> 指定控制台，那么此时9001被指定为控制台端口，另一个9000就会自动变成API端口</li><li>USER和PASSWORD最好是纯英文字符串，不要包含特殊符号，因为曾经试过登录以后Java上传不了文件</li><li>这里映射的&#x2F;data和&#x2F;config路径对应上面创建的两个文件夹路径</li></ul><p>‍</p><p>当docker后台显示如下即为搭建完成</p><p><img src="/2021/08/23/MinIO%E6%90%AD%E5%BB%BAOSS/image-20210823143155-j8ejxnc.png" alt="image.png"></p><p>‍</p><h2 id="设置访问策略"><a href="#设置访问策略" class="headerlink" title="设置访问策略"></a>设置访问策略</h2><p>登陆到控制台</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1:9001</span><br></pre></td></tr></table></figure><p>‍</p><p>点击右上角添加存储桶</p><p><img src="/2021/08/23/MinIO%E6%90%AD%E5%BB%BAOSS/image-20210823143309-9r3x26w.png" alt="image.png"></p><p>‍</p><p>添加完毕后，设置访问策略为public，这样可以通过 <code>http://127.0.0.1:9001/存储桶名称/文件名</code> 的形式访问</p><p><img src="/2021/08/23/MinIO%E6%90%AD%E5%BB%BAOSS/image-20210823143432-vdi8abb.png" alt="image.png"></p><p>‍</p><p>最后添加一个访问规则</p><p><img src="/2021/08/23/MinIO%E6%90%AD%E5%BB%BAOSS/image-20210823143517-dmvj87d.png" alt="image.png"></p><p>‍</p><p>按照图里的进行设置即可</p><p><img src="/2021/08/23/MinIO%E6%90%AD%E5%BB%BAOSS/image-20210823143543-6cub0ux.png" alt="image.png"></p><p>‍</p><h2 id="简单实例"><a href="#简单实例" class="headerlink" title="简单实例"></a>简单实例</h2><p>maven依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--           Minio     --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.minio<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>minio<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>‍</p><h3 id="本地文件上传"><a href="#本地文件上传" class="headerlink" title="本地文件上传"></a>本地文件上传</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// MinIO OSS</span></span><br><span class="line"><span class="comment">// 测试文件上传</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span></span><br><span class="line">        <span class="keyword">throws</span> IOException, NoSuchAlgorithmException, InvalidKeyException &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Base information</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">accessKey</span> <span class="operator">=</span> <span class="string">&quot;KALOSORA&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">secretKey</span> <span class="operator">=</span> <span class="string">&quot;KALOSORA&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">serverUrl</span> <span class="operator">=</span> <span class="string">&quot;http://127.0.0.1:9000&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">bucketName</span> <span class="operator">=</span> <span class="string">&quot;images&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Create a minioClient with the MinIO server playground, its access key and secret key.</span></span><br><span class="line">        <span class="type">MinioClient</span> <span class="variable">minioClient</span> <span class="operator">=</span></span><br><span class="line">                MinioClient.builder()</span><br><span class="line">                        .endpoint(serverUrl)</span><br><span class="line">                        .credentials(accessKey, secretKey)</span><br><span class="line">                        .build();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Make &#x27;asiatrip&#x27; bucket if not exist.</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">found</span> <span class="operator">=</span></span><br><span class="line">                minioClient.bucketExists(BucketExistsArgs.builder().bucket(bucketName).build());</span><br><span class="line">        <span class="keyword">if</span> (!found) &#123;</span><br><span class="line">            <span class="comment">// Make a new bucket called &#x27;asiatrip&#x27;.</span></span><br><span class="line">            minioClient.makeBucket(MakeBucketArgs.builder().bucket(bucketName).build());</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Bucket already exists.&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Upload &#x27;/home/user/Photos/asiaphotos.zip&#x27; as object name &#x27;asiaphotos-2015.zip&#x27; to bucket</span></span><br><span class="line">        <span class="comment">// &#x27;asiatrip&#x27;.</span></span><br><span class="line">        minioClient.uploadObject(</span><br><span class="line">                UploadObjectArgs.builder()</span><br><span class="line">                        <span class="comment">//.contentType(&quot;image/jpg&quot;)</span></span><br><span class="line">                        .bucket(bucketName)</span><br><span class="line">                        .object(<span class="string">&quot;portal-cover.jpg&quot;</span>)</span><br><span class="line">                        .filename(<span class="string">&quot;/Users/kalosora/Desktop/portal-cover.jpg&quot;</span>)</span><br><span class="line">                        .build());</span><br><span class="line">        System.out.println(<span class="string">&quot;File has been uploaded!&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (MinioException e) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Error occurred: &quot;</span> + e);</span><br><span class="line">        System.out.println(<span class="string">&quot;HTTP trace: &quot;</span> + e.httpTrace());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>‍</p><h3 id="文件流上传"><a href="#文件流上传" class="headerlink" title="文件流上传"></a>文件流上传</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span></span><br><span class="line">            <span class="keyword">throws</span> IOException, NoSuchAlgorithmException, InvalidKeyException &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Base information</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">accessKey</span> <span class="operator">=</span> <span class="string">&quot;KALOSORA&quot;</span>;</span><br><span class="line">            <span class="type">String</span> <span class="variable">secretKey</span> <span class="operator">=</span> <span class="string">&quot;KALOSORA&quot;</span>;</span><br><span class="line">            <span class="type">String</span> <span class="variable">serverUrl</span> <span class="operator">=</span> <span class="string">&quot;http://127.0.0.1:9000&quot;</span>;</span><br><span class="line">            <span class="type">String</span> <span class="variable">bucketName</span> <span class="operator">=</span> <span class="string">&quot;article&quot;</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Create a minioClient with the MinIO server playground, its access key and secret key.</span></span><br><span class="line">            <span class="type">MinioClient</span> <span class="variable">minioClient</span> <span class="operator">=</span></span><br><span class="line">                    MinioClient.builder()</span><br><span class="line">                            .endpoint(serverUrl)</span><br><span class="line">                            .credentials(accessKey, secretKey)</span><br><span class="line">                            .build();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Make &#x27;asiatrip&#x27; bucket if not exist.</span></span><br><span class="line">            <span class="type">boolean</span> <span class="variable">found</span> <span class="operator">=</span></span><br><span class="line">                    minioClient.bucketExists(BucketExistsArgs.builder().bucket(bucketName).build());</span><br><span class="line">            <span class="keyword">if</span> (!found) &#123;</span><br><span class="line">                <span class="comment">// Make a new bucket called &#x27;asiatrip&#x27;.</span></span><br><span class="line">                minioClient.makeBucket(MakeBucketArgs.builder().bucket(bucketName).build());</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;Bucket &#x27;test&#x27; already exists.&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 通过文件流上传</span></span><br><span class="line">            <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;/Users/kalosora/Downloads/tempfile/210426A9N10GBYNC_数据结构 - 集合.md&quot;</span>);</span><br><span class="line">            minioClient.putObject(</span><br><span class="line">                    PutObjectArgs.builder().bucket(bucketName)</span><br><span class="line">                            .object(<span class="string">&quot;kalosora/article.md&quot;</span>) <span class="comment">// 这里可以自动生成kalosora文件夹</span></span><br><span class="line">                            .stream(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(file), -<span class="number">1</span>, <span class="number">10485760</span>)</span><br><span class="line">                            .build());</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">&quot;File has been uploaded!&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (MinioException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Error occurred: &quot;</span> + e);</span><br><span class="line">            System.out.println(<span class="string">&quot;HTTP trace: &quot;</span> + e.httpTrace());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>‍</p><h2 id="Springboot整合"><a href="#Springboot整合" class="headerlink" title="Springboot整合"></a>Springboot整合</h2><p>‍</p><p>前端引用上传后的图片</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;http://127.0.0.1:9000/images/portal-cover.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;Photo 1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;img-fluid&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>完整实例1</p><blockquote><p><a href="https://blog.csdn.net/zhuyu19911016520/article/details/109448375?utm_medium=distribute.pc_aggpage_search_result.none-task-blog-2~aggregatepage~first_rank_v2~rank_aggregation-15-109448375.pc_agg_rank_aggregation&utm_term=minio+%E5%AD%98%E5%82%A8%E8%A7%86%E9%A2%91&spm=1000.2123.3001.4430">https://blog.csdn.net/zhuyu19911016520/article/details/109448375?utm_medium=distribute.pc_aggpage_search_result.none-task-blog-2~aggregatepage~first_rank_v2~rank_aggregation-15-109448375.pc_agg_rank_aggregation&amp;utm_term=minio+存储视频&amp;spm=1000.2123.3001.4430</a></p></blockquote><p>完整实例2</p><blockquote><p><a href="https://blog.csdn.net/qq_43230007/article/details/108701081?utm_medium=distribute.pc_aggpage_search_result.none-task-blog-2~aggregatepage~first_rank_v2~rank_aggregation-2-108701081.pc_agg_rank_aggregation&utm_term=minio%E6%96%87%E4%BB%B6%E6%B5%81&spm=1000.2123.3001.4430">https://blog.csdn.net/qq_43230007/article/details/108701081?utm_medium=distribute.pc_aggpage_search_result.none-task-blog-2~aggregatepage~first_rank_v2~rank_aggregation-2-108701081.pc_agg_rank_aggregation&amp;utm_term=minio文件流&amp;spm=1000.2123.3001.4430</a></p></blockquote><p>‍</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;MinIO搭建OSS&quot;&gt;&lt;a href=&quot;#MinIO搭建OSS&quot; class=&quot;headerlink&quot; title=&quot;MinIO搭建OSS&quot;&gt;&lt;/a&gt;MinIO搭建OSS&lt;/h1&gt;&lt;h2 id=&quot;环境搭建&quot;&gt;&lt;a href=&quot;#环境搭建&quot; class=&quot;head</summary>
      
    
    
    
    <category term="Java" scheme="http://example.com/categories/Java/"/>
    
    
    <category term="Spring" scheme="http://example.com/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Docker部署Eureka</title>
    <link href="http://example.com/2021/07/14/Docker%E9%83%A8%E7%BD%B2Eureka/"/>
    <id>http://example.com/2021/07/14/Docker%E9%83%A8%E7%BD%B2Eureka/</id>
    <published>2021-07-14T07:21:03.000Z</published>
    <updated>2025-03-04T00:53:03.048Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Docker部署Eureka"><a href="#Docker部署Eureka" class="headerlink" title="Docker部署Eureka"></a>Docker部署Eureka</h1><h2 id="SpringCloud打包"><a href="#SpringCloud打包" class="headerlink" title="SpringCloud打包"></a>SpringCloud打包</h2><p>【注意】</p><ul><li><p>其他微服务组件部署方式相同，如zuul也能这样部署（部署依然失败）</p></li><li><p>部署zuul要指定本地网络 <code>--network=host </code></p><ul><li><blockquote><p>docker run –network&#x3D;host –name zuul-server  -d -p 7070:7070 springcloud&#x2F;zuul-server</p></blockquote></li></ul></li></ul><p>‍</p><p>1.在需要打包的项目的 <code>pom.xml</code> 中添加如下内容</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 打包参数 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 打包的文件名称 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">finalName</span>&gt;</span>eureka<span class="tag">&lt;/<span class="name">finalName</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><p>‍</p><p>2.更新maven，并全局install</p><p><img src="/2021/07/14/Docker%E9%83%A8%E7%BD%B2Eureka/image-20210714091040-72udekv.png" alt="image.png">  </p><p>‍</p><p>直到出现构建成功字样</p><p><img src="/2021/07/14/Docker%E9%83%A8%E7%BD%B2Eureka/image-20210714091121-5crabt0.png" alt="image.png">  </p><p>‍</p><p>3.找到需要打包的项目，这里以 eureka 为例，点击package</p><p>直到出现打包成功字样</p><p><img src="/2021/07/14/Docker%E9%83%A8%E7%BD%B2Eureka/image-20210714091257-0fnxdxv.png" alt="image.png">  </p><p>‍</p><p>4.命令终端运行，测试系统是否正常连接到该项目</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">java </span>-<span class="keyword">jar </span>eureka.<span class="keyword">jar</span></span><br></pre></td></tr></table></figure><p>‍</p><p>结果如下（需要终止时，<code>ctrl + c</code> 或 关闭终端窗口 即可）</p><p><img src="/2021/07/14/Docker%E9%83%A8%E7%BD%B2Eureka/image-20210714091413-79bzuse.png" alt="image.png">  </p><h2 id="jar构建镜像"><a href="#jar构建镜像" class="headerlink" title="jar构建镜像"></a>jar构建镜像</h2><p>1.拉取jdk镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull java:8</span><br></pre></td></tr></table></figure><p>‍</p><p>2.新建一个目录，并且把jar包放进去</p><p>3.在新建的目录中，创建名为Dockerfile的文件</p><ul><li>EXPOSE：表明暴露的端口号</li><li>ADD：表明要添加的jar包</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">FROM java:8</span><br><span class="line">EXPOSE 7070</span><br><span class="line">VOLUME /tmp</span><br><span class="line">ADD eureka.jar app.jar</span><br><span class="line">RUN sh -c &#x27;touch /app.jar&#x27;</span><br><span class="line">ENV JAVA_OPTS=&quot;&quot;</span><br><span class="line">ENTRYPOINT [ &quot;sh&quot;, &quot;-c&quot;, &quot;java $JAVA_OPTS -Djava.security.egd=file:/dev/./urandom -jar /app.jar&quot; ]</span><br></pre></td></tr></table></figure><p>‍</p><p>目录内容如下：</p><p><img src="/2021/07/14/Docker%E9%83%A8%E7%BD%B2Eureka/image-20210714100334-l0hh2wd.png" alt="image.png">  </p><p>‍</p><p>4.命令终端cd进入该目录，执行命令</p><p>【注意】命令末尾有个 ‘.’ 代表当前路径</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -t springcloud/eureka .</span><br></pre></td></tr></table></figure><p>‍</p><p>结果：</p><p><img src="/2021/07/14/Docker%E9%83%A8%E7%BD%B2Eureka/image-20210714095258-vnft06a.png" alt="image.png">  </p><p>‍</p><p>5.在docker中查看镜像</p><p>也可以使用命令 <code>docker images</code></p><p><img src="/2021/07/14/Docker%E9%83%A8%E7%BD%B2Eureka/image-20210714095344-w6ih4fz.png" alt="image.png">  </p><p>‍</p><p>6.创建容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 7070:7070 springcloud/eureka</span><br></pre></td></tr></table></figure><p>‍</p><p>7.访问eureka</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost:7070</span><br></pre></td></tr></table></figure><p>‍</p><p>结果可以看到运行成功</p><p><img src="/2021/07/14/Docker%E9%83%A8%E7%BD%B2Eureka/image-20210714095610-yyuntu2.png" alt="image.png">  </p><p>‍</p><p>‍</p><p>‍</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Docker部署Eureka&quot;&gt;&lt;a href=&quot;#Docker部署Eureka&quot; class=&quot;headerlink&quot; title=&quot;Docker部署Eureka&quot;&gt;&lt;/a&gt;Docker部署Eureka&lt;/h1&gt;&lt;h2 id=&quot;SpringCloud打包&quot;&gt;&lt;a</summary>
      
    
    
    
    <category term="Cloud Native" scheme="http://example.com/categories/Cloud-Native/"/>
    
    
    <category term="Docker" scheme="http://example.com/tags/Docker/"/>
    
    <category term="Spring" scheme="http://example.com/tags/Spring/"/>
    
    <category term="Devops" scheme="http://example.com/tags/Devops/"/>
    
  </entry>
  
</feed>
